# coding: utf-8

"""
    Skycoin REST API.

    Skycoin is a next-generation cryptocurrency.  # noqa: E501

    The version of the OpenAPI document: 0.27.0
    Contact: contact@skycoin.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2002(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_coinhour_supply': 'str',
        'current_supply': 'str',
        'locked_distribution_addresses': 'list[str]',
        'max_supply': 'str',
        'total_coinhour_supply': 'str',
        'total_supply': 'str',
        'unlocked_distribution_addresses': 'list[str]'
    }

    attribute_map = {
        'current_coinhour_supply': 'current_coinhour_supply',
        'current_supply': 'current_supply',
        'locked_distribution_addresses': 'locked_distribution_addresses',
        'max_supply': 'max_supply',
        'total_coinhour_supply': 'total_coinhour_supply',
        'total_supply': 'total_supply',
        'unlocked_distribution_addresses': 'unlocked_distribution_addresses'
    }

    def __init__(self, current_coinhour_supply=None, current_supply=None, locked_distribution_addresses=None, max_supply=None, total_coinhour_supply=None, total_supply=None, unlocked_distribution_addresses=None):  # noqa: E501
        """InlineResponse2002 - a model defined in OpenAPI"""  # noqa: E501

        self._current_coinhour_supply = None
        self._current_supply = None
        self._locked_distribution_addresses = None
        self._max_supply = None
        self._total_coinhour_supply = None
        self._total_supply = None
        self._unlocked_distribution_addresses = None
        self.discriminator = None

        if current_coinhour_supply is not None:
            self.current_coinhour_supply = current_coinhour_supply
        if current_supply is not None:
            self.current_supply = current_supply
        if locked_distribution_addresses is not None:
            self.locked_distribution_addresses = locked_distribution_addresses
        if max_supply is not None:
            self.max_supply = max_supply
        if total_coinhour_supply is not None:
            self.total_coinhour_supply = total_coinhour_supply
        if total_supply is not None:
            self.total_supply = total_supply
        if unlocked_distribution_addresses is not None:
            self.unlocked_distribution_addresses = unlocked_distribution_addresses

    @property
    def current_coinhour_supply(self):
        """Gets the current_coinhour_supply of this InlineResponse2002.  # noqa: E501

        CurrentCoinHourSupply is coins hours in non distribution addresses.  # noqa: E501

        :return: The current_coinhour_supply of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._current_coinhour_supply

    @current_coinhour_supply.setter
    def current_coinhour_supply(self, current_coinhour_supply):
        """Sets the current_coinhour_supply of this InlineResponse2002.

        CurrentCoinHourSupply is coins hours in non distribution addresses.  # noqa: E501

        :param current_coinhour_supply: The current_coinhour_supply of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._current_coinhour_supply = current_coinhour_supply

    @property
    def current_supply(self):
        """Gets the current_supply of this InlineResponse2002.  # noqa: E501

        Coins distributed beyond the project.  # noqa: E501

        :return: The current_supply of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._current_supply

    @current_supply.setter
    def current_supply(self, current_supply):
        """Sets the current_supply of this InlineResponse2002.

        Coins distributed beyond the project.  # noqa: E501

        :param current_supply: The current_supply of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._current_supply = current_supply

    @property
    def locked_distribution_addresses(self):
        """Gets the locked_distribution_addresses of this InlineResponse2002.  # noqa: E501

        Distribution addresses which are locked and do not count towards total supply.  # noqa: E501

        :return: The locked_distribution_addresses of this InlineResponse2002.  # noqa: E501
        :rtype: list[str]
        """
        return self._locked_distribution_addresses

    @locked_distribution_addresses.setter
    def locked_distribution_addresses(self, locked_distribution_addresses):
        """Sets the locked_distribution_addresses of this InlineResponse2002.

        Distribution addresses which are locked and do not count towards total supply.  # noqa: E501

        :param locked_distribution_addresses: The locked_distribution_addresses of this InlineResponse2002.  # noqa: E501
        :type: list[str]
        """

        self._locked_distribution_addresses = locked_distribution_addresses

    @property
    def max_supply(self):
        """Gets the max_supply of this InlineResponse2002.  # noqa: E501

        MaxSupply is the maximum number of coins to be distributed ever.  # noqa: E501

        :return: The max_supply of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._max_supply

    @max_supply.setter
    def max_supply(self, max_supply):
        """Sets the max_supply of this InlineResponse2002.

        MaxSupply is the maximum number of coins to be distributed ever.  # noqa: E501

        :param max_supply: The max_supply of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._max_supply = max_supply

    @property
    def total_coinhour_supply(self):
        """Gets the total_coinhour_supply of this InlineResponse2002.  # noqa: E501

        TotalCoinHourSupply is coin hours in all addresses including unlocked distribution addresses.  # noqa: E501

        :return: The total_coinhour_supply of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._total_coinhour_supply

    @total_coinhour_supply.setter
    def total_coinhour_supply(self, total_coinhour_supply):
        """Sets the total_coinhour_supply of this InlineResponse2002.

        TotalCoinHourSupply is coin hours in all addresses including unlocked distribution addresses.  # noqa: E501

        :param total_coinhour_supply: The total_coinhour_supply of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._total_coinhour_supply = total_coinhour_supply

    @property
    def total_supply(self):
        """Gets the total_supply of this InlineResponse2002.  # noqa: E501

        TotalSupply is CurrentSupply plus coins held by the distribution addresses that are spendable.  # noqa: E501

        :return: The total_supply of this InlineResponse2002.  # noqa: E501
        :rtype: str
        """
        return self._total_supply

    @total_supply.setter
    def total_supply(self, total_supply):
        """Sets the total_supply of this InlineResponse2002.

        TotalSupply is CurrentSupply plus coins held by the distribution addresses that are spendable.  # noqa: E501

        :param total_supply: The total_supply of this InlineResponse2002.  # noqa: E501
        :type: str
        """

        self._total_supply = total_supply

    @property
    def unlocked_distribution_addresses(self):
        """Gets the unlocked_distribution_addresses of this InlineResponse2002.  # noqa: E501

        Distribution addresses which count towards total supply.  # noqa: E501

        :return: The unlocked_distribution_addresses of this InlineResponse2002.  # noqa: E501
        :rtype: list[str]
        """
        return self._unlocked_distribution_addresses

    @unlocked_distribution_addresses.setter
    def unlocked_distribution_addresses(self, unlocked_distribution_addresses):
        """Sets the unlocked_distribution_addresses of this InlineResponse2002.

        Distribution addresses which count towards total supply.  # noqa: E501

        :param unlocked_distribution_addresses: The unlocked_distribution_addresses of this InlineResponse2002.  # noqa: E501
        :type: list[str]
        """

        self._unlocked_distribution_addresses = unlocked_distribution_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
