# coding: utf-8

"""
    Skycoin REST API.

    Skycoin is a next-generation cryptocurrency.  # noqa: E501

    OpenAPI spec version: 0.26.0
    Contact: contact@skycoin.net
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import skyapi
from skyapi.api.default_api import DefaultApi  # noqa: E501
from skyapi.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = skyapi.api.default_api.DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_address_count(self):
        """Test case for address_count

        Returns the total number of unique address that have coins.  # noqa: E501
        """
        pass

    def test_address_uxouts(self):
        """Test case for address_uxouts

        """
        pass

    def test_api_v1_rawtx_get(self):
        """Test case for api_v1_rawtx_get

        """
        pass

    def test_api_v2_metrics_get(self):
        """Test case for api_v2_metrics_get

        """
        pass

    def test_balance_get(self):
        """Test case for balance_get

        Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.  # noqa: E501
        """
        pass

    def test_balance_post(self):
        """Test case for balance_post

        Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.  # noqa: E501
        """
        pass

    def test_block(self):
        """Test case for block

        Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.  # noqa: E501
        """
        pass

    def test_blockchain_metadata(self):
        """Test case for blockchain_metadata

        Returns the blockchain metadata.  # noqa: E501
        """
        pass

    def test_blockchain_progress(self):
        """Test case for blockchain_progress

        Returns the blockchain sync progress.  # noqa: E501
        """
        pass

    def test_blocks(self):
        """Test case for blocks

        Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.  # noqa: E501
        """
        pass

    def test_coin_supply(self):
        """Test case for coin_supply

        """
        pass

    def test_csrf(self):
        """Test case for csrf

        Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.  # noqa: E501
        """
        pass

    def test_data_delete(self):
        """Test case for data_delete

        """
        pass

    def test_data_get(self):
        """Test case for data_get

        """
        pass

    def test_data_post(self):
        """Test case for data_post

        """
        pass

    def test_default_connections(self):
        """Test case for default_connections

        defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.  # noqa: E501
        """
        pass

    def test_health(self):
        """Test case for health

        Returns node health data.  # noqa: E501
        """
        pass

    def test_last_blocks(self):
        """Test case for last_blocks

        """
        pass

    def test_network_connection(self):
        """Test case for network_connection

        This endpoint returns a specific connection.  # noqa: E501
        """
        pass

    def test_network_connections(self):
        """Test case for network_connections

        This endpoint returns all outgoings connections.  # noqa: E501
        """
        pass

    def test_network_connections_disconnect(self):
        """Test case for network_connections_disconnect

        """
        pass

    def test_network_connections_exchange(self):
        """Test case for network_connections_exchange

        """
        pass

    def test_network_connections_trust(self):
        """Test case for network_connections_trust

        trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.  # noqa: E501
        """
        pass

    def test_outputs_get(self):
        """Test case for outputs_get

        If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.  # noqa: E501
        """
        pass

    def test_outputs_post(self):
        """Test case for outputs_post

        If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.  # noqa: E501
        """
        pass

    def test_pending_txs(self):
        """Test case for pending_txs

        """
        pass

    def test_resend_unconfirmed_txns(self):
        """Test case for resend_unconfirmed_txns

        """
        pass

    def test_richlist(self):
        """Test case for richlist

        Returns the top skycoin holders.  # noqa: E501
        """
        pass

    def test_transaction(self):
        """Test case for transaction

        """
        pass

    def test_transaction_inject(self):
        """Test case for transaction_inject

        Broadcast a hex-encoded, serialized transaction to the network.  # noqa: E501
        """
        pass

    def test_transaction_post(self):
        """Test case for transaction_post

        """
        pass

    def test_transaction_post_unspent(self):
        """Test case for transaction_post_unspent

        """
        pass

    def test_transaction_raw(self):
        """Test case for transaction_raw

        Returns the hex-encoded byte serialization of a transaction. The transaction may be confirmed or unconfirmed.  # noqa: E501
        """
        pass

    def test_transaction_verify(self):
        """Test case for transaction_verify

        """
        pass

    def test_transactions_get(self):
        """Test case for transactions_get

        Returns transactions that match the filters.  # noqa: E501
        """
        pass

    def test_transactions_post(self):
        """Test case for transactions_post

        Returns transactions that match the filters.  # noqa: E501
        """
        pass

    def test_uxout(self):
        """Test case for uxout

        Returns an unspent output by ID.  # noqa: E501
        """
        pass

    def test_verify_address(self):
        """Test case for verify_address

        Verifies a Skycoin address.  # noqa: E501
        """
        pass

    def test_version(self):
        """Test case for version

        """
        pass

    def test_wallet(self):
        """Test case for wallet

        Returns a wallet by id.  # noqa: E501
        """
        pass

    def test_wallet_balance(self):
        """Test case for wallet_balance

        Returns the wallet's balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.  # noqa: E501
        """
        pass

    def test_wallet_create(self):
        """Test case for wallet_create

        """
        pass

    def test_wallet_decrypt(self):
        """Test case for wallet_decrypt

        Decrypts wallet.  # noqa: E501
        """
        pass

    def test_wallet_encrypt(self):
        """Test case for wallet_encrypt

        Encrypt wallet.  # noqa: E501
        """
        pass

    def test_wallet_folder(self):
        """Test case for wallet_folder

        """
        pass

    def test_wallet_new_address(self):
        """Test case for wallet_new_address

        """
        pass

    def test_wallet_new_seed(self):
        """Test case for wallet_new_seed

        """
        pass

    def test_wallet_recover(self):
        """Test case for wallet_recover

        Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.  # noqa: E501
        """
        pass

    def test_wallet_seed(self):
        """Test case for wallet_seed

        This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.  # noqa: E501
        """
        pass

    def test_wallet_seed_verify(self):
        """Test case for wallet_seed_verify

        Verifies a wallet seed.  # noqa: E501
        """
        pass

    def test_wallet_transaction(self):
        """Test case for wallet_transaction

        Creates a signed transaction  # noqa: E501
        """
        pass

    def test_wallet_transaction_sign(self):
        """Test case for wallet_transaction_sign

        Creates a signed transaction  # noqa: E501
        """
        pass

    def test_wallet_transactions(self):
        """Test case for wallet_transactions

        """
        pass

    def test_wallet_unload(self):
        """Test case for wallet_unload

        Unloads wallet from the wallet service.  # noqa: E501
        """
        pass

    def test_wallet_update(self):
        """Test case for wallet_update

        Update the wallet.  # noqa: E501
        """
        pass

    def test_wallets(self):
        """Test case for wallets

        """
        pass


if __name__ == '__main__':
    unittest.main()
