# coding: utf-8

"""
    Hardware Wallet Daemon API

    This is the hardware-wallet-daemon API  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: steve@skycoin.net
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from skyhwd.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apply_settings_post(self, **kwargs):  # noqa: E501
        """apply_settings_post  # noqa: E501

        Apply hardware wallet settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_settings_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplySettingsRequest apply_settings_request: ApplySettingsRequest is request data for /api/v1/apply_settings
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_settings_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.apply_settings_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def apply_settings_post_with_http_info(self, **kwargs):  # noqa: E501
        """apply_settings_post  # noqa: E501

        Apply hardware wallet settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_settings_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApplySettingsRequest apply_settings_request: ApplySettingsRequest is request data for /api/v1/apply_settings
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['apply_settings_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_settings_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'apply_settings_request' in local_var_params:
            body_params = local_var_params['apply_settings_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/apply_settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def backup_post(self, **kwargs):  # noqa: E501
        """backup_post  # noqa: E501

        Start seed backup procedure.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backup_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.backup_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.backup_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def backup_post_with_http_info(self, **kwargs):  # noqa: E501
        """backup_post  # noqa: E501

        Start seed backup procedure.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.backup_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method backup_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/backup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_put(self, **kwargs):  # noqa: E501
        """cancel_put  # noqa: E501

        Cancels the current operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cancel_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def cancel_put_with_http_info(self, **kwargs):  # noqa: E501
        """cancel_put  # noqa: E501

        Cancels the current operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_message_signature_post(self, **kwargs):  # noqa: E501
        """check_message_signature_post  # noqa: E501

        Check a message signature matches the given address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_message_signature_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CheckMessageSignatureRequest check_message_signature_request: CheckMessageSignatureRequest is request data for /api/v1/check_message_signature
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_message_signature_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.check_message_signature_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def check_message_signature_post_with_http_info(self, **kwargs):  # noqa: E501
        """check_message_signature_post  # noqa: E501

        Check a message signature matches the given address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_message_signature_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CheckMessageSignatureRequest check_message_signature_request: CheckMessageSignatureRequest is request data for /api/v1/check_message_signature
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['check_message_signature_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_message_signature_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'check_message_signature_request' in local_var_params:
            body_params = local_var_params['check_message_signature_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/check_message_signature', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def connected_get(self, **kwargs):  # noqa: E501
        """connected_get  # noqa: E501

        check whether device is connected or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connected_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.connected_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.connected_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def connected_get_with_http_info(self, **kwargs):  # noqa: E501
        """connected_get  # noqa: E501

        check whether device is connected or not.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.connected_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method connected_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/connected', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def csrf_get(self, **kwargs):  # noqa: E501
        """csrf_get  # noqa: E501

        Returns csrf token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csrf_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CSRFResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.csrf_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.csrf_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def csrf_get_with_http_info(self, **kwargs):  # noqa: E501
        """csrf_get  # noqa: E501

        Returns csrf token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csrf_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CSRFResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method csrf_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/csrf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CSRFResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def features_get(self, **kwargs):  # noqa: E501
        """features_get  # noqa: E501

        Returns device information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.features_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FeaturesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.features_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.features_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def features_get_with_http_info(self, **kwargs):  # noqa: E501
        """features_get  # noqa: E501

        Returns device information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.features_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FeaturesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method features_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/features', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FeaturesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def firmware_update_put(self, **kwargs):  # noqa: E501
        """firmware_update_put  # noqa: E501

        Update firmware  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firmware_update_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.firmware_update_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.firmware_update_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def firmware_update_put_with_http_info(self, **kwargs):  # noqa: E501
        """firmware_update_put  # noqa: E501

        Update firmware  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.firmware_update_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method firmware_update_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/firmware_update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_addresses_post(self, **kwargs):  # noqa: E501
        """generate_addresses_post  # noqa: E501

        Generate addresses for the hardware wallet seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_addresses_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerateAddressesRequest generate_addresses_request: GenerateAddressesRequest is request data for /api/v1/generate_addresses
        :return: GenerateAddressesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_addresses_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_addresses_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_addresses_post_with_http_info(self, **kwargs):  # noqa: E501
        """generate_addresses_post  # noqa: E501

        Generate addresses for the hardware wallet seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_addresses_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerateAddressesRequest generate_addresses_request: GenerateAddressesRequest is request data for /api/v1/generate_addresses
        :return: GenerateAddressesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['generate_addresses_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_addresses_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generate_addresses_request' in local_var_params:
            body_params = local_var_params['generate_addresses_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/generate_addresses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenerateAddressesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_mnemonic_post(self, **kwargs):  # noqa: E501
        """generate_mnemonic_post  # noqa: E501

        Generate mnemonic can be used to initialize the device with a random seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_mnemonic_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerateMnemonicRequest generate_mnemonic_request: GenerateMnemonicRequest is request data for /api/v1/generate_mnemonic
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_mnemonic_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_mnemonic_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_mnemonic_post_with_http_info(self, **kwargs):  # noqa: E501
        """generate_mnemonic_post  # noqa: E501

        Generate mnemonic can be used to initialize the device with a random seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_mnemonic_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GenerateMnemonicRequest generate_mnemonic_request: GenerateMnemonicRequest is request data for /api/v1/generate_mnemonic
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['generate_mnemonic_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_mnemonic_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generate_mnemonic_request' in local_var_params:
            body_params = local_var_params['generate_mnemonic_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/generate_mnemonic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def intermediate_passphrase_post(self, **kwargs):  # noqa: E501
        """intermediate_passphrase_post  # noqa: E501

        passphrase ack request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intermediate_passphrase_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PassphraseRequest passphrase_request: PassPhraseRequest is request data for /api/v1/intermediate/passphrase
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.intermediate_passphrase_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.intermediate_passphrase_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def intermediate_passphrase_post_with_http_info(self, **kwargs):  # noqa: E501
        """intermediate_passphrase_post  # noqa: E501

        passphrase ack request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intermediate_passphrase_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PassphraseRequest passphrase_request: PassPhraseRequest is request data for /api/v1/intermediate/passphrase
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['passphrase_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intermediate_passphrase_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'passphrase_request' in local_var_params:
            body_params = local_var_params['passphrase_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/intermediate/passphrase', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def intermediate_pin_matrix_post(self, **kwargs):  # noqa: E501
        """intermediate_pin_matrix_post  # noqa: E501

        pin matrix ack request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intermediate_pin_matrix_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinMatrixRequest pin_matrix_request: PinMatrixRequest is request data for /api/v1/intermediate/pin_matrix
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.intermediate_pin_matrix_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.intermediate_pin_matrix_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def intermediate_pin_matrix_post_with_http_info(self, **kwargs):  # noqa: E501
        """intermediate_pin_matrix_post  # noqa: E501

        pin matrix ack request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intermediate_pin_matrix_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PinMatrixRequest pin_matrix_request: PinMatrixRequest is request data for /api/v1/intermediate/pin_matrix
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['pin_matrix_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intermediate_pin_matrix_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pin_matrix_request' in local_var_params:
            body_params = local_var_params['pin_matrix_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/intermediate/pin_matrix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def intermediate_word_post(self, **kwargs):  # noqa: E501
        """intermediate_word_post  # noqa: E501

        word ack request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intermediate_word_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WordRequest word_request: WordRequest is request data for /api/v1/intermediate/word
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.intermediate_word_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.intermediate_word_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def intermediate_word_post_with_http_info(self, **kwargs):  # noqa: E501
        """intermediate_word_post  # noqa: E501

        word ack request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.intermediate_word_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WordRequest word_request: WordRequest is request data for /api/v1/intermediate/word
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['word_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method intermediate_word_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'word_request' in local_var_params:
            body_params = local_var_params['word_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/intermediate/word', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recovery_post(self, **kwargs):  # noqa: E501
        """recovery_post  # noqa: E501

        Recover existing wallet using seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recovery_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RecoveryRequest recovery_request: RecoveryRequest is request data for /api/v1/check_message_signature
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recovery_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recovery_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def recovery_post_with_http_info(self, **kwargs):  # noqa: E501
        """recovery_post  # noqa: E501

        Recover existing wallet using seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recovery_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RecoveryRequest recovery_request: RecoveryRequest is request data for /api/v1/check_message_signature
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['recovery_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recovery_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'recovery_request' in local_var_params:
            body_params = local_var_params['recovery_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/recovery', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_mnemonic_post(self, **kwargs):  # noqa: E501
        """set_mnemonic_post  # noqa: E501

        Set mnemonic can be used to initialize the device with your own seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_mnemonic_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetMnemonicRequest set_mnemonic_request: SetMnemonicRequest is request data for /api/v1/set_mnemonic
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_mnemonic_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_mnemonic_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_mnemonic_post_with_http_info(self, **kwargs):  # noqa: E501
        """set_mnemonic_post  # noqa: E501

        Set mnemonic can be used to initialize the device with your own seed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_mnemonic_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetMnemonicRequest set_mnemonic_request: SetMnemonicRequest is request data for /api/v1/set_mnemonic
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['set_mnemonic_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_mnemonic_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_mnemonic_request' in local_var_params:
            body_params = local_var_params['set_mnemonic_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/set_mnemonic', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_pin_code_post(self, **kwargs):  # noqa: E501
        """set_pin_code_post  # noqa: E501

        Configure a pin code on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_pin_code_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_pin_code_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_pin_code_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_pin_code_post_with_http_info(self, **kwargs):  # noqa: E501
        """set_pin_code_post  # noqa: E501

        Configure a pin code on the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_pin_code_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_pin_code_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/set_pin_code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sign_message_post(self, **kwargs):  # noqa: E501
        """sign_message_post  # noqa: E501

        Sign a message using the secret key at given index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_message_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignMessageRequest sign_message_request: SignMessageRequest is request data for /api/signMessage
        :return: SignMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sign_message_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sign_message_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def sign_message_post_with_http_info(self, **kwargs):  # noqa: E501
        """sign_message_post  # noqa: E501

        Sign a message using the secret key at given index.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sign_message_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SignMessageRequest sign_message_request: SignMessageRequest is request data for /api/signMessage
        :return: SignMessageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['sign_message_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sign_message_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sign_message_request' in local_var_params:
            body_params = local_var_params['sign_message_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sign_message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignMessageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transaction_sign_post(self, **kwargs):  # noqa: E501
        """transaction_sign_post  # noqa: E501

        Sign a transaction with the hardware wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction_sign_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionSignRequest transaction_sign_request: TransactionSignRequest is request data for /api/v1/transactionSign
        :return: TransactionSignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transaction_sign_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.transaction_sign_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def transaction_sign_post_with_http_info(self, **kwargs):  # noqa: E501
        """transaction_sign_post  # noqa: E501

        Sign a transaction with the hardware wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transaction_sign_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransactionSignRequest transaction_sign_request: TransactionSignRequest is request data for /api/v1/transactionSign
        :return: TransactionSignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['transaction_sign_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_sign_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transaction_sign_request' in local_var_params:
            body_params = local_var_params['transaction_sign_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transaction_sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransactionSignResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wipe_delete(self, **kwargs):  # noqa: E501
        """wipe_delete  # noqa: E501

        clean all the configurations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wipe_delete(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wipe_delete_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wipe_delete_with_http_info(**kwargs)  # noqa: E501
            return data

    def wipe_delete_with_http_info(self, **kwargs):  # noqa: E501
        """wipe_delete  # noqa: E501

        clean all the configurations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wipe_delete_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HTTPSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wipe_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['csrfAuth']  # noqa: E501

        return self.api_client.call_api(
            '/wipe', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HTTPSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
