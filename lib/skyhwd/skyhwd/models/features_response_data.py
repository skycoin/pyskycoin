# coding: utf-8

"""
    Hardware Wallet Daemon API

    This is the hardware-wallet-daemon API  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: steve@skycoin.net
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FeaturesResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_id': 'str',
        'passphrase_protection': 'bool',
        'label': 'str',
        'fw_patch': 'int',
        'fw_major': 'int',
        'fw_minor': 'int',
        'minor_version': 'int',
        'pin_protection': 'bool',
        'bootloader_hash': 'str',
        'major_version': 'int',
        'pin_cached': 'bool',
        'vendor': 'str',
        'needs_backup': 'bool',
        'initialized': 'bool',
        'model': 'str',
        'passphrase_cached': 'bool',
        'patch_version': 'int'
    }

    attribute_map = {
        'device_id': 'device_id',
        'passphrase_protection': 'passphrase_protection',
        'label': 'label',
        'fw_patch': 'fw_patch',
        'fw_major': 'fw_major',
        'fw_minor': 'fw_minor',
        'minor_version': 'minor_version',
        'pin_protection': 'pin_protection',
        'bootloader_hash': 'bootloader_hash',
        'major_version': 'major_version',
        'pin_cached': 'pin_cached',
        'vendor': 'vendor',
        'needs_backup': 'needs_backup',
        'initialized': 'initialized',
        'model': 'model',
        'passphrase_cached': 'passphrase_cached',
        'patch_version': 'patch_version'
    }

    def __init__(self, device_id=None, passphrase_protection=None, label=None, fw_patch=None, fw_major=None, fw_minor=None, minor_version=None, pin_protection=None, bootloader_hash=None, major_version=None, pin_cached=None, vendor=None, needs_backup=None, initialized=None, model=None, passphrase_cached=None, patch_version=None):  # noqa: E501
        """FeaturesResponseData - a model defined in OpenAPI"""  # noqa: E501

        self._device_id = None
        self._passphrase_protection = None
        self._label = None
        self._fw_patch = None
        self._fw_major = None
        self._fw_minor = None
        self._minor_version = None
        self._pin_protection = None
        self._bootloader_hash = None
        self._major_version = None
        self._pin_cached = None
        self._vendor = None
        self._needs_backup = None
        self._initialized = None
        self._model = None
        self._passphrase_cached = None
        self._patch_version = None
        self.discriminator = None

        if device_id is not None:
            self.device_id = device_id
        self.passphrase_protection = passphrase_protection
        if label is not None:
            self.label = label
        self.fw_patch = fw_patch
        self.fw_major = fw_major
        self.fw_minor = fw_minor
        if minor_version is not None:
            self.minor_version = minor_version
        self.pin_protection = pin_protection
        if bootloader_hash is not None:
            self.bootloader_hash = bootloader_hash
        if major_version is not None:
            self.major_version = major_version
        self.pin_cached = pin_cached
        self.vendor = vendor
        self.needs_backup = needs_backup
        self.initialized = initialized
        if model is not None:
            self.model = model
        self.passphrase_cached = passphrase_cached
        if patch_version is not None:
            self.patch_version = patch_version

    @property
    def device_id(self):
        """Gets the device_id of this FeaturesResponseData.  # noqa: E501


        :return: The device_id of this FeaturesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this FeaturesResponseData.


        :param device_id: The device_id of this FeaturesResponseData.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def passphrase_protection(self):
        """Gets the passphrase_protection of this FeaturesResponseData.  # noqa: E501


        :return: The passphrase_protection of this FeaturesResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._passphrase_protection

    @passphrase_protection.setter
    def passphrase_protection(self, passphrase_protection):
        """Sets the passphrase_protection of this FeaturesResponseData.


        :param passphrase_protection: The passphrase_protection of this FeaturesResponseData.  # noqa: E501
        :type: bool
        """
        if passphrase_protection is None:
            raise ValueError("Invalid value for `passphrase_protection`, must not be `None`")  # noqa: E501

        self._passphrase_protection = passphrase_protection

    @property
    def label(self):
        """Gets the label of this FeaturesResponseData.  # noqa: E501


        :return: The label of this FeaturesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FeaturesResponseData.


        :param label: The label of this FeaturesResponseData.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def fw_patch(self):
        """Gets the fw_patch of this FeaturesResponseData.  # noqa: E501


        :return: The fw_patch of this FeaturesResponseData.  # noqa: E501
        :rtype: int
        """
        return self._fw_patch

    @fw_patch.setter
    def fw_patch(self, fw_patch):
        """Sets the fw_patch of this FeaturesResponseData.


        :param fw_patch: The fw_patch of this FeaturesResponseData.  # noqa: E501
        :type: int
        """
        if fw_patch is None:
            raise ValueError("Invalid value for `fw_patch`, must not be `None`")  # noqa: E501

        self._fw_patch = fw_patch

    @property
    def fw_major(self):
        """Gets the fw_major of this FeaturesResponseData.  # noqa: E501


        :return: The fw_major of this FeaturesResponseData.  # noqa: E501
        :rtype: int
        """
        return self._fw_major

    @fw_major.setter
    def fw_major(self, fw_major):
        """Sets the fw_major of this FeaturesResponseData.


        :param fw_major: The fw_major of this FeaturesResponseData.  # noqa: E501
        :type: int
        """
        if fw_major is None:
            raise ValueError("Invalid value for `fw_major`, must not be `None`")  # noqa: E501

        self._fw_major = fw_major

    @property
    def fw_minor(self):
        """Gets the fw_minor of this FeaturesResponseData.  # noqa: E501


        :return: The fw_minor of this FeaturesResponseData.  # noqa: E501
        :rtype: int
        """
        return self._fw_minor

    @fw_minor.setter
    def fw_minor(self, fw_minor):
        """Sets the fw_minor of this FeaturesResponseData.


        :param fw_minor: The fw_minor of this FeaturesResponseData.  # noqa: E501
        :type: int
        """
        if fw_minor is None:
            raise ValueError("Invalid value for `fw_minor`, must not be `None`")  # noqa: E501

        self._fw_minor = fw_minor

    @property
    def minor_version(self):
        """Gets the minor_version of this FeaturesResponseData.  # noqa: E501


        :return: The minor_version of this FeaturesResponseData.  # noqa: E501
        :rtype: int
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this FeaturesResponseData.


        :param minor_version: The minor_version of this FeaturesResponseData.  # noqa: E501
        :type: int
        """

        self._minor_version = minor_version

    @property
    def pin_protection(self):
        """Gets the pin_protection of this FeaturesResponseData.  # noqa: E501


        :return: The pin_protection of this FeaturesResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._pin_protection

    @pin_protection.setter
    def pin_protection(self, pin_protection):
        """Sets the pin_protection of this FeaturesResponseData.


        :param pin_protection: The pin_protection of this FeaturesResponseData.  # noqa: E501
        :type: bool
        """
        if pin_protection is None:
            raise ValueError("Invalid value for `pin_protection`, must not be `None`")  # noqa: E501

        self._pin_protection = pin_protection

    @property
    def bootloader_hash(self):
        """Gets the bootloader_hash of this FeaturesResponseData.  # noqa: E501


        :return: The bootloader_hash of this FeaturesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._bootloader_hash

    @bootloader_hash.setter
    def bootloader_hash(self, bootloader_hash):
        """Sets the bootloader_hash of this FeaturesResponseData.


        :param bootloader_hash: The bootloader_hash of this FeaturesResponseData.  # noqa: E501
        :type: str
        """

        self._bootloader_hash = bootloader_hash

    @property
    def major_version(self):
        """Gets the major_version of this FeaturesResponseData.  # noqa: E501


        :return: The major_version of this FeaturesResponseData.  # noqa: E501
        :rtype: int
        """
        return self._major_version

    @major_version.setter
    def major_version(self, major_version):
        """Sets the major_version of this FeaturesResponseData.


        :param major_version: The major_version of this FeaturesResponseData.  # noqa: E501
        :type: int
        """

        self._major_version = major_version

    @property
    def pin_cached(self):
        """Gets the pin_cached of this FeaturesResponseData.  # noqa: E501


        :return: The pin_cached of this FeaturesResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._pin_cached

    @pin_cached.setter
    def pin_cached(self, pin_cached):
        """Sets the pin_cached of this FeaturesResponseData.


        :param pin_cached: The pin_cached of this FeaturesResponseData.  # noqa: E501
        :type: bool
        """
        if pin_cached is None:
            raise ValueError("Invalid value for `pin_cached`, must not be `None`")  # noqa: E501

        self._pin_cached = pin_cached

    @property
    def vendor(self):
        """Gets the vendor of this FeaturesResponseData.  # noqa: E501


        :return: The vendor of this FeaturesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this FeaturesResponseData.


        :param vendor: The vendor of this FeaturesResponseData.  # noqa: E501
        :type: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    @property
    def needs_backup(self):
        """Gets the needs_backup of this FeaturesResponseData.  # noqa: E501


        :return: The needs_backup of this FeaturesResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._needs_backup

    @needs_backup.setter
    def needs_backup(self, needs_backup):
        """Sets the needs_backup of this FeaturesResponseData.


        :param needs_backup: The needs_backup of this FeaturesResponseData.  # noqa: E501
        :type: bool
        """
        if needs_backup is None:
            raise ValueError("Invalid value for `needs_backup`, must not be `None`")  # noqa: E501

        self._needs_backup = needs_backup

    @property
    def initialized(self):
        """Gets the initialized of this FeaturesResponseData.  # noqa: E501


        :return: The initialized of this FeaturesResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._initialized

    @initialized.setter
    def initialized(self, initialized):
        """Sets the initialized of this FeaturesResponseData.


        :param initialized: The initialized of this FeaturesResponseData.  # noqa: E501
        :type: bool
        """
        if initialized is None:
            raise ValueError("Invalid value for `initialized`, must not be `None`")  # noqa: E501

        self._initialized = initialized

    @property
    def model(self):
        """Gets the model of this FeaturesResponseData.  # noqa: E501


        :return: The model of this FeaturesResponseData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this FeaturesResponseData.


        :param model: The model of this FeaturesResponseData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def passphrase_cached(self):
        """Gets the passphrase_cached of this FeaturesResponseData.  # noqa: E501


        :return: The passphrase_cached of this FeaturesResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._passphrase_cached

    @passphrase_cached.setter
    def passphrase_cached(self, passphrase_cached):
        """Sets the passphrase_cached of this FeaturesResponseData.


        :param passphrase_cached: The passphrase_cached of this FeaturesResponseData.  # noqa: E501
        :type: bool
        """
        if passphrase_cached is None:
            raise ValueError("Invalid value for `passphrase_cached`, must not be `None`")  # noqa: E501

        self._passphrase_cached = passphrase_cached

    @property
    def patch_version(self):
        """Gets the patch_version of this FeaturesResponseData.  # noqa: E501


        :return: The patch_version of this FeaturesResponseData.  # noqa: E501
        :rtype: int
        """
        return self._patch_version

    @patch_version.setter
    def patch_version(self, patch_version):
        """Sets the patch_version of this FeaturesResponseData.


        :param patch_version: The patch_version of this FeaturesResponseData.  # noqa: E501
        :type: int
        """

        self._patch_version = patch_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeaturesResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
