# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_skycoin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_skycoin')
    _skycoin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_skycoin', [dirname(__file__)])
        except ImportError:
            import _skycoin
            return _skycoin
        try:
            _mod = imp.load_module('_skycoin', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _skycoin = swig_import_helper()
    del swig_import_helper
else:
    import _skycoin
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class GoString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoString, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _skycoin.GoString_p_set
    __swig_getmethods__["p"] = _skycoin.GoString_p_get
    if _newclass:
        p = _swig_property(_skycoin.GoString_p_get, _skycoin.GoString_p_set)
    __swig_setmethods__["n"] = _skycoin.GoString_n_set
    __swig_getmethods__["n"] = _skycoin.GoString_n_get
    if _newclass:
        n = _swig_property(_skycoin.GoString_n_get, _skycoin.GoString_n_set)

    def __init__(self):
        this = _skycoin.new_GoString()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_GoString
    __del__ = lambda self: None
GoString_swigregister = _skycoin.GoString_swigregister
GoString_swigregister(GoString)

class GoString_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoString_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoString_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _skycoin.GoString__p_set
    __swig_getmethods__["p"] = _skycoin.GoString__p_get
    if _newclass:
        p = _swig_property(_skycoin.GoString__p_get, _skycoin.GoString__p_set)
    __swig_setmethods__["n"] = _skycoin.GoString__n_set
    __swig_getmethods__["n"] = _skycoin.GoString__n_get
    if _newclass:
        n = _swig_property(_skycoin.GoString__n_get, _skycoin.GoString__n_set)

    def __init__(self):
        this = _skycoin.new_GoString_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_GoString_
    __del__ = lambda self: None
GoString__swigregister = _skycoin.GoString__swigregister
GoString__swigregister(GoString_)

class cipher_PubKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_PubKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_PubKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_PubKey_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_PubKey_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_PubKey_data_get, _skycoin.cipher_PubKey_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_PubKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_PubKey
    __del__ = lambda self: None
cipher_PubKey_swigregister = _skycoin.cipher_PubKey_swigregister
cipher_PubKey_swigregister(cipher_PubKey)

class cipher_SecKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SecKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SecKey, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_SecKey_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_SecKey_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_SecKey_data_get, _skycoin.cipher_SecKey_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_SecKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_SecKey
    __del__ = lambda self: None
cipher_SecKey_swigregister = _skycoin.cipher_SecKey_swigregister
cipher_SecKey_swigregister(cipher_SecKey)

class cipher_Ripemd160(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Ripemd160, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Ripemd160, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_Ripemd160_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_Ripemd160_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_Ripemd160_data_get, _skycoin.cipher_Ripemd160_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_Ripemd160()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_Ripemd160
    __del__ = lambda self: None
cipher_Ripemd160_swigregister = _skycoin.cipher_Ripemd160_swigregister
cipher_Ripemd160_swigregister(cipher_Ripemd160)

class cipher_Sig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Sig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Sig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_Sig_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_Sig_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_Sig_data_get, _skycoin.cipher_Sig_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_Sig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_Sig
    __del__ = lambda self: None
cipher_Sig_swigregister = _skycoin.cipher_Sig_swigregister
cipher_Sig_swigregister(cipher_Sig)

class cipher_SHA256(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SHA256, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SHA256, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_SHA256_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_SHA256_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_SHA256_data_get, _skycoin.cipher_SHA256_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_SHA256()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_SHA256
    __del__ = lambda self: None
cipher_SHA256_swigregister = _skycoin.cipher_SHA256_swigregister
cipher_SHA256_swigregister(cipher_SHA256)

class cipher_Checksum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Checksum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Checksum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_Checksum_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_Checksum_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_Checksum_data_get, _skycoin.cipher_Checksum_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_Checksum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_Checksum
    __del__ = lambda self: None
cipher_Checksum_swigregister = _skycoin.cipher_Checksum_swigregister
cipher_Checksum_swigregister(cipher_Checksum)

class cipher_SecKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SecKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SecKeys, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_SecKeys_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_SecKeys_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_SecKeys_data_get, _skycoin.cipher_SecKeys_data_set)
    __swig_setmethods__["count"] = _skycoin.cipher_SecKeys_count_set
    __swig_getmethods__["count"] = _skycoin.cipher_SecKeys_count_get
    if _newclass:
        count = _swig_property(_skycoin.cipher_SecKeys_count_get, _skycoin.cipher_SecKeys_count_set)

    def getAt(self, i):
        return _skycoin.cipher_SecKeys_getAt(self, i)

    def __init__(self):
        this = _skycoin.new_cipher_SecKeys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_SecKeys
    __del__ = lambda self: None
cipher_SecKeys_swigregister = _skycoin.cipher_SecKeys_swigregister
cipher_SecKeys_swigregister(cipher_SecKeys)

class cipher_PubKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_PubKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_PubKeys, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.cipher_PubKeys_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_PubKeys_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_PubKeys_data_get, _skycoin.cipher_PubKeys_data_set)
    __swig_setmethods__["count"] = _skycoin.cipher_PubKeys_count_set
    __swig_getmethods__["count"] = _skycoin.cipher_PubKeys_count_get
    if _newclass:
        count = _swig_property(_skycoin.cipher_PubKeys_count_get, _skycoin.cipher_PubKeys_count_set)

    def __init__(self):
        this = _skycoin.new_cipher_PubKeys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_PubKeys
    __del__ = lambda self: None
cipher_PubKeys_swigregister = _skycoin.cipher_PubKeys_swigregister
cipher_PubKeys_swigregister(cipher_PubKeys)

class _GoString_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _GoString_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _GoString_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _skycoin._GoString__p_set
    __swig_getmethods__["p"] = _skycoin._GoString__p_get
    if _newclass:
        p = _swig_property(_skycoin._GoString__p_get, _skycoin._GoString__p_set)
    __swig_setmethods__["n"] = _skycoin._GoString__n_set
    __swig_getmethods__["n"] = _skycoin._GoString__n_get
    if _newclass:
        n = _swig_property(_skycoin._GoString__n_get, _skycoin._GoString__n_set)

    def __init__(self):
        this = _skycoin.new__GoString_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete__GoString_
    __del__ = lambda self: None
_GoString__swigregister = _skycoin._GoString__swigregister
_GoString__swigregister(_GoString_)

class GoInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _skycoin.GoInterface_t_set
    __swig_getmethods__["t"] = _skycoin.GoInterface_t_get
    if _newclass:
        t = _swig_property(_skycoin.GoInterface_t_get, _skycoin.GoInterface_t_set)
    __swig_setmethods__["v"] = _skycoin.GoInterface_v_set
    __swig_getmethods__["v"] = _skycoin.GoInterface_v_get
    if _newclass:
        v = _swig_property(_skycoin.GoInterface_v_get, _skycoin.GoInterface_v_set)

    def __init__(self):
        this = _skycoin.new_GoInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_GoInterface
    __del__ = lambda self: None
GoInterface_swigregister = _skycoin.GoInterface_swigregister
GoInterface_swigregister(GoInterface)

class GoSlice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoSlice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.GoSlice_data_set
    __swig_getmethods__["data"] = _skycoin.GoSlice_data_get
    if _newclass:
        data = _swig_property(_skycoin.GoSlice_data_get, _skycoin.GoSlice_data_set)
    __swig_setmethods__["len"] = _skycoin.GoSlice_len_set
    __swig_getmethods__["len"] = _skycoin.GoSlice_len_get
    if _newclass:
        len = _swig_property(_skycoin.GoSlice_len_get, _skycoin.GoSlice_len_set)
    __swig_setmethods__["cap"] = _skycoin.GoSlice_cap_set
    __swig_getmethods__["cap"] = _skycoin.GoSlice_cap_get
    if _newclass:
        cap = _swig_property(_skycoin.GoSlice_cap_get, _skycoin.GoSlice_cap_set)

    def __init__(self):
        this = _skycoin.new_GoSlice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_GoSlice
    __del__ = lambda self: None
GoSlice_swigregister = _skycoin.GoSlice_swigregister
GoSlice_swigregister(GoSlice)


def SKY_base58_String2Hex(p0):
    return _skycoin.SKY_base58_String2Hex(p0)
SKY_base58_String2Hex = _skycoin.SKY_base58_String2Hex

def SKY_base58_Base58_ToInt(p0):
    return _skycoin.SKY_base58_Base58_ToInt(p0)
SKY_base58_Base58_ToInt = _skycoin.SKY_base58_Base58_ToInt

def SKY_base58_Base58_ToHex(p0):
    return _skycoin.SKY_base58_Base58_ToHex(p0)
SKY_base58_Base58_ToHex = _skycoin.SKY_base58_Base58_ToHex

def SKY_base58_Base58_Base582Int(p0):
    return _skycoin.SKY_base58_Base58_Base582Int(p0)
SKY_base58_Base58_Base582Int = _skycoin.SKY_base58_Base58_Base582Int

def SKY_base58_Base582Hex(p0):
    return _skycoin.SKY_base58_Base582Hex(p0)
SKY_base58_Base582Hex = _skycoin.SKY_base58_Base582Hex

def SKY_base58_Base58_BitHex(p0):
    return _skycoin.SKY_base58_Base58_BitHex(p0)
SKY_base58_Base58_BitHex = _skycoin.SKY_base58_Base58_BitHex

def SKY_base58_Int2Base58(p0):
    return _skycoin.SKY_base58_Int2Base58(p0)
SKY_base58_Int2Base58 = _skycoin.SKY_base58_Int2Base58

def SKY_base58_Hex2Base58(p0):
    return _skycoin.SKY_base58_Hex2Base58(p0)
SKY_base58_Hex2Base58 = _skycoin.SKY_base58_Hex2Base58

def SKY_base58_Hex2Base58String(p0):
    return _skycoin.SKY_base58_Hex2Base58String(p0)
SKY_base58_Hex2Base58String = _skycoin.SKY_base58_Hex2Base58String

def SKY_base58_Hex2Base58Str(p0):
    return _skycoin.SKY_base58_Hex2Base58Str(p0)
SKY_base58_Hex2Base58Str = _skycoin.SKY_base58_Hex2Base58Str

def SKY_wallet_NewReadableEntry(p0):
    return _skycoin.SKY_wallet_NewReadableEntry(p0)
SKY_wallet_NewReadableEntry = _skycoin.SKY_wallet_NewReadableEntry

def SKY_wallet_LoadReadableEntry(p0):
    return _skycoin.SKY_wallet_LoadReadableEntry(p0)
SKY_wallet_LoadReadableEntry = _skycoin.SKY_wallet_LoadReadableEntry

def SKY_wallet_NewReadableEntryFromPubkey(p0):
    return _skycoin.SKY_wallet_NewReadableEntryFromPubkey(p0)
SKY_wallet_NewReadableEntryFromPubkey = _skycoin.SKY_wallet_NewReadableEntryFromPubkey

def SKY_wallet_ReadableEntry_Save(p0, p1):
    return _skycoin.SKY_wallet_ReadableEntry_Save(p0, p1)
SKY_wallet_ReadableEntry_Save = _skycoin.SKY_wallet_ReadableEntry_Save

def SKY_wallet_LoadReadableWallet(p0):
    return _skycoin.SKY_wallet_LoadReadableWallet(p0)
SKY_wallet_LoadReadableWallet = _skycoin.SKY_wallet_LoadReadableWallet

def SKY_wallet_ReadableWallet_Save(p0, p1):
    return _skycoin.SKY_wallet_ReadableWallet_Save(p0, p1)
SKY_wallet_ReadableWallet_Save = _skycoin.SKY_wallet_ReadableWallet_Save

def SKY_wallet_ReadableWallet_Load(p0, p1):
    return _skycoin.SKY_wallet_ReadableWallet_Load(p0, p1)
SKY_wallet_ReadableWallet_Load = _skycoin.SKY_wallet_ReadableWallet_Load

def SKY_wallet_ReadableWallet_Erase(p0):
    return _skycoin.SKY_wallet_ReadableWallet_Erase(p0)
SKY_wallet_ReadableWallet_Erase = _skycoin.SKY_wallet_ReadableWallet_Erase

def SKY_cli_GetWalletOutputsFromFile(p0, p1, p2):
    return _skycoin.SKY_cli_GetWalletOutputsFromFile(p0, p1, p2)
SKY_cli_GetWalletOutputsFromFile = _skycoin.SKY_cli_GetWalletOutputsFromFile

def SKY_cli_GetWalletOutputs(p0, p2):
    return _skycoin.SKY_cli_GetWalletOutputs(p0, p2)
SKY_cli_GetWalletOutputs = _skycoin.SKY_cli_GetWalletOutputs

def SKY_secp256k1go_Field_String(p0):
    return _skycoin.SKY_secp256k1go_Field_String(p0)
SKY_secp256k1go_Field_String = _skycoin.SKY_secp256k1go_Field_String

def SKY_secp256k1go_Field_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Print(p0, p1)
SKY_secp256k1go_Field_Print = _skycoin.SKY_secp256k1go_Field_Print

def SKY_secp256k1go_Field_SetB32(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetB32(p0, p1)
SKY_secp256k1go_Field_SetB32 = _skycoin.SKY_secp256k1go_Field_SetB32

def SKY_secp256k1go_Field_SetBytes(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetBytes(p0, p1)
SKY_secp256k1go_Field_SetBytes = _skycoin.SKY_secp256k1go_Field_SetBytes

def SKY_secp256k1go_Field_SetHex(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetHex(p0, p1)
SKY_secp256k1go_Field_SetHex = _skycoin.SKY_secp256k1go_Field_SetHex

def SKY_secp256k1go_Field_IsOdd(p0):
    return _skycoin.SKY_secp256k1go_Field_IsOdd(p0)
SKY_secp256k1go_Field_IsOdd = _skycoin.SKY_secp256k1go_Field_IsOdd

def SKY_secp256k1go_Field_IsZero(p0):
    return _skycoin.SKY_secp256k1go_Field_IsZero(p0)
SKY_secp256k1go_Field_IsZero = _skycoin.SKY_secp256k1go_Field_IsZero

def SKY_secp256k1go_Field_SetInt(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetInt(p0, p1)
SKY_secp256k1go_Field_SetInt = _skycoin.SKY_secp256k1go_Field_SetInt

def SKY_secp256k1go_Field_Normalize(p0):
    return _skycoin.SKY_secp256k1go_Field_Normalize(p0)
SKY_secp256k1go_Field_Normalize = _skycoin.SKY_secp256k1go_Field_Normalize

def SKY_secp256k1go_Field_GetB32(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_GetB32(p0, p1)
SKY_secp256k1go_Field_GetB32 = _skycoin.SKY_secp256k1go_Field_GetB32

def SKY_secp256k1go_Field_Equals(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Equals(p0, p1)
SKY_secp256k1go_Field_Equals = _skycoin.SKY_secp256k1go_Field_Equals

def SKY_secp256k1go_Field_SetAdd(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetAdd(p0, p1)
SKY_secp256k1go_Field_SetAdd = _skycoin.SKY_secp256k1go_Field_SetAdd

def SKY_secp256k1go_Field_MulInt(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_MulInt(p0, p1)
SKY_secp256k1go_Field_MulInt = _skycoin.SKY_secp256k1go_Field_MulInt

def SKY_secp256k1go_Field_Negate(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_Field_Negate(p0, p1, p2)
SKY_secp256k1go_Field_Negate = _skycoin.SKY_secp256k1go_Field_Negate

def SKY_secp256k1go_Field_Inv(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Inv(p0, p1)
SKY_secp256k1go_Field_Inv = _skycoin.SKY_secp256k1go_Field_Inv

def SKY_secp256k1go_Field_Sqrt(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Sqrt(p0, p1)
SKY_secp256k1go_Field_Sqrt = _skycoin.SKY_secp256k1go_Field_Sqrt

def SKY_secp256k1go_Field_InvVar(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_InvVar(p0, p1)
SKY_secp256k1go_Field_InvVar = _skycoin.SKY_secp256k1go_Field_InvVar

def SKY_secp256k1go_Field_Mul(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_Field_Mul(p0, p1, p2)
SKY_secp256k1go_Field_Mul = _skycoin.SKY_secp256k1go_Field_Mul

def SKY_secp256k1go_Field_Sqr(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Sqr(p0, p1)
SKY_secp256k1go_Field_Sqr = _skycoin.SKY_secp256k1go_Field_Sqr

def SKY_api_NewWalletResponse(p0):
    return _skycoin.SKY_api_NewWalletResponse(p0)
SKY_api_NewWalletResponse = _skycoin.SKY_api_NewWalletResponse

def SKY_cipher_PubKeySlice_Len(*args):
    return _skycoin.SKY_cipher_PubKeySlice_Len(*args)
SKY_cipher_PubKeySlice_Len = _skycoin.SKY_cipher_PubKeySlice_Len

def SKY_cipher_PubKeySlice_Less(*args):
    return _skycoin.SKY_cipher_PubKeySlice_Less(*args)
SKY_cipher_PubKeySlice_Less = _skycoin.SKY_cipher_PubKeySlice_Less

def SKY_cipher_PubKeySlice_Swap(*args):
    return _skycoin.SKY_cipher_PubKeySlice_Swap(*args)
SKY_cipher_PubKeySlice_Swap = _skycoin.SKY_cipher_PubKeySlice_Swap

def SKY_cipher_RandByte(p0):
    return _skycoin.SKY_cipher_RandByte(p0)
SKY_cipher_RandByte = _skycoin.SKY_cipher_RandByte

def SKY_cipher_NewPubKey(p0, p1):
    return _skycoin.SKY_cipher_NewPubKey(p0, p1)
SKY_cipher_NewPubKey = _skycoin.SKY_cipher_NewPubKey

def SKY_cipher_MustPubKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_MustPubKeyFromHex(p0, p1)
SKY_cipher_MustPubKeyFromHex = _skycoin.SKY_cipher_MustPubKeyFromHex

def SKY_cipher_PubKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_PubKeyFromHex(p0, p1)
SKY_cipher_PubKeyFromHex = _skycoin.SKY_cipher_PubKeyFromHex

def SKY_cipher_PubKeyFromSecKey(p0, p1):
    return _skycoin.SKY_cipher_PubKeyFromSecKey(p0, p1)
SKY_cipher_PubKeyFromSecKey = _skycoin.SKY_cipher_PubKeyFromSecKey

def SKY_cipher_PubKeyFromSig(p0, p1, p2):
    return _skycoin.SKY_cipher_PubKeyFromSig(p0, p1, p2)
SKY_cipher_PubKeyFromSig = _skycoin.SKY_cipher_PubKeyFromSig

def SKY_cipher_PubKey_Verify(p0):
    return _skycoin.SKY_cipher_PubKey_Verify(p0)
SKY_cipher_PubKey_Verify = _skycoin.SKY_cipher_PubKey_Verify

def SKY_cipher_PubKey_Hex(p0):
    return _skycoin.SKY_cipher_PubKey_Hex(p0)
SKY_cipher_PubKey_Hex = _skycoin.SKY_cipher_PubKey_Hex

def SKY_cipher_PubKey_ToAddressHash(p0, p1):
    return _skycoin.SKY_cipher_PubKey_ToAddressHash(p0, p1)
SKY_cipher_PubKey_ToAddressHash = _skycoin.SKY_cipher_PubKey_ToAddressHash

def SKY_cipher_NewSecKey(p0, p1):
    return _skycoin.SKY_cipher_NewSecKey(p0, p1)
SKY_cipher_NewSecKey = _skycoin.SKY_cipher_NewSecKey

def SKY_cipher_MustSecKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_MustSecKeyFromHex(p0, p1)
SKY_cipher_MustSecKeyFromHex = _skycoin.SKY_cipher_MustSecKeyFromHex

def SKY_cipher_SecKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_SecKeyFromHex(p0, p1)
SKY_cipher_SecKeyFromHex = _skycoin.SKY_cipher_SecKeyFromHex

def SKY_cipher_SecKey_Verify(p0):
    return _skycoin.SKY_cipher_SecKey_Verify(p0)
SKY_cipher_SecKey_Verify = _skycoin.SKY_cipher_SecKey_Verify

def SKY_cipher_SecKey_Hex(p0):
    return _skycoin.SKY_cipher_SecKey_Hex(p0)
SKY_cipher_SecKey_Hex = _skycoin.SKY_cipher_SecKey_Hex

def SKY_cipher_ECDH(p0, p1):
    return _skycoin.SKY_cipher_ECDH(p0, p1)
SKY_cipher_ECDH = _skycoin.SKY_cipher_ECDH

def SKY_cipher_NewSig(p0, p1):
    return _skycoin.SKY_cipher_NewSig(p0, p1)
SKY_cipher_NewSig = _skycoin.SKY_cipher_NewSig

def SKY_cipher_MustSigFromHex(p0, p1):
    return _skycoin.SKY_cipher_MustSigFromHex(p0, p1)
SKY_cipher_MustSigFromHex = _skycoin.SKY_cipher_MustSigFromHex

def SKY_cipher_SigFromHex(p0, p1):
    return _skycoin.SKY_cipher_SigFromHex(p0, p1)
SKY_cipher_SigFromHex = _skycoin.SKY_cipher_SigFromHex

def SKY_cipher_Sig_Hex(p0):
    return _skycoin.SKY_cipher_Sig_Hex(p0)
SKY_cipher_Sig_Hex = _skycoin.SKY_cipher_Sig_Hex

def SKY_cipher_SignHash(p0, p1, p2):
    return _skycoin.SKY_cipher_SignHash(p0, p1, p2)
SKY_cipher_SignHash = _skycoin.SKY_cipher_SignHash

def SKY_cipher_ChkSig(p0, p1, p2):
    return _skycoin.SKY_cipher_ChkSig(p0, p1, p2)
SKY_cipher_ChkSig = _skycoin.SKY_cipher_ChkSig

def SKY_cipher_VerifySignedHash(p0, p1):
    return _skycoin.SKY_cipher_VerifySignedHash(p0, p1)
SKY_cipher_VerifySignedHash = _skycoin.SKY_cipher_VerifySignedHash

def SKY_cipher_VerifySignature(p0, p1, p2):
    return _skycoin.SKY_cipher_VerifySignature(p0, p1, p2)
SKY_cipher_VerifySignature = _skycoin.SKY_cipher_VerifySignature

def SKY_cipher_GenerateKeyPair(p0, p1):
    return _skycoin.SKY_cipher_GenerateKeyPair(p0, p1)
SKY_cipher_GenerateKeyPair = _skycoin.SKY_cipher_GenerateKeyPair

def SKY_cipher_GenerateDeterministicKeyPair(p0, p1, p2):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPair(p0, p1, p2)
SKY_cipher_GenerateDeterministicKeyPair = _skycoin.SKY_cipher_GenerateDeterministicKeyPair

def SKY_cipher_DeterministicKeyPairIterator(p0, p2, p3):
    return _skycoin.SKY_cipher_DeterministicKeyPairIterator(p0, p2, p3)
SKY_cipher_DeterministicKeyPairIterator = _skycoin.SKY_cipher_DeterministicKeyPairIterator

def SKY_cipher_GenerateDeterministicKeyPairs(*args):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPairs(*args)
SKY_cipher_GenerateDeterministicKeyPairs = _skycoin.SKY_cipher_GenerateDeterministicKeyPairs

def SKY_cipher_GenerateDeterministicKeyPairsSeed(*args):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPairsSeed(*args)
SKY_cipher_GenerateDeterministicKeyPairsSeed = _skycoin.SKY_cipher_GenerateDeterministicKeyPairsSeed

def SKY_cipher_TestSecKey(p0):
    return _skycoin.SKY_cipher_TestSecKey(p0)
SKY_cipher_TestSecKey = _skycoin.SKY_cipher_TestSecKey

def SKY_cipher_TestSecKeyHash(p0, p1):
    return _skycoin.SKY_cipher_TestSecKeyHash(p0, p1)
SKY_cipher_TestSecKeyHash = _skycoin.SKY_cipher_TestSecKeyHash

def SKY_secp256k1go_DecompressPoint(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_DecompressPoint(p0, p1, p2)
SKY_secp256k1go_DecompressPoint = _skycoin.SKY_secp256k1go_DecompressPoint

def SKY_secp256k1go_RecoverPublicKey(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_RecoverPublicKey(p0, p1, p2)
SKY_secp256k1go_RecoverPublicKey = _skycoin.SKY_secp256k1go_RecoverPublicKey

def SKY_secp256k1go_Multiply(p0, p1):
    return _skycoin.SKY_secp256k1go_Multiply(p0, p1)
SKY_secp256k1go_Multiply = _skycoin.SKY_secp256k1go_Multiply

def SKY_secp256k1go_BaseMultiply(p0):
    return _skycoin.SKY_secp256k1go_BaseMultiply(p0)
SKY_secp256k1go_BaseMultiply = _skycoin.SKY_secp256k1go_BaseMultiply

def SKY_secp256k1go_BaseMultiplyAdd(p0, p1):
    return _skycoin.SKY_secp256k1go_BaseMultiplyAdd(p0, p1)
SKY_secp256k1go_BaseMultiplyAdd = _skycoin.SKY_secp256k1go_BaseMultiplyAdd

def SKY_secp256k1go_GeneratePublicKey(p0):
    return _skycoin.SKY_secp256k1go_GeneratePublicKey(p0)
SKY_secp256k1go_GeneratePublicKey = _skycoin.SKY_secp256k1go_GeneratePublicKey

def SKY_secp256k1go_SeckeyIsValid(p0):
    return _skycoin.SKY_secp256k1go_SeckeyIsValid(p0)
SKY_secp256k1go_SeckeyIsValid = _skycoin.SKY_secp256k1go_SeckeyIsValid

def SKY_secp256k1go_PubkeyIsValid(p0):
    return _skycoin.SKY_secp256k1go_PubkeyIsValid(p0)
SKY_secp256k1go_PubkeyIsValid = _skycoin.SKY_secp256k1go_PubkeyIsValid

def SKY_file_InitDataDir(p0):
    return _skycoin.SKY_file_InitDataDir(p0)
SKY_file_InitDataDir = _skycoin.SKY_file_InitDataDir

def SKY_file_UserHome():
    return _skycoin.SKY_file_UserHome()
SKY_file_UserHome = _skycoin.SKY_file_UserHome

def SKY_file_ResolveResourceDirectory(p0):
    return _skycoin.SKY_file_ResolveResourceDirectory(p0)
SKY_file_ResolveResourceDirectory = _skycoin.SKY_file_ResolveResourceDirectory

def SKY_file_DetermineResourcePath(p0, p1, p2):
    return _skycoin.SKY_file_DetermineResourcePath(p0, p1, p2)
SKY_file_DetermineResourcePath = _skycoin.SKY_file_DetermineResourcePath

def SKY_secp256k1_SumSHA256(p0):
    return _skycoin.SKY_secp256k1_SumSHA256(p0)
SKY_secp256k1_SumSHA256 = _skycoin.SKY_secp256k1_SumSHA256

def SKY_secp256k1_RandByte(p0):
    return _skycoin.SKY_secp256k1_RandByte(p0)
SKY_secp256k1_RandByte = _skycoin.SKY_secp256k1_RandByte

def SKY_api_NewCreateTransactionResponse(p0, p1):
    return _skycoin.SKY_api_NewCreateTransactionResponse(p0, p1)
SKY_api_NewCreateTransactionResponse = _skycoin.SKY_api_NewCreateTransactionResponse

def SKY_api_NewCreatedTransaction(p0, p1):
    return _skycoin.SKY_api_NewCreatedTransaction(p0, p1)
SKY_api_NewCreatedTransaction = _skycoin.SKY_api_NewCreatedTransaction

def SKY_api_CreatedTransaction_ToTransaction(p0):
    return _skycoin.SKY_api_CreatedTransaction_ToTransaction(p0)
SKY_api_CreatedTransaction_ToTransaction = _skycoin.SKY_api_CreatedTransaction_ToTransaction

def SKY_api_NewCreatedTransactionOutput(p0, p1, p2):
    return _skycoin.SKY_api_NewCreatedTransactionOutput(p0, p1, p2)
SKY_api_NewCreatedTransactionOutput = _skycoin.SKY_api_NewCreatedTransactionOutput

def SKY_api_NewCreatedTransactionInput(p0):
    return _skycoin.SKY_api_NewCreatedTransactionInput(p0)
SKY_api_NewCreatedTransactionInput = _skycoin.SKY_api_NewCreatedTransactionInput

def SKY_browser_Open(p0):
    return _skycoin.SKY_browser_Open(p0)
SKY_browser_Open = _skycoin.SKY_browser_Open

def SKY_cipher_DecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_DecodeBase58Address(p0, p1)
SKY_cipher_DecodeBase58Address = _skycoin.SKY_cipher_DecodeBase58Address

def SKY_cipher_MustDecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_MustDecodeBase58Address(p0, p1)
SKY_cipher_MustDecodeBase58Address = _skycoin.SKY_cipher_MustDecodeBase58Address

def SKY_cipher_BitcoinMustDecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_BitcoinMustDecodeBase58Address(p0, p1)
SKY_cipher_BitcoinMustDecodeBase58Address = _skycoin.SKY_cipher_BitcoinMustDecodeBase58Address

def SKY_cipher_AddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_AddressFromBytes(p0, p1)
SKY_cipher_AddressFromBytes = _skycoin.SKY_cipher_AddressFromBytes

def SKY_cipher_AddressFromPubKey(p0, p1):
    return _skycoin.SKY_cipher_AddressFromPubKey(p0, p1)
SKY_cipher_AddressFromPubKey = _skycoin.SKY_cipher_AddressFromPubKey

def SKY_cipher_AddressFromSecKey(p0, p1):
    return _skycoin.SKY_cipher_AddressFromSecKey(p0, p1)
SKY_cipher_AddressFromSecKey = _skycoin.SKY_cipher_AddressFromSecKey

def SKY_cipher_BitcoinDecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_BitcoinDecodeBase58Address(p0, p1)
SKY_cipher_BitcoinDecodeBase58Address = _skycoin.SKY_cipher_BitcoinDecodeBase58Address

def SKY_cipher_MustAddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_MustAddressFromBytes(p0, p1)
SKY_cipher_MustAddressFromBytes = _skycoin.SKY_cipher_MustAddressFromBytes

def SKY_cipher_Address_Bytes(p0):
    return _skycoin.SKY_cipher_Address_Bytes(p0)
SKY_cipher_Address_Bytes = _skycoin.SKY_cipher_Address_Bytes

def SKY_cipher_Address_Null(p0):
    return _skycoin.SKY_cipher_Address_Null(p0)
SKY_cipher_Address_Null = _skycoin.SKY_cipher_Address_Null

def SKY_cipher_Address_BitcoinBytes(p0):
    return _skycoin.SKY_cipher_Address_BitcoinBytes(p0)
SKY_cipher_Address_BitcoinBytes = _skycoin.SKY_cipher_Address_BitcoinBytes

def SKY_cipher_Address_Verify(p0, p1):
    return _skycoin.SKY_cipher_Address_Verify(p0, p1)
SKY_cipher_Address_Verify = _skycoin.SKY_cipher_Address_Verify

def SKY_cipher_Address_String(p0):
    return _skycoin.SKY_cipher_Address_String(p0)
SKY_cipher_Address_String = _skycoin.SKY_cipher_Address_String

def SKY_cipher_Address_BitcoinString(p0):
    return _skycoin.SKY_cipher_Address_BitcoinString(p0)
SKY_cipher_Address_BitcoinString = _skycoin.SKY_cipher_Address_BitcoinString

def SKY_cipher_Address_Checksum(p0, p1):
    return _skycoin.SKY_cipher_Address_Checksum(p0, p1)
SKY_cipher_Address_Checksum = _skycoin.SKY_cipher_Address_Checksum

def SKY_cipher_Address_BitcoinChecksum(p0, p1):
    return _skycoin.SKY_cipher_Address_BitcoinChecksum(p0, p1)
SKY_cipher_Address_BitcoinChecksum = _skycoin.SKY_cipher_Address_BitcoinChecksum

def SKY_cipher_BitcoinAddressFromPubkey(p0):
    return _skycoin.SKY_cipher_BitcoinAddressFromPubkey(p0)
SKY_cipher_BitcoinAddressFromPubkey = _skycoin.SKY_cipher_BitcoinAddressFromPubkey

def SKY_cipher_BitcoinWalletImportFormatFromSeckey(p0):
    return _skycoin.SKY_cipher_BitcoinWalletImportFormatFromSeckey(p0)
SKY_cipher_BitcoinWalletImportFormatFromSeckey = _skycoin.SKY_cipher_BitcoinWalletImportFormatFromSeckey

def SKY_cipher_BitcoinAddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_BitcoinAddressFromBytes(p0, p1)
SKY_cipher_BitcoinAddressFromBytes = _skycoin.SKY_cipher_BitcoinAddressFromBytes

def SKY_cipher_SecKeyFromWalletImportFormat(p0, p1):
    return _skycoin.SKY_cipher_SecKeyFromWalletImportFormat(p0, p1)
SKY_cipher_SecKeyFromWalletImportFormat = _skycoin.SKY_cipher_SecKeyFromWalletImportFormat

def SKY_cipher_MustSecKeyFromWalletImportFormat(p0, p1):
    return _skycoin.SKY_cipher_MustSecKeyFromWalletImportFormat(p0, p1)
SKY_cipher_MustSecKeyFromWalletImportFormat = _skycoin.SKY_cipher_MustSecKeyFromWalletImportFormat

def SKY_webrpc_RPCError_Error(p0):
    return _skycoin.SKY_webrpc_RPCError_Error(p0)
SKY_webrpc_RPCError_Error = _skycoin.SKY_webrpc_RPCError_Error

def SKY_testutil_MakeAddress(p0):
    return _skycoin.SKY_testutil_MakeAddress(p0)
SKY_testutil_MakeAddress = _skycoin.SKY_testutil_MakeAddress

def SKY_cli_CreateRawTxFromWallet(p0, p1, p2, p3, p4):
    return _skycoin.SKY_cli_CreateRawTxFromWallet(p0, p1, p2, p3, p4)
SKY_cli_CreateRawTxFromWallet = _skycoin.SKY_cli_CreateRawTxFromWallet

def SKY_cli_CreateRawTxFromAddress(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_cli_CreateRawTxFromAddress(p0, p1, p2, p3, p4, p5)
SKY_cli_CreateRawTxFromAddress = _skycoin.SKY_cli_CreateRawTxFromAddress

def SKY_cli_CreateRawTx(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_cli_CreateRawTx(p0, p1, p2, p3, p4, p5)
SKY_cli_CreateRawTx = _skycoin.SKY_cli_CreateRawTx

def SKY_cli_NewTransaction(p0, p1, p2):
    return _skycoin.SKY_cli_NewTransaction(p0, p1, p2)
SKY_cli_NewTransaction = _skycoin.SKY_cli_NewTransaction

def SKY_apputil_CatchInterruptPanic():
    return _skycoin.SKY_apputil_CatchInterruptPanic()
SKY_apputil_CatchInterruptPanic = _skycoin.SKY_apputil_CatchInterruptPanic

def SKY_apputil_CatchDebug():
    return _skycoin.SKY_apputil_CatchDebug()
SKY_apputil_CatchDebug = _skycoin.SKY_apputil_CatchDebug

def SKY_apputil_PrintProgramStatus():
    return _skycoin.SKY_apputil_PrintProgramStatus()
SKY_apputil_PrintProgramStatus = _skycoin.SKY_apputil_PrintProgramStatus

def SKY_utc_UnixNow():
    return _skycoin.SKY_utc_UnixNow()
SKY_utc_UnixNow = _skycoin.SKY_utc_UnixNow

def SKY_httphelper_Address_UnmarshalJSON(p0, p1):
    return _skycoin.SKY_httphelper_Address_UnmarshalJSON(p0, p1)
SKY_httphelper_Address_UnmarshalJSON = _skycoin.SKY_httphelper_Address_UnmarshalJSON

def SKY_httphelper_Address_MarshalJSON(p0):
    return _skycoin.SKY_httphelper_Address_MarshalJSON(p0)
SKY_httphelper_Address_MarshalJSON = _skycoin.SKY_httphelper_Address_MarshalJSON

def SKY_httphelper_Coins_UnmarshalJSON(p1):
    return _skycoin.SKY_httphelper_Coins_UnmarshalJSON(p1)
SKY_httphelper_Coins_UnmarshalJSON = _skycoin.SKY_httphelper_Coins_UnmarshalJSON

def SKY_httphelper_Coins_MarshalJSON():
    return _skycoin.SKY_httphelper_Coins_MarshalJSON()
SKY_httphelper_Coins_MarshalJSON = _skycoin.SKY_httphelper_Coins_MarshalJSON

def SKY_httphelper_Coins_Value():
    return _skycoin.SKY_httphelper_Coins_Value()
SKY_httphelper_Coins_Value = _skycoin.SKY_httphelper_Coins_Value

def SKY_httphelper_Hours_UnmarshalJSON(p1):
    return _skycoin.SKY_httphelper_Hours_UnmarshalJSON(p1)
SKY_httphelper_Hours_UnmarshalJSON = _skycoin.SKY_httphelper_Hours_UnmarshalJSON

def SKY_httphelper_Hours_MarshalJSON():
    return _skycoin.SKY_httphelper_Hours_MarshalJSON()
SKY_httphelper_Hours_MarshalJSON = _skycoin.SKY_httphelper_Hours_MarshalJSON

def SKY_httphelper_Hours_Value():
    return _skycoin.SKY_httphelper_Hours_Value()
SKY_httphelper_Hours_Value = _skycoin.SKY_httphelper_Hours_Value

def SKY_cli_CheckWalletBalance(p0, p1, p2):
    return _skycoin.SKY_cli_CheckWalletBalance(p0, p1, p2)
SKY_cli_CheckWalletBalance = _skycoin.SKY_cli_CheckWalletBalance

def SKY_cli_GetBalanceOfAddresses(p0, p1, p2):
    return _skycoin.SKY_cli_GetBalanceOfAddresses(p0, p1, p2)
SKY_cli_GetBalanceOfAddresses = _skycoin.SKY_cli_GetBalanceOfAddresses

def SKY_poly1305_Verify(p1):
    return _skycoin.SKY_poly1305_Verify(p1)
SKY_poly1305_Verify = _skycoin.SKY_poly1305_Verify

def SKY_api_NewClient(p0):
    return _skycoin.SKY_api_NewClient(p0)
SKY_api_NewClient = _skycoin.SKY_api_NewClient

def SKY_api_Client_CSRF(p0):
    return _skycoin.SKY_api_Client_CSRF(p0)
SKY_api_Client_CSRF = _skycoin.SKY_api_Client_CSRF

def SKY_api_Client_Version(p0):
    return _skycoin.SKY_api_Client_Version(p0)
SKY_api_Client_Version = _skycoin.SKY_api_Client_Version

def SKY_api_Client_Outputs(p0):
    return _skycoin.SKY_api_Client_Outputs(p0)
SKY_api_Client_Outputs = _skycoin.SKY_api_Client_Outputs

def SKY_api_Client_OutputsForAddresses(p0, p1):
    return _skycoin.SKY_api_Client_OutputsForAddresses(p0, p1)
SKY_api_Client_OutputsForAddresses = _skycoin.SKY_api_Client_OutputsForAddresses

def SKY_api_Client_OutputsForHashes(p0, p1):
    return _skycoin.SKY_api_Client_OutputsForHashes(p0, p1)
SKY_api_Client_OutputsForHashes = _skycoin.SKY_api_Client_OutputsForHashes

def SKY_api_Client_CoinSupply(p0):
    return _skycoin.SKY_api_Client_CoinSupply(p0)
SKY_api_Client_CoinSupply = _skycoin.SKY_api_Client_CoinSupply

def SKY_api_Client_BlockByHash(p0, p1):
    return _skycoin.SKY_api_Client_BlockByHash(p0, p1)
SKY_api_Client_BlockByHash = _skycoin.SKY_api_Client_BlockByHash

def SKY_api_Client_BlockBySeq(p0, p1):
    return _skycoin.SKY_api_Client_BlockBySeq(p0, p1)
SKY_api_Client_BlockBySeq = _skycoin.SKY_api_Client_BlockBySeq

def SKY_api_Client_Blocks(p0, p1, p2):
    return _skycoin.SKY_api_Client_Blocks(p0, p1, p2)
SKY_api_Client_Blocks = _skycoin.SKY_api_Client_Blocks

def SKY_api_Client_LastBlocks(p0, p1):
    return _skycoin.SKY_api_Client_LastBlocks(p0, p1)
SKY_api_Client_LastBlocks = _skycoin.SKY_api_Client_LastBlocks

def SKY_api_Client_BlockchainMetadata(p0):
    return _skycoin.SKY_api_Client_BlockchainMetadata(p0)
SKY_api_Client_BlockchainMetadata = _skycoin.SKY_api_Client_BlockchainMetadata

def SKY_api_Client_BlockchainProgress(p0):
    return _skycoin.SKY_api_Client_BlockchainProgress(p0)
SKY_api_Client_BlockchainProgress = _skycoin.SKY_api_Client_BlockchainProgress

def SKY_api_Client_Balance(p0, p1, p2):
    return _skycoin.SKY_api_Client_Balance(p0, p1, p2)
SKY_api_Client_Balance = _skycoin.SKY_api_Client_Balance

def SKY_api_Client_UxOut(p0, p1):
    return _skycoin.SKY_api_Client_UxOut(p0, p1)
SKY_api_Client_UxOut = _skycoin.SKY_api_Client_UxOut

def SKY_api_Client_AddressUxOuts(p0, p1):
    return _skycoin.SKY_api_Client_AddressUxOuts(p0, p1)
SKY_api_Client_AddressUxOuts = _skycoin.SKY_api_Client_AddressUxOuts

def SKY_api_Client_Wallet(p0, p1):
    return _skycoin.SKY_api_Client_Wallet(p0, p1)
SKY_api_Client_Wallet = _skycoin.SKY_api_Client_Wallet

def SKY_api_Client_Wallets(p0):
    return _skycoin.SKY_api_Client_Wallets(p0)
SKY_api_Client_Wallets = _skycoin.SKY_api_Client_Wallets

def SKY_api_Client_CreateUnencryptedWallet(p0, p1, p2, p3):
    return _skycoin.SKY_api_Client_CreateUnencryptedWallet(p0, p1, p2, p3)
SKY_api_Client_CreateUnencryptedWallet = _skycoin.SKY_api_Client_CreateUnencryptedWallet

def SKY_api_Client_CreateEncryptedWallet(p0, p1, p2, p3, p4):
    return _skycoin.SKY_api_Client_CreateEncryptedWallet(p0, p1, p2, p3, p4)
SKY_api_Client_CreateEncryptedWallet = _skycoin.SKY_api_Client_CreateEncryptedWallet

def SKY_api_Client_NewWalletAddress(p0, p1, p2, p3):
    return _skycoin.SKY_api_Client_NewWalletAddress(p0, p1, p2, p3)
SKY_api_Client_NewWalletAddress = _skycoin.SKY_api_Client_NewWalletAddress

def SKY_api_Client_WalletBalance(p0, p1, p2):
    return _skycoin.SKY_api_Client_WalletBalance(p0, p1, p2)
SKY_api_Client_WalletBalance = _skycoin.SKY_api_Client_WalletBalance

def SKY_api_Client_Spend(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_api_Client_Spend(p0, p1, p2, p3, p4, p5)
SKY_api_Client_Spend = _skycoin.SKY_api_Client_Spend

def SKY_api_Client_CreateTransaction(p0, p2):
    return _skycoin.SKY_api_Client_CreateTransaction(p0, p2)
SKY_api_Client_CreateTransaction = _skycoin.SKY_api_Client_CreateTransaction

def SKY_api_Client_WalletTransactions(p0, p1):
    return _skycoin.SKY_api_Client_WalletTransactions(p0, p1)
SKY_api_Client_WalletTransactions = _skycoin.SKY_api_Client_WalletTransactions

def SKY_api_Client_UpdateWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_UpdateWallet(p0, p1, p2)
SKY_api_Client_UpdateWallet = _skycoin.SKY_api_Client_UpdateWallet

def SKY_api_Client_WalletFolderName(p0):
    return _skycoin.SKY_api_Client_WalletFolderName(p0)
SKY_api_Client_WalletFolderName = _skycoin.SKY_api_Client_WalletFolderName

def SKY_api_Client_NewSeed(p0, p1):
    return _skycoin.SKY_api_Client_NewSeed(p0, p1)
SKY_api_Client_NewSeed = _skycoin.SKY_api_Client_NewSeed

def SKY_api_Client_GetWalletSeed(p0, p1, p2):
    return _skycoin.SKY_api_Client_GetWalletSeed(p0, p1, p2)
SKY_api_Client_GetWalletSeed = _skycoin.SKY_api_Client_GetWalletSeed

def SKY_api_Client_NetworkConnection(p0, p1):
    return _skycoin.SKY_api_Client_NetworkConnection(p0, p1)
SKY_api_Client_NetworkConnection = _skycoin.SKY_api_Client_NetworkConnection

def SKY_api_Client_NetworkConnections(p0):
    return _skycoin.SKY_api_Client_NetworkConnections(p0)
SKY_api_Client_NetworkConnections = _skycoin.SKY_api_Client_NetworkConnections

def SKY_api_Client_NetworkDefaultConnections(p0):
    return _skycoin.SKY_api_Client_NetworkDefaultConnections(p0)
SKY_api_Client_NetworkDefaultConnections = _skycoin.SKY_api_Client_NetworkDefaultConnections

def SKY_api_Client_NetworkTrustedConnections(p0):
    return _skycoin.SKY_api_Client_NetworkTrustedConnections(p0)
SKY_api_Client_NetworkTrustedConnections = _skycoin.SKY_api_Client_NetworkTrustedConnections

def SKY_api_Client_NetworkExchangeableConnections(p0):
    return _skycoin.SKY_api_Client_NetworkExchangeableConnections(p0)
SKY_api_Client_NetworkExchangeableConnections = _skycoin.SKY_api_Client_NetworkExchangeableConnections

def SKY_api_Client_PendingTransactions(p0):
    return _skycoin.SKY_api_Client_PendingTransactions(p0)
SKY_api_Client_PendingTransactions = _skycoin.SKY_api_Client_PendingTransactions

def SKY_api_Client_Transaction(p0, p1):
    return _skycoin.SKY_api_Client_Transaction(p0, p1)
SKY_api_Client_Transaction = _skycoin.SKY_api_Client_Transaction

def SKY_api_Client_Transactions(p0, p1):
    return _skycoin.SKY_api_Client_Transactions(p0, p1)
SKY_api_Client_Transactions = _skycoin.SKY_api_Client_Transactions

def SKY_api_Client_ConfirmedTransactions(p0, p1):
    return _skycoin.SKY_api_Client_ConfirmedTransactions(p0, p1)
SKY_api_Client_ConfirmedTransactions = _skycoin.SKY_api_Client_ConfirmedTransactions

def SKY_api_Client_UnconfirmedTransactions(p0, p1):
    return _skycoin.SKY_api_Client_UnconfirmedTransactions(p0, p1)
SKY_api_Client_UnconfirmedTransactions = _skycoin.SKY_api_Client_UnconfirmedTransactions

def SKY_api_Client_InjectTransaction(p0, p1):
    return _skycoin.SKY_api_Client_InjectTransaction(p0, p1)
SKY_api_Client_InjectTransaction = _skycoin.SKY_api_Client_InjectTransaction

def SKY_api_Client_ResendUnconfirmedTransactions(p0):
    return _skycoin.SKY_api_Client_ResendUnconfirmedTransactions(p0)
SKY_api_Client_ResendUnconfirmedTransactions = _skycoin.SKY_api_Client_ResendUnconfirmedTransactions

def SKY_api_Client_RawTransaction(p0, p1):
    return _skycoin.SKY_api_Client_RawTransaction(p0, p1)
SKY_api_Client_RawTransaction = _skycoin.SKY_api_Client_RawTransaction

def SKY_api_Client_AddressTransactions(p0, p1):
    return _skycoin.SKY_api_Client_AddressTransactions(p0, p1)
SKY_api_Client_AddressTransactions = _skycoin.SKY_api_Client_AddressTransactions

def SKY_api_Client_Richlist(p0, p1):
    return _skycoin.SKY_api_Client_Richlist(p0, p1)
SKY_api_Client_Richlist = _skycoin.SKY_api_Client_Richlist

def SKY_api_Client_AddressCount(p0):
    return _skycoin.SKY_api_Client_AddressCount(p0)
SKY_api_Client_AddressCount = _skycoin.SKY_api_Client_AddressCount

def SKY_api_Client_UnloadWallet(p0, p1):
    return _skycoin.SKY_api_Client_UnloadWallet(p0, p1)
SKY_api_Client_UnloadWallet = _skycoin.SKY_api_Client_UnloadWallet

def SKY_api_Client_Health(p0):
    return _skycoin.SKY_api_Client_Health(p0)
SKY_api_Client_Health = _skycoin.SKY_api_Client_Health

def SKY_api_Client_EncryptWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_EncryptWallet(p0, p1, p2)
SKY_api_Client_EncryptWallet = _skycoin.SKY_api_Client_EncryptWallet

def SKY_api_Client_DecryptWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_DecryptWallet(p0, p1, p2)
SKY_api_Client_DecryptWallet = _skycoin.SKY_api_Client_DecryptWallet

def SKY_JsonEncode_Handle(p0):
    return _skycoin.SKY_JsonEncode_Handle(p0)
SKY_JsonEncode_Handle = _skycoin.SKY_JsonEncode_Handle

def SKY_Handle_Progress_GetCurrent(p0):
    return _skycoin.SKY_Handle_Progress_GetCurrent(p0)
SKY_Handle_Progress_GetCurrent = _skycoin.SKY_Handle_Progress_GetCurrent

def SKY_Handle_Block_GetHeadSeq(p0):
    return _skycoin.SKY_Handle_Block_GetHeadSeq(p0)
SKY_Handle_Block_GetHeadSeq = _skycoin.SKY_Handle_Block_GetHeadSeq

def SKY_Handle_Block_GetHeadHash(p0):
    return _skycoin.SKY_Handle_Block_GetHeadHash(p0)
SKY_Handle_Block_GetHeadHash = _skycoin.SKY_Handle_Block_GetHeadHash

def SKY_Handle_Block_GetPreviousBlockHash(p0):
    return _skycoin.SKY_Handle_Block_GetPreviousBlockHash(p0)
SKY_Handle_Block_GetPreviousBlockHash = _skycoin.SKY_Handle_Block_GetPreviousBlockHash

def SKY_Handle_Blocks_GetAt(p0, p1):
    return _skycoin.SKY_Handle_Blocks_GetAt(p0, p1)
SKY_Handle_Blocks_GetAt = _skycoin.SKY_Handle_Blocks_GetAt

def SKY_Handle_Blocks_GetCount(p0):
    return _skycoin.SKY_Handle_Blocks_GetCount(p0)
SKY_Handle_Blocks_GetCount = _skycoin.SKY_Handle_Blocks_GetCount

def SKY_Handle_Connections_GetCount(p0):
    return _skycoin.SKY_Handle_Connections_GetCount(p0)
SKY_Handle_Connections_GetCount = _skycoin.SKY_Handle_Connections_GetCount

def SKY_Handle_Strings_GetCount(p0):
    return _skycoin.SKY_Handle_Strings_GetCount(p0)
SKY_Handle_Strings_GetCount = _skycoin.SKY_Handle_Strings_GetCount

def SKY_Handle_Strings_Sort(p0):
    return _skycoin.SKY_Handle_Strings_Sort(p0)
SKY_Handle_Strings_Sort = _skycoin.SKY_Handle_Strings_Sort

def SKY_Handle_Strings_GetAt(p0, p1):
    return _skycoin.SKY_Handle_Strings_GetAt(p0, p1)
SKY_Handle_Strings_GetAt = _skycoin.SKY_Handle_Strings_GetAt

def SKY_api_Handle_Client_GetWalletDir(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletDir(p0)
SKY_api_Handle_Client_GetWalletDir = _skycoin.SKY_api_Handle_Client_GetWalletDir

def SKY_api_Handle_Client_GetWalletFileName(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletFileName(p0)
SKY_api_Handle_Client_GetWalletFileName = _skycoin.SKY_api_Handle_Client_GetWalletFileName

def SKY_api_Handle_Client_GetWalletLabel(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletLabel(p0)
SKY_api_Handle_Client_GetWalletLabel = _skycoin.SKY_api_Handle_Client_GetWalletLabel

def SKY_api_Handle_Client_GetWalletFullPath(p0, p1):
    return _skycoin.SKY_api_Handle_Client_GetWalletFullPath(p0, p1)
SKY_api_Handle_Client_GetWalletFullPath = _skycoin.SKY_api_Handle_Client_GetWalletFullPath

def SKY_api_Handle_GetWalletMeta(p0):
    return _skycoin.SKY_api_Handle_GetWalletMeta(p0)
SKY_api_Handle_GetWalletMeta = _skycoin.SKY_api_Handle_GetWalletMeta

def SKY_api_Handle_GetWalletEntriesCount(p0):
    return _skycoin.SKY_api_Handle_GetWalletEntriesCount(p0)
SKY_api_Handle_GetWalletEntriesCount = _skycoin.SKY_api_Handle_GetWalletEntriesCount

def SKY_api_Handle_Client_GetWalletResponseEntriesCount(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletResponseEntriesCount(p0)
SKY_api_Handle_Client_GetWalletResponseEntriesCount = _skycoin.SKY_api_Handle_Client_GetWalletResponseEntriesCount

def SKY_api_Handle_WalletGetEntry(p0, p1, p2, p3):
    return _skycoin.SKY_api_Handle_WalletGetEntry(p0, p1, p2, p3)
SKY_api_Handle_WalletGetEntry = _skycoin.SKY_api_Handle_WalletGetEntry

def SKY_api_Handle_WalletResponseGetEntry(p0, p1):
    return _skycoin.SKY_api_Handle_WalletResponseGetEntry(p0, p1)
SKY_api_Handle_WalletResponseGetEntry = _skycoin.SKY_api_Handle_WalletResponseGetEntry

def SKY_api_Handle_WalletResponseIsEncrypted(p0):
    return _skycoin.SKY_api_Handle_WalletResponseIsEncrypted(p0)
SKY_api_Handle_WalletResponseIsEncrypted = _skycoin.SKY_api_Handle_WalletResponseIsEncrypted

def SKY_api_Handle_WalletResponseGetCryptoType(p0):
    return _skycoin.SKY_api_Handle_WalletResponseGetCryptoType(p0)
SKY_api_Handle_WalletResponseGetCryptoType = _skycoin.SKY_api_Handle_WalletResponseGetCryptoType

def SKY_api_Handle_WalletsResponseGetCount(p0):
    return _skycoin.SKY_api_Handle_WalletsResponseGetCount(p0)
SKY_api_Handle_WalletsResponseGetCount = _skycoin.SKY_api_Handle_WalletsResponseGetCount

def SKY_api_Handle_WalletsResponseGetAt(p0, p1):
    return _skycoin.SKY_api_Handle_WalletsResponseGetAt(p0, p1)
SKY_api_Handle_WalletsResponseGetAt = _skycoin.SKY_api_Handle_WalletsResponseGetAt

def SKY_api_Handle_GetWalletFolderAddress(p0):
    return _skycoin.SKY_api_Handle_GetWalletFolderAddress(p0)
SKY_api_Handle_GetWalletFolderAddress = _skycoin.SKY_api_Handle_GetWalletFolderAddress

def SKY_api_Handle_GetWalletSeed(p0):
    return _skycoin.SKY_api_Handle_GetWalletSeed(p0)
SKY_api_Handle_GetWalletSeed = _skycoin.SKY_api_Handle_GetWalletSeed

def SKY_api_Handle_GetWalletLastSeed(p0):
    return _skycoin.SKY_api_Handle_GetWalletLastSeed(p0)
SKY_api_Handle_GetWalletLastSeed = _skycoin.SKY_api_Handle_GetWalletLastSeed

def SKY_secp256k1_GenerateKeyPair():
    return _skycoin.SKY_secp256k1_GenerateKeyPair()
SKY_secp256k1_GenerateKeyPair = _skycoin.SKY_secp256k1_GenerateKeyPair

def SKY_secp256k1_PubkeyFromSeckey(p0):
    return _skycoin.SKY_secp256k1_PubkeyFromSeckey(p0)
SKY_secp256k1_PubkeyFromSeckey = _skycoin.SKY_secp256k1_PubkeyFromSeckey

def SKY_secp256k1_UncompressPubkey(p0):
    return _skycoin.SKY_secp256k1_UncompressPubkey(p0)
SKY_secp256k1_UncompressPubkey = _skycoin.SKY_secp256k1_UncompressPubkey

def SKY_secp256k1_UncompressedPubkeyFromSeckey(p0):
    return _skycoin.SKY_secp256k1_UncompressedPubkeyFromSeckey(p0)
SKY_secp256k1_UncompressedPubkeyFromSeckey = _skycoin.SKY_secp256k1_UncompressedPubkeyFromSeckey

def SKY_secp256k1_Secp256k1Hash(p0):
    return _skycoin.SKY_secp256k1_Secp256k1Hash(p0)
SKY_secp256k1_Secp256k1Hash = _skycoin.SKY_secp256k1_Secp256k1Hash

def SKY_secp256k1_GenerateDeterministicKeyPair(p0):
    return _skycoin.SKY_secp256k1_GenerateDeterministicKeyPair(p0)
SKY_secp256k1_GenerateDeterministicKeyPair = _skycoin.SKY_secp256k1_GenerateDeterministicKeyPair

def SKY_secp256k1_DeterministicKeyPairIterator(p0):
    return _skycoin.SKY_secp256k1_DeterministicKeyPairIterator(p0)
SKY_secp256k1_DeterministicKeyPairIterator = _skycoin.SKY_secp256k1_DeterministicKeyPairIterator

def SKY_secp256k1_Sign(p0, p1):
    return _skycoin.SKY_secp256k1_Sign(p0, p1)
SKY_secp256k1_Sign = _skycoin.SKY_secp256k1_Sign

def SKY_secp256k1_SignDeterministic(p0, p1, p2):
    return _skycoin.SKY_secp256k1_SignDeterministic(p0, p1, p2)
SKY_secp256k1_SignDeterministic = _skycoin.SKY_secp256k1_SignDeterministic

def SKY_secp256k1_VerifySeckey(p0):
    return _skycoin.SKY_secp256k1_VerifySeckey(p0)
SKY_secp256k1_VerifySeckey = _skycoin.SKY_secp256k1_VerifySeckey

def SKY_secp256k1_VerifyPubkey(p0):
    return _skycoin.SKY_secp256k1_VerifyPubkey(p0)
SKY_secp256k1_VerifyPubkey = _skycoin.SKY_secp256k1_VerifyPubkey

def SKY_secp256k1_VerifySignatureValidity(p0):
    return _skycoin.SKY_secp256k1_VerifySignatureValidity(p0)
SKY_secp256k1_VerifySignatureValidity = _skycoin.SKY_secp256k1_VerifySignatureValidity

def SKY_secp256k1_VerifySignature(p0, p1, p2):
    return _skycoin.SKY_secp256k1_VerifySignature(p0, p1, p2)
SKY_secp256k1_VerifySignature = _skycoin.SKY_secp256k1_VerifySignature

def SKY_secp256k1_SignatureErrorString(p0, p1, p2):
    return _skycoin.SKY_secp256k1_SignatureErrorString(p0, p1, p2)
SKY_secp256k1_SignatureErrorString = _skycoin.SKY_secp256k1_SignatureErrorString

def SKY_secp256k1_RecoverPubkey(p0, p1):
    return _skycoin.SKY_secp256k1_RecoverPubkey(p0, p1)
SKY_secp256k1_RecoverPubkey = _skycoin.SKY_secp256k1_RecoverPubkey

def SKY_secp256k1_ECDH(p0, p1):
    return _skycoin.SKY_secp256k1_ECDH(p0, p1)
SKY_secp256k1_ECDH = _skycoin.SKY_secp256k1_ECDH

def SKY_cert_CreateCertIfNotExists(p0, p1, p2, p3):
    return _skycoin.SKY_cert_CreateCertIfNotExists(p0, p1, p2, p3)
SKY_cert_CreateCertIfNotExists = _skycoin.SKY_cert_CreateCertIfNotExists

def SKY_fee_VerifyTransactionFee(p0, p1):
    return _skycoin.SKY_fee_VerifyTransactionFee(p0, p1)
SKY_fee_VerifyTransactionFee = _skycoin.SKY_fee_VerifyTransactionFee

def SKY_fee_VerifyTransactionFeeForHours(p0, p1):
    return _skycoin.SKY_fee_VerifyTransactionFeeForHours(p0, p1)
SKY_fee_VerifyTransactionFeeForHours = _skycoin.SKY_fee_VerifyTransactionFeeForHours

def SKY_fee_RequiredFee(p0):
    return _skycoin.SKY_fee_RequiredFee(p0)
SKY_fee_RequiredFee = _skycoin.SKY_fee_RequiredFee

def SKY_fee_RemainingHours(p0):
    return _skycoin.SKY_fee_RemainingHours(p0)
SKY_fee_RemainingHours = _skycoin.SKY_fee_RemainingHours

def SKY_fee_TransactionFee(p0, p1):
    return _skycoin.SKY_fee_TransactionFee(p0, p1)
SKY_fee_TransactionFee = _skycoin.SKY_fee_TransactionFee

def SKY_iputil_LocalhostIP():
    return _skycoin.SKY_iputil_LocalhostIP()
SKY_iputil_LocalhostIP = _skycoin.SKY_iputil_LocalhostIP

def SKY_iputil_IsLocalhost(p0):
    return _skycoin.SKY_iputil_IsLocalhost(p0)
SKY_iputil_IsLocalhost = _skycoin.SKY_iputil_IsLocalhost

def SKY_iputil_SplitAddr(p0):
    return _skycoin.SKY_iputil_SplitAddr(p0)
SKY_iputil_SplitAddr = _skycoin.SKY_iputil_SplitAddr

def SKY_cipher_Ripemd160_Set(p0, p1):
    return _skycoin.SKY_cipher_Ripemd160_Set(p0, p1)
SKY_cipher_Ripemd160_Set = _skycoin.SKY_cipher_Ripemd160_Set

def SKY_cipher_HashRipemd160(p0, p1):
    return _skycoin.SKY_cipher_HashRipemd160(p0, p1)
SKY_cipher_HashRipemd160 = _skycoin.SKY_cipher_HashRipemd160

def SKY_cipher_SHA256_Set(p0, p1):
    return _skycoin.SKY_cipher_SHA256_Set(p0, p1)
SKY_cipher_SHA256_Set = _skycoin.SKY_cipher_SHA256_Set

def SKY_cipher_SHA256_Hex(p0):
    return _skycoin.SKY_cipher_SHA256_Hex(p0)
SKY_cipher_SHA256_Hex = _skycoin.SKY_cipher_SHA256_Hex

def SKY_cipher_SHA256_Xor(p0, p1, p2):
    return _skycoin.SKY_cipher_SHA256_Xor(p0, p1, p2)
SKY_cipher_SHA256_Xor = _skycoin.SKY_cipher_SHA256_Xor

def SKY_cipher_SumSHA256(p0, p1):
    return _skycoin.SKY_cipher_SumSHA256(p0, p1)
SKY_cipher_SumSHA256 = _skycoin.SKY_cipher_SumSHA256

def SKY_cipher_SHA256FromHex(p0, p1):
    return _skycoin.SKY_cipher_SHA256FromHex(p0, p1)
SKY_cipher_SHA256FromHex = _skycoin.SKY_cipher_SHA256FromHex

def SKY_cipher_DoubleSHA256(p0, p1):
    return _skycoin.SKY_cipher_DoubleSHA256(p0, p1)
SKY_cipher_DoubleSHA256 = _skycoin.SKY_cipher_DoubleSHA256

def SKY_cipher_AddSHA256(p0, p1, p2):
    return _skycoin.SKY_cipher_AddSHA256(p0, p1, p2)
SKY_cipher_AddSHA256 = _skycoin.SKY_cipher_AddSHA256

def SKY_cipher_Merkle(p0, p1):
    return _skycoin.SKY_cipher_Merkle(p0, p1)
SKY_cipher_Merkle = _skycoin.SKY_cipher_Merkle

def SKY_cipher_MustSumSHA256(p0, p1, p2):
    return _skycoin.SKY_cipher_MustSumSHA256(p0, p1, p2)
SKY_cipher_MustSumSHA256 = _skycoin.SKY_cipher_MustSumSHA256

def SKY_coin_Create_Transaction():
    return _skycoin.SKY_coin_Create_Transaction()
SKY_coin_Create_Transaction = _skycoin.SKY_coin_Create_Transaction

def SKY_coin_Transaction_Copy(p0):
    return _skycoin.SKY_coin_Transaction_Copy(p0)
SKY_coin_Transaction_Copy = _skycoin.SKY_coin_Transaction_Copy

def SKY_coin_Get_Transaction_Object(p0, p1):
    return _skycoin.SKY_coin_Get_Transaction_Object(p0, p1)
SKY_coin_Get_Transaction_Object = _skycoin.SKY_coin_Get_Transaction_Object

def SKY_coin_Transaction_ResetInputs(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetInputs(p0, p1)
SKY_coin_Transaction_ResetInputs = _skycoin.SKY_coin_Transaction_ResetInputs

def SKY_coin_Transaction_ResetOutputs(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetOutputs(p0, p1)
SKY_coin_Transaction_ResetOutputs = _skycoin.SKY_coin_Transaction_ResetOutputs

def SKY_coin_Transaction_ResetSignatures(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetSignatures(p0, p1)
SKY_coin_Transaction_ResetSignatures = _skycoin.SKY_coin_Transaction_ResetSignatures

def SKY_coin_Transaction_Verify(p0):
    return _skycoin.SKY_coin_Transaction_Verify(p0)
SKY_coin_Transaction_Verify = _skycoin.SKY_coin_Transaction_Verify

def SKY_coin_Transaction_VerifyInput(p0):
    return _skycoin.SKY_coin_Transaction_VerifyInput(p0)
SKY_coin_Transaction_VerifyInput = _skycoin.SKY_coin_Transaction_VerifyInput

def SKY_coin_Transaction_PushInput(p0, p1):
    return _skycoin.SKY_coin_Transaction_PushInput(p0, p1)
SKY_coin_Transaction_PushInput = _skycoin.SKY_coin_Transaction_PushInput

def SKY_coin_TransactionOutput_UxID(p0, p1, p2):
    return _skycoin.SKY_coin_TransactionOutput_UxID(p0, p1, p2)
SKY_coin_TransactionOutput_UxID = _skycoin.SKY_coin_TransactionOutput_UxID

def SKY_coin_Transaction_PushOutput(p0, p1, p2, p3):
    return _skycoin.SKY_coin_Transaction_PushOutput(p0, p1, p2, p3)
SKY_coin_Transaction_PushOutput = _skycoin.SKY_coin_Transaction_PushOutput

def SKY_coin_Transaction_SignInputs(p0, p1):
    return _skycoin.SKY_coin_Transaction_SignInputs(p0, p1)
SKY_coin_Transaction_SignInputs = _skycoin.SKY_coin_Transaction_SignInputs

def SKY_coin_Transaction_Size(p0):
    return _skycoin.SKY_coin_Transaction_Size(p0)
SKY_coin_Transaction_Size = _skycoin.SKY_coin_Transaction_Size

def SKY_coin_Transaction_Hash(p0, p1):
    return _skycoin.SKY_coin_Transaction_Hash(p0, p1)
SKY_coin_Transaction_Hash = _skycoin.SKY_coin_Transaction_Hash

def SKY_coin_Transaction_SizeHash(p0, p2):
    return _skycoin.SKY_coin_Transaction_SizeHash(p0, p2)
SKY_coin_Transaction_SizeHash = _skycoin.SKY_coin_Transaction_SizeHash

def SKY_coin_Transaction_TxID(p0):
    return _skycoin.SKY_coin_Transaction_TxID(p0)
SKY_coin_Transaction_TxID = _skycoin.SKY_coin_Transaction_TxID

def SKY_coin_Transaction_TxIDHex(p0):
    return _skycoin.SKY_coin_Transaction_TxIDHex(p0)
SKY_coin_Transaction_TxIDHex = _skycoin.SKY_coin_Transaction_TxIDHex

def SKY_coin_Transaction_UpdateHeader(p0):
    return _skycoin.SKY_coin_Transaction_UpdateHeader(p0)
SKY_coin_Transaction_UpdateHeader = _skycoin.SKY_coin_Transaction_UpdateHeader

def SKY_coin_Transaction_HashInner(p0, p1):
    return _skycoin.SKY_coin_Transaction_HashInner(p0, p1)
SKY_coin_Transaction_HashInner = _skycoin.SKY_coin_Transaction_HashInner

def SKY_coin_Transaction_Serialize(p0):
    return _skycoin.SKY_coin_Transaction_Serialize(p0)
SKY_coin_Transaction_Serialize = _skycoin.SKY_coin_Transaction_Serialize

def SKY_coin_MustTransactionDeserialize(p0):
    return _skycoin.SKY_coin_MustTransactionDeserialize(p0)
SKY_coin_MustTransactionDeserialize = _skycoin.SKY_coin_MustTransactionDeserialize

def SKY_coin_TransactionDeserialize(p0):
    return _skycoin.SKY_coin_TransactionDeserialize(p0)
SKY_coin_TransactionDeserialize = _skycoin.SKY_coin_TransactionDeserialize

def SKY_coin_Transaction_OutputHours(p0):
    return _skycoin.SKY_coin_Transaction_OutputHours(p0)
SKY_coin_Transaction_OutputHours = _skycoin.SKY_coin_Transaction_OutputHours

def SKY_coin_Create_Transactions():
    return _skycoin.SKY_coin_Create_Transactions()
SKY_coin_Create_Transactions = _skycoin.SKY_coin_Create_Transactions

def SKY_coin_Get_Transactions_Object(p0, p1):
    return _skycoin.SKY_coin_Get_Transactions_Object(p0, p1)
SKY_coin_Get_Transactions_Object = _skycoin.SKY_coin_Get_Transactions_Object

def SKY_coin_Transactions_Length(p0):
    return _skycoin.SKY_coin_Transactions_Length(p0)
SKY_coin_Transactions_Length = _skycoin.SKY_coin_Transactions_Length

def SKY_coin_Transactions_Add(p0, p1):
    return _skycoin.SKY_coin_Transactions_Add(p0, p1)
SKY_coin_Transactions_Add = _skycoin.SKY_coin_Transactions_Add

def SKY_coin_Transactions_GetAt(p0, p1):
    return _skycoin.SKY_coin_Transactions_GetAt(p0, p1)
SKY_coin_Transactions_GetAt = _skycoin.SKY_coin_Transactions_GetAt

def SKY_coin_Transactions_Hashes(p0):
    return _skycoin.SKY_coin_Transactions_Hashes(p0)
SKY_coin_Transactions_Hashes = _skycoin.SKY_coin_Transactions_Hashes

def SKY_coin_Transactions_Size(p0):
    return _skycoin.SKY_coin_Transactions_Size(p0)
SKY_coin_Transactions_Size = _skycoin.SKY_coin_Transactions_Size

def SKY_coin_Transactions_TruncateBytesTo(p0, p1):
    return _skycoin.SKY_coin_Transactions_TruncateBytesTo(p0, p1)
SKY_coin_Transactions_TruncateBytesTo = _skycoin.SKY_coin_Transactions_TruncateBytesTo

def SKY_coin_SortableTransactions_Sort(p0):
    return _skycoin.SKY_coin_SortableTransactions_Sort(p0)
SKY_coin_SortableTransactions_Sort = _skycoin.SKY_coin_SortableTransactions_Sort

def SKY_coin_SortableTransactions_Len(p0):
    return _skycoin.SKY_coin_SortableTransactions_Len(p0)
SKY_coin_SortableTransactions_Len = _skycoin.SKY_coin_SortableTransactions_Len

def SKY_coin_SortableTransactions_Less(p0, p1, p2):
    return _skycoin.SKY_coin_SortableTransactions_Less(p0, p1, p2)
SKY_coin_SortableTransactions_Less = _skycoin.SKY_coin_SortableTransactions_Less

def SKY_coin_SortableTransactions_Swap(p0, p1, p2):
    return _skycoin.SKY_coin_SortableTransactions_Swap(p0, p1, p2)
SKY_coin_SortableTransactions_Swap = _skycoin.SKY_coin_SortableTransactions_Swap

def SKY_coin_VerifyTransactionCoinsSpending():
    return _skycoin.SKY_coin_VerifyTransactionCoinsSpending()
SKY_coin_VerifyTransactionCoinsSpending = _skycoin.SKY_coin_VerifyTransactionCoinsSpending

def SKY_coin_VerifyTransactionHoursSpending(p0):
    return _skycoin.SKY_coin_VerifyTransactionHoursSpending(p0)
SKY_coin_VerifyTransactionHoursSpending = _skycoin.SKY_coin_VerifyTransactionHoursSpending

def SKY_encrypt_Sha256Xor_Encrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_Sha256Xor_Encrypt(p0, p1, p2)
SKY_encrypt_Sha256Xor_Encrypt = _skycoin.SKY_encrypt_Sha256Xor_Encrypt

def SKY_encrypt_Sha256Xor_Decrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_Sha256Xor_Decrypt(p0, p1, p2)
SKY_encrypt_Sha256Xor_Decrypt = _skycoin.SKY_encrypt_Sha256Xor_Decrypt

def SKY_cli_GenerateAddressesInFile(p0, p1, p2):
    return _skycoin.SKY_cli_GenerateAddressesInFile(p0, p1, p2)
SKY_cli_GenerateAddressesInFile = _skycoin.SKY_cli_GenerateAddressesInFile

def SKY_cli_FormatAddressesAsJSON(p0):
    return _skycoin.SKY_cli_FormatAddressesAsJSON(p0)
SKY_cli_FormatAddressesAsJSON = _skycoin.SKY_cli_FormatAddressesAsJSON

def SKY_cli_FormatAddressesAsJoinedArray(p0):
    return _skycoin.SKY_cli_FormatAddressesAsJoinedArray(p0)
SKY_cli_FormatAddressesAsJoinedArray = _skycoin.SKY_cli_FormatAddressesAsJoinedArray

def SKY_cli_AddressesToStrings(p0):
    return _skycoin.SKY_cli_AddressesToStrings(p0)
SKY_cli_AddressesToStrings = _skycoin.SKY_cli_AddressesToStrings

def SKY_cli_LoadConfig():
    return _skycoin.SKY_cli_LoadConfig()
SKY_cli_LoadConfig = _skycoin.SKY_cli_LoadConfig

def SKY_cli_Config_FullWalletPath(p0):
    return _skycoin.SKY_cli_Config_FullWalletPath(p0)
SKY_cli_Config_FullWalletPath = _skycoin.SKY_cli_Config_FullWalletPath

def SKY_cli_Config_FullDBPath(p0):
    return _skycoin.SKY_cli_Config_FullDBPath(p0)
SKY_cli_Config_FullDBPath = _skycoin.SKY_cli_Config_FullDBPath

def SKY_cli_NewApp(p0):
    return _skycoin.SKY_cli_NewApp(p0)
SKY_cli_NewApp = _skycoin.SKY_cli_NewApp

def SKY_cli_RPCClientFromContext(p0):
    return _skycoin.SKY_cli_RPCClientFromContext(p0)
SKY_cli_RPCClientFromContext = _skycoin.SKY_cli_RPCClientFromContext

def SKY_cli_ConfigFromContext(p0):
    return _skycoin.SKY_cli_ConfigFromContext(p0)
SKY_cli_ConfigFromContext = _skycoin.SKY_cli_ConfigFromContext

def SKY_cli_PasswordFromBytes_Password():
    return _skycoin.SKY_cli_PasswordFromBytes_Password()
SKY_cli_PasswordFromBytes_Password = _skycoin.SKY_cli_PasswordFromBytes_Password

def SKY_cli_PasswordFromTerm_Password(p0):
    return _skycoin.SKY_cli_PasswordFromTerm_Password(p0)
SKY_cli_PasswordFromTerm_Password = _skycoin.SKY_cli_PasswordFromTerm_Password

def SKY_handle_close(p0):
    return _skycoin.SKY_handle_close(p0)
SKY_handle_close = _skycoin.SKY_handle_close

def SKY_encoder_StructField_String(p0):
    return _skycoin.SKY_encoder_StructField_String(p0)
SKY_encoder_StructField_String = _skycoin.SKY_encoder_StructField_String

def SKY_encoder_ParseFields(p0, p1):
    return _skycoin.SKY_encoder_ParseFields(p0, p1)
SKY_encoder_ParseFields = _skycoin.SKY_encoder_ParseFields

def SKY_coin_UxOut_Hash(p0, p1):
    return _skycoin.SKY_coin_UxOut_Hash(p0, p1)
SKY_coin_UxOut_Hash = _skycoin.SKY_coin_UxOut_Hash

def SKY_coin_UxOut_SnapshotHash(p0, p1):
    return _skycoin.SKY_coin_UxOut_SnapshotHash(p0, p1)
SKY_coin_UxOut_SnapshotHash = _skycoin.SKY_coin_UxOut_SnapshotHash

def SKY_coin_UxBody_Hash(p0, p1):
    return _skycoin.SKY_coin_UxBody_Hash(p0, p1)
SKY_coin_UxBody_Hash = _skycoin.SKY_coin_UxBody_Hash

def SKY_coin_UxOut_CoinHours(p0, p1):
    return _skycoin.SKY_coin_UxOut_CoinHours(p0, p1)
SKY_coin_UxOut_CoinHours = _skycoin.SKY_coin_UxOut_CoinHours

def SKY_coin_UxArray_Hashes():
    return _skycoin.SKY_coin_UxArray_Hashes()
SKY_coin_UxArray_Hashes = _skycoin.SKY_coin_UxArray_Hashes

def SKY_coin_UxArray_HasDupes():
    return _skycoin.SKY_coin_UxArray_HasDupes()
SKY_coin_UxArray_HasDupes = _skycoin.SKY_coin_UxArray_HasDupes

def SKY_coin_UxArray_Sort():
    return _skycoin.SKY_coin_UxArray_Sort()
SKY_coin_UxArray_Sort = _skycoin.SKY_coin_UxArray_Sort

def SKY_coin_UxArray_Len():
    return _skycoin.SKY_coin_UxArray_Len()
SKY_coin_UxArray_Len = _skycoin.SKY_coin_UxArray_Len

def SKY_coin_UxArray_Less(p1, p2):
    return _skycoin.SKY_coin_UxArray_Less(p1, p2)
SKY_coin_UxArray_Less = _skycoin.SKY_coin_UxArray_Less

def SKY_coin_UxArray_Swap(p1, p2):
    return _skycoin.SKY_coin_UxArray_Swap(p1, p2)
SKY_coin_UxArray_Swap = _skycoin.SKY_coin_UxArray_Swap

def SKY_coin_UxArray_Coins():
    return _skycoin.SKY_coin_UxArray_Coins()
SKY_coin_UxArray_Coins = _skycoin.SKY_coin_UxArray_Coins

def SKY_coin_UxArray_CoinHours(p1):
    return _skycoin.SKY_coin_UxArray_CoinHours(p1)
SKY_coin_UxArray_CoinHours = _skycoin.SKY_coin_UxArray_CoinHours

def SKY_coin_UxArray_Sub():
    return _skycoin.SKY_coin_UxArray_Sub()
SKY_coin_UxArray_Sub = _skycoin.SKY_coin_UxArray_Sub

def SKY_coin_UxArray_Add():
    return _skycoin.SKY_coin_UxArray_Add()
SKY_coin_UxArray_Add = _skycoin.SKY_coin_UxArray_Add

def SKY_scrypt_Key(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_scrypt_Key(p0, p1, p2, p3, p4, p5)
SKY_scrypt_Key = _skycoin.SKY_scrypt_Key

def SKY_wallet_NewError(p0):
    return _skycoin.SKY_wallet_NewError(p0)
SKY_wallet_NewError = _skycoin.SKY_wallet_NewError

def SKY_wallet_NewWallet(p0, p1):
    return _skycoin.SKY_wallet_NewWallet(p0, p1)
SKY_wallet_NewWallet = _skycoin.SKY_wallet_NewWallet

def SKY_wallet_Wallet_Lock(p0, p1, p2):
    return _skycoin.SKY_wallet_Wallet_Lock(p0, p1, p2)
SKY_wallet_Wallet_Lock = _skycoin.SKY_wallet_Wallet_Lock

def SKY_wallet_Wallet_Unlock(p0, p1):
    return _skycoin.SKY_wallet_Wallet_Unlock(p0, p1)
SKY_wallet_Wallet_Unlock = _skycoin.SKY_wallet_Wallet_Unlock

def SKY_wallet_Load(p0):
    return _skycoin.SKY_wallet_Load(p0)
SKY_wallet_Load = _skycoin.SKY_wallet_Load

def SKY_wallet_Wallet_Save(p0, p1):
    return _skycoin.SKY_wallet_Wallet_Save(p0, p1)
SKY_wallet_Wallet_Save = _skycoin.SKY_wallet_Wallet_Save

def SKY_wallet_Wallet_Validate(p0):
    return _skycoin.SKY_wallet_Wallet_Validate(p0)
SKY_wallet_Wallet_Validate = _skycoin.SKY_wallet_Wallet_Validate

def SKY_wallet_Wallet_Type(p0):
    return _skycoin.SKY_wallet_Wallet_Type(p0)
SKY_wallet_Wallet_Type = _skycoin.SKY_wallet_Wallet_Type

def SKY_wallet_Wallet_Version(p0):
    return _skycoin.SKY_wallet_Wallet_Version(p0)
SKY_wallet_Wallet_Version = _skycoin.SKY_wallet_Wallet_Version

def SKY_wallet_Wallet_Filename(p0):
    return _skycoin.SKY_wallet_Wallet_Filename(p0)
SKY_wallet_Wallet_Filename = _skycoin.SKY_wallet_Wallet_Filename

def SKY_wallet_Wallet_Label(p0):
    return _skycoin.SKY_wallet_Wallet_Label(p0)
SKY_wallet_Wallet_Label = _skycoin.SKY_wallet_Wallet_Label

def SKY_wallet_Wallet_IsEncrypted(p0):
    return _skycoin.SKY_wallet_Wallet_IsEncrypted(p0)
SKY_wallet_Wallet_IsEncrypted = _skycoin.SKY_wallet_Wallet_IsEncrypted

def SKY_wallet_Wallet_GenerateAddresses(p0, p1):
    return _skycoin.SKY_wallet_Wallet_GenerateAddresses(p0, p1)
SKY_wallet_Wallet_GenerateAddresses = _skycoin.SKY_wallet_Wallet_GenerateAddresses

def SKY_wallet_Wallet_GetAddresses(p0):
    return _skycoin.SKY_wallet_Wallet_GetAddresses(p0)
SKY_wallet_Wallet_GetAddresses = _skycoin.SKY_wallet_Wallet_GetAddresses

def SKY_wallet_Wallet_GetEntry(p0, p1, p2):
    return _skycoin.SKY_wallet_Wallet_GetEntry(p0, p1, p2)
SKY_wallet_Wallet_GetEntry = _skycoin.SKY_wallet_Wallet_GetEntry

def SKY_wallet_Wallet_AddEntry(p0, p1):
    return _skycoin.SKY_wallet_Wallet_AddEntry(p0, p1)
SKY_wallet_Wallet_AddEntry = _skycoin.SKY_wallet_Wallet_AddEntry

def SKY_wallet_DistributeSpendHours(p0, p1, p2):
    return _skycoin.SKY_wallet_DistributeSpendHours(p0, p1, p2)
SKY_wallet_DistributeSpendHours = _skycoin.SKY_wallet_DistributeSpendHours

def SKY_wallet_DistributeCoinHoursProportional(p0, p1):
    return _skycoin.SKY_wallet_DistributeCoinHoursProportional(p0, p1)
SKY_wallet_DistributeCoinHoursProportional = _skycoin.SKY_wallet_DistributeCoinHoursProportional

def SKY_wallet_NewUxBalances(p0):
    return _skycoin.SKY_wallet_NewUxBalances(p0)
SKY_wallet_NewUxBalances = _skycoin.SKY_wallet_NewUxBalances

def SKY_wallet_NewUxBalance(p0, p1, p2):
    return _skycoin.SKY_wallet_NewUxBalance(p0, p1, p2)
SKY_wallet_NewUxBalance = _skycoin.SKY_wallet_NewUxBalance

def SKY_wallet_ChooseSpendsMinimizeUxOuts(p0, p1, p2):
    return _skycoin.SKY_wallet_ChooseSpendsMinimizeUxOuts(p0, p1, p2)
SKY_wallet_ChooseSpendsMinimizeUxOuts = _skycoin.SKY_wallet_ChooseSpendsMinimizeUxOuts

def SKY_wallet_ChooseSpendsMaximizeUxOuts(p0, p1, p2):
    return _skycoin.SKY_wallet_ChooseSpendsMaximizeUxOuts(p0, p1, p2)
SKY_wallet_ChooseSpendsMaximizeUxOuts = _skycoin.SKY_wallet_ChooseSpendsMaximizeUxOuts

def SKY_cli_AddPrivateKey(p0, p1):
    return _skycoin.SKY_cli_AddPrivateKey(p0, p1)
SKY_cli_AddPrivateKey = _skycoin.SKY_cli_AddPrivateKey

def SKY_cli_AddPrivateKeyToFile(p0, p1, p2):
    return _skycoin.SKY_cli_AddPrivateKeyToFile(p0, p1, p2)
SKY_cli_AddPrivateKeyToFile = _skycoin.SKY_cli_AddPrivateKeyToFile

def SKY_cli_App_Run(p0, p1):
    return _skycoin.SKY_cli_App_Run(p0, p1)
SKY_cli_App_Run = _skycoin.SKY_cli_App_Run

def SKY_cli_Config_GetCoin(p0):
    return _skycoin.SKY_cli_Config_GetCoin(p0)
SKY_cli_Config_GetCoin = _skycoin.SKY_cli_Config_GetCoin

def SKY_cli_Config_GetRPCAddress(p0):
    return _skycoin.SKY_cli_Config_GetRPCAddress(p0)
SKY_cli_Config_GetRPCAddress = _skycoin.SKY_cli_Config_GetRPCAddress

def SKY_cli_RPCClientFromApp(p0):
    return _skycoin.SKY_cli_RPCClientFromApp(p0)
SKY_cli_RPCClientFromApp = _skycoin.SKY_cli_RPCClientFromApp

def SKY_cli_Getenv(p0):
    return _skycoin.SKY_cli_Getenv(p0)
SKY_cli_Getenv = _skycoin.SKY_cli_Getenv

def SKY_cli_Setenv(p0, p1):
    return _skycoin.SKY_cli_Setenv(p0, p1)
SKY_cli_Setenv = _skycoin.SKY_cli_Setenv

def SKY_webrpc_NewClient(p0):
    return _skycoin.SKY_webrpc_NewClient(p0)
SKY_webrpc_NewClient = _skycoin.SKY_webrpc_NewClient

def SKY_webrpc_Client_CSRF(p0):
    return _skycoin.SKY_webrpc_Client_CSRF(p0)
SKY_webrpc_Client_CSRF = _skycoin.SKY_webrpc_Client_CSRF

def SKY_webrpc_Client_GetUnspentOutputs(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetUnspentOutputs(p0, p1, p2)
SKY_webrpc_Client_GetUnspentOutputs = _skycoin.SKY_webrpc_Client_GetUnspentOutputs

def SKY_webrpc_Client_InjectTransactionString(p0, p1):
    return _skycoin.SKY_webrpc_Client_InjectTransactionString(p0, p1)
SKY_webrpc_Client_InjectTransactionString = _skycoin.SKY_webrpc_Client_InjectTransactionString

def SKY_webrpc_Client_InjectTransaction(p0, p1):
    return _skycoin.SKY_webrpc_Client_InjectTransaction(p0, p1)
SKY_webrpc_Client_InjectTransaction = _skycoin.SKY_webrpc_Client_InjectTransaction

def SKY_webrpc_Client_GetStatus(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetStatus(p0, p1)
SKY_webrpc_Client_GetStatus = _skycoin.SKY_webrpc_Client_GetStatus

def SKY_webrpc_Client_GetTransactionByID(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetTransactionByID(p0, p1, p2)
SKY_webrpc_Client_GetTransactionByID = _skycoin.SKY_webrpc_Client_GetTransactionByID

def SKY_webrpc_Client_GetAddressUxOuts(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetAddressUxOuts(p0, p1)
SKY_webrpc_Client_GetAddressUxOuts = _skycoin.SKY_webrpc_Client_GetAddressUxOuts

def SKY_webrpc_Client_GetBlocks(p0, p1, p2, p3):
    return _skycoin.SKY_webrpc_Client_GetBlocks(p0, p1, p2, p3)
SKY_webrpc_Client_GetBlocks = _skycoin.SKY_webrpc_Client_GetBlocks

def SKY_webrpc_Client_GetBlocksBySeq(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetBlocksBySeq(p0, p1, p2)
SKY_webrpc_Client_GetBlocksBySeq = _skycoin.SKY_webrpc_Client_GetBlocksBySeq

def SKY_webrpc_Client_GetLastBlocks(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetLastBlocks(p0, p1, p2)
SKY_webrpc_Client_GetLastBlocks = _skycoin.SKY_webrpc_Client_GetLastBlocks

def SKY_droplet_FromString(p0):
    return _skycoin.SKY_droplet_FromString(p0)
SKY_droplet_FromString = _skycoin.SKY_droplet_FromString

def SKY_droplet_ToString(p0):
    return _skycoin.SKY_droplet_ToString(p0)
SKY_droplet_ToString = _skycoin.SKY_droplet_ToString

def SKY_bip39_NewDefaultMnemomic():
    return _skycoin.SKY_bip39_NewDefaultMnemomic()
SKY_bip39_NewDefaultMnemomic = _skycoin.SKY_bip39_NewDefaultMnemomic

def SKY_bip39_NewEntropy(p0):
    return _skycoin.SKY_bip39_NewEntropy(p0)
SKY_bip39_NewEntropy = _skycoin.SKY_bip39_NewEntropy

def SKY_bip39_NewMnemonic(p0):
    return _skycoin.SKY_bip39_NewMnemonic(p0)
SKY_bip39_NewMnemonic = _skycoin.SKY_bip39_NewMnemonic

def SKY_bip39_MnemonicToByteArray(p0):
    return _skycoin.SKY_bip39_MnemonicToByteArray(p0)
SKY_bip39_MnemonicToByteArray = _skycoin.SKY_bip39_MnemonicToByteArray

def SKY_bip39_IsMnemonicValid(p0):
    return _skycoin.SKY_bip39_IsMnemonicValid(p0)
SKY_bip39_IsMnemonicValid = _skycoin.SKY_bip39_IsMnemonicValid

def SKY_secp256k1go_XYZ_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Print(p0, p1)
SKY_secp256k1go_XYZ_Print = _skycoin.SKY_secp256k1go_XYZ_Print

def SKY_secp256k1go_XYZ_SetXY(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_SetXY(p0, p1)
SKY_secp256k1go_XYZ_SetXY = _skycoin.SKY_secp256k1go_XYZ_SetXY

def SKY_secp256k1go_XYZ_IsInfinity(p0):
    return _skycoin.SKY_secp256k1go_XYZ_IsInfinity(p0)
SKY_secp256k1go_XYZ_IsInfinity = _skycoin.SKY_secp256k1go_XYZ_IsInfinity

def SKY_secp256k1go_XYZ_IsValid(p0):
    return _skycoin.SKY_secp256k1go_XYZ_IsValid(p0)
SKY_secp256k1go_XYZ_IsValid = _skycoin.SKY_secp256k1go_XYZ_IsValid

def SKY_secp256k1go_XYZ_Normalize(p0):
    return _skycoin.SKY_secp256k1go_XYZ_Normalize(p0)
SKY_secp256k1go_XYZ_Normalize = _skycoin.SKY_secp256k1go_XYZ_Normalize

def SKY_secp256k1go_XYZ_Equals(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Equals(p0, p1)
SKY_secp256k1go_XYZ_Equals = _skycoin.SKY_secp256k1go_XYZ_Equals

def SKY_secp256k1go_XYZ_ECmult(p0, p1, p2, p3):
    return _skycoin.SKY_secp256k1go_XYZ_ECmult(p0, p1, p2, p3)
SKY_secp256k1go_XYZ_ECmult = _skycoin.SKY_secp256k1go_XYZ_ECmult

def SKY_secp256k1go_XYZ_Neg(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Neg(p0, p1)
SKY_secp256k1go_XYZ_Neg = _skycoin.SKY_secp256k1go_XYZ_Neg

def SKY_secp256k1go_XYZ_Double(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Double(p0, p1)
SKY_secp256k1go_XYZ_Double = _skycoin.SKY_secp256k1go_XYZ_Double

def SKY_secp256k1go_XYZ_AddXY(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XYZ_AddXY(p0, p1, p2)
SKY_secp256k1go_XYZ_AddXY = _skycoin.SKY_secp256k1go_XYZ_AddXY

def SKY_secp256k1go_XYZ_Add(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XYZ_Add(p0, p1, p2)
SKY_secp256k1go_XYZ_Add = _skycoin.SKY_secp256k1go_XYZ_Add

def SKY_secp256k1go_ECmultGen(p0, p1):
    return _skycoin.SKY_secp256k1go_ECmultGen(p0, p1)
SKY_secp256k1go_ECmultGen = _skycoin.SKY_secp256k1go_ECmultGen

def SKY_wallet_NewNotesFilename():
    return _skycoin.SKY_wallet_NewNotesFilename()
SKY_wallet_NewNotesFilename = _skycoin.SKY_wallet_NewNotesFilename

def SKY_wallet_LoadNotes(p0):
    return _skycoin.SKY_wallet_LoadNotes(p0)
SKY_wallet_LoadNotes = _skycoin.SKY_wallet_LoadNotes

def SKY_wallet_LoadReadableNotes(p0):
    return _skycoin.SKY_wallet_LoadReadableNotes(p0)
SKY_wallet_LoadReadableNotes = _skycoin.SKY_wallet_LoadReadableNotes

def SKY_wallet_ReadableNotes_Load(p1):
    return _skycoin.SKY_wallet_ReadableNotes_Load(p1)
SKY_wallet_ReadableNotes_Load = _skycoin.SKY_wallet_ReadableNotes_Load

def SKY_wallet_ReadableNotes_ToNotes():
    return _skycoin.SKY_wallet_ReadableNotes_ToNotes()
SKY_wallet_ReadableNotes_ToNotes = _skycoin.SKY_wallet_ReadableNotes_ToNotes

def SKY_wallet_ReadableNotes_Save(p1):
    return _skycoin.SKY_wallet_ReadableNotes_Save(p1)
SKY_wallet_ReadableNotes_Save = _skycoin.SKY_wallet_ReadableNotes_Save

def SKY_wallet_NewReadableNote(p0, p1):
    return _skycoin.SKY_wallet_NewReadableNote(p0, p1)
SKY_wallet_NewReadableNote = _skycoin.SKY_wallet_NewReadableNote

def SKY_wallet_NewReadableNotesFromNotes():
    return _skycoin.SKY_wallet_NewReadableNotesFromNotes()
SKY_wallet_NewReadableNotesFromNotes = _skycoin.SKY_wallet_NewReadableNotesFromNotes

def SKY_wallet_Notes_Save(p1, p2):
    return _skycoin.SKY_wallet_Notes_Save(p1, p2)
SKY_wallet_Notes_Save = _skycoin.SKY_wallet_Notes_Save

def SKY_wallet_Notes_SaveNote(p1, p2):
    return _skycoin.SKY_wallet_Notes_SaveNote(p1, p2)
SKY_wallet_Notes_SaveNote = _skycoin.SKY_wallet_Notes_SaveNote

def SKY_wallet_Notes_ToReadable():
    return _skycoin.SKY_wallet_Notes_ToReadable()
SKY_wallet_Notes_ToReadable = _skycoin.SKY_wallet_Notes_ToReadable

def SKY_wallet_NotesFileExist(p0):
    return _skycoin.SKY_wallet_NotesFileExist(p0)
SKY_wallet_NotesFileExist = _skycoin.SKY_wallet_NotesFileExist

def SKY_wallet_CreateNoteFileIfNotExist(p0):
    return _skycoin.SKY_wallet_CreateNoteFileIfNotExist(p0)
SKY_wallet_CreateNoteFileIfNotExist = _skycoin.SKY_wallet_CreateNoteFileIfNotExist

def SKY_encrypt_ScryptChacha20poly1305_Encrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_ScryptChacha20poly1305_Encrypt(p0, p1, p2)
SKY_encrypt_ScryptChacha20poly1305_Encrypt = _skycoin.SKY_encrypt_ScryptChacha20poly1305_Encrypt

def SKY_encrypt_ScryptChacha20poly1305_Decrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_ScryptChacha20poly1305_Decrypt(p0, p1, p2)
SKY_encrypt_ScryptChacha20poly1305_Decrypt = _skycoin.SKY_encrypt_ScryptChacha20poly1305_Decrypt

def SKY_coin_AddUint64(p0, p1):
    return _skycoin.SKY_coin_AddUint64(p0, p1)
SKY_coin_AddUint64 = _skycoin.SKY_coin_AddUint64

def SKY_coin_Uint64ToInt64(p0):
    return _skycoin.SKY_coin_Uint64ToInt64(p0)
SKY_coin_Uint64ToInt64 = _skycoin.SKY_coin_Uint64ToInt64

def SKY_coin_Int64ToUint64(p0):
    return _skycoin.SKY_coin_Int64ToUint64(p0)
SKY_coin_Int64ToUint64 = _skycoin.SKY_coin_Int64ToUint64

def SKY_wallet_NewBalance(p0, p1, p2):
    return _skycoin.SKY_wallet_NewBalance(p0, p1, p2)
SKY_wallet_NewBalance = _skycoin.SKY_wallet_NewBalance

def SKY_wallet_NewBalanceFromUxOut(p0, p1, p2):
    return _skycoin.SKY_wallet_NewBalanceFromUxOut(p0, p1, p2)
SKY_wallet_NewBalanceFromUxOut = _skycoin.SKY_wallet_NewBalanceFromUxOut

def SKY_wallet_Balance_Add(p0, p1, p2):
    return _skycoin.SKY_wallet_Balance_Add(p0, p1, p2)
SKY_wallet_Balance_Add = _skycoin.SKY_wallet_Balance_Add

def SKY_wallet_Balance_Sub(p0, p1, p2):
    return _skycoin.SKY_wallet_Balance_Sub(p0, p1, p2)
SKY_wallet_Balance_Sub = _skycoin.SKY_wallet_Balance_Sub

def SKY_wallet_Balance_Equals(p0, p1):
    return _skycoin.SKY_wallet_Balance_Equals(p0, p1)
SKY_wallet_Balance_Equals = _skycoin.SKY_wallet_Balance_Equals

def SKY_wallet_Balance_IsZero(p0):
    return _skycoin.SKY_wallet_Balance_IsZero(p0)
SKY_wallet_Balance_IsZero = _skycoin.SKY_wallet_Balance_IsZero

def SKY_coin_NewBlock(p0, p1, p2, p3, p4):
    return _skycoin.SKY_coin_NewBlock(p0, p1, p2, p3, p4)
SKY_coin_NewBlock = _skycoin.SKY_coin_NewBlock

def SKY_coin_SignedBlock_VerifySignature(p0, p1):
    return _skycoin.SKY_coin_SignedBlock_VerifySignature(p0, p1)
SKY_coin_SignedBlock_VerifySignature = _skycoin.SKY_coin_SignedBlock_VerifySignature

def SKY_coin_NewGenesisBlock(p0, p1, p2):
    return _skycoin.SKY_coin_NewGenesisBlock(p0, p1, p2)
SKY_coin_NewGenesisBlock = _skycoin.SKY_coin_NewGenesisBlock

def SKY_coin_Block_HashHeader(p0, p1):
    return _skycoin.SKY_coin_Block_HashHeader(p0, p1)
SKY_coin_Block_HashHeader = _skycoin.SKY_coin_Block_HashHeader

def SKY_coin_Block_PreHashHeader(p0, p1):
    return _skycoin.SKY_coin_Block_PreHashHeader(p0, p1)
SKY_coin_Block_PreHashHeader = _skycoin.SKY_coin_Block_PreHashHeader

def SKY_coin_Block_Time(p0):
    return _skycoin.SKY_coin_Block_Time(p0)
SKY_coin_Block_Time = _skycoin.SKY_coin_Block_Time

def SKY_coin_Block_Seq(p0):
    return _skycoin.SKY_coin_Block_Seq(p0)
SKY_coin_Block_Seq = _skycoin.SKY_coin_Block_Seq

def SKY_coin_Block_HashBody(p0, p1):
    return _skycoin.SKY_coin_Block_HashBody(p0, p1)
SKY_coin_Block_HashBody = _skycoin.SKY_coin_Block_HashBody

def SKY_coin_Block_Size(p0):
    return _skycoin.SKY_coin_Block_Size(p0)
SKY_coin_Block_Size = _skycoin.SKY_coin_Block_Size

def SKY_coin_Block_String(p0):
    return _skycoin.SKY_coin_Block_String(p0)
SKY_coin_Block_String = _skycoin.SKY_coin_Block_String

def SKY_coin_Block_GetTransaction(p0, p1):
    return _skycoin.SKY_coin_Block_GetTransaction(p0, p1)
SKY_coin_Block_GetTransaction = _skycoin.SKY_coin_Block_GetTransaction

def SKY_coin_NewBlockHeader(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_coin_NewBlockHeader(p0, p1, p2, p3, p4, p5)
SKY_coin_NewBlockHeader = _skycoin.SKY_coin_NewBlockHeader

def SKY_coin_BlockHeader_Hash(p0, p1):
    return _skycoin.SKY_coin_BlockHeader_Hash(p0, p1)
SKY_coin_BlockHeader_Hash = _skycoin.SKY_coin_BlockHeader_Hash

def SKY_coin_BlockHeader_Bytes(p0):
    return _skycoin.SKY_coin_BlockHeader_Bytes(p0)
SKY_coin_BlockHeader_Bytes = _skycoin.SKY_coin_BlockHeader_Bytes

def SKY_coin_BlockHeader_String(p0):
    return _skycoin.SKY_coin_BlockHeader_String(p0)
SKY_coin_BlockHeader_String = _skycoin.SKY_coin_BlockHeader_String

def SKY_coin_BlockBody_Hash(p0, p1):
    return _skycoin.SKY_coin_BlockBody_Hash(p0, p1)
SKY_coin_BlockBody_Hash = _skycoin.SKY_coin_BlockBody_Hash

def SKY_coin_BlockBody_Size():
    return _skycoin.SKY_coin_BlockBody_Size()
SKY_coin_BlockBody_Size = _skycoin.SKY_coin_BlockBody_Size

def SKY_coin_BlockBody_Bytes(p0):
    return _skycoin.SKY_coin_BlockBody_Bytes(p0)
SKY_coin_BlockBody_Bytes = _skycoin.SKY_coin_BlockBody_Bytes

def SKY_coin_CreateUnspents(p0, p1):
    return _skycoin.SKY_coin_CreateUnspents(p0, p1)
SKY_coin_CreateUnspents = _skycoin.SKY_coin_CreateUnspents

def SKY_coin_CreateUnspent(p0, p1, p2, p3):
    return _skycoin.SKY_coin_CreateUnspent(p0, p1, p2, p3)
SKY_coin_CreateUnspent = _skycoin.SKY_coin_CreateUnspent

def SKY_coin_GetBlockObject(p0, p1):
    return _skycoin.SKY_coin_GetBlockObject(p0, p1)
SKY_coin_GetBlockObject = _skycoin.SKY_coin_GetBlockObject

def SKY_coin_GetBlockBody(p0):
    return _skycoin.SKY_coin_GetBlockBody(p0)
SKY_coin_GetBlockBody = _skycoin.SKY_coin_GetBlockBody

def SKY_coin_NewEmptyBlock(p0):
    return _skycoin.SKY_coin_NewEmptyBlock(p0)
SKY_coin_NewEmptyBlock = _skycoin.SKY_coin_NewEmptyBlock

def SKY_wallet_CreateAddresses(p0, p1, p2, p3):
    return _skycoin.SKY_wallet_CreateAddresses(p0, p1, p2, p3)
SKY_wallet_CreateAddresses = _skycoin.SKY_wallet_CreateAddresses

def SKY_wallet_GetSkycoinWalletEntry(p0, p1):
    return _skycoin.SKY_wallet_GetSkycoinWalletEntry(p0, p1)
SKY_wallet_GetSkycoinWalletEntry = _skycoin.SKY_wallet_GetSkycoinWalletEntry

def SKY_wallet_GetBitcoinWalletEntry(p0, p1):
    return _skycoin.SKY_wallet_GetBitcoinWalletEntry(p0, p1)
SKY_wallet_GetBitcoinWalletEntry = _skycoin.SKY_wallet_GetBitcoinWalletEntry

def SKY_map_get(p1):
    return _skycoin.SKY_map_get(p1)
SKY_map_get = _skycoin.SKY_map_get

def SKY_map_has_key(p1):
    return _skycoin.SKY_map_has_key(p1)
SKY_map_has_key = _skycoin.SKY_map_has_key

def SKY_map_close():
    return _skycoin.SKY_map_close()
SKY_map_close = _skycoin.SKY_map_close

def SKY_logging_EnableColors():
    return _skycoin.SKY_logging_EnableColors()
SKY_logging_EnableColors = _skycoin.SKY_logging_EnableColors

def SKY_logging_DisableColors():
    return _skycoin.SKY_logging_DisableColors()
SKY_logging_DisableColors = _skycoin.SKY_logging_DisableColors

def SKY_logging_Disable():
    return _skycoin.SKY_logging_Disable()
SKY_logging_Disable = _skycoin.SKY_logging_Disable

def SKY_cli_GenerateWallet(p0, p2):
    return _skycoin.SKY_cli_GenerateWallet(p0, p2)
SKY_cli_GenerateWallet = _skycoin.SKY_cli_GenerateWallet

def SKY_cli_MakeAlphanumericSeed():
    return _skycoin.SKY_cli_MakeAlphanumericSeed()
SKY_cli_MakeAlphanumericSeed = _skycoin.SKY_cli_MakeAlphanumericSeed

def SKY_secp256k1go_Signature_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_Signature_Print(p0, p1)
SKY_secp256k1go_Signature_Print = _skycoin.SKY_secp256k1go_Signature_Print

def SKY_secp256k1go_Signature_Verify(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_Signature_Verify(p0, p1, p2)
SKY_secp256k1go_Signature_Verify = _skycoin.SKY_secp256k1go_Signature_Verify

def SKY_secp256k1go_Signature_Recover(p0, p1, p2, p3):
    return _skycoin.SKY_secp256k1go_Signature_Recover(p0, p1, p2, p3)
SKY_secp256k1go_Signature_Recover = _skycoin.SKY_secp256k1go_Signature_Recover

def SKY_secp256k1go_Signature_Sign(p0, p1, p2, p3):
    return _skycoin.SKY_secp256k1go_Signature_Sign(p0, p1, p2, p3)
SKY_secp256k1go_Signature_Sign = _skycoin.SKY_secp256k1go_Signature_Sign

def SKY_secp256k1go_Signature_ParseBytes(p0, p1):
    return _skycoin.SKY_secp256k1go_Signature_ParseBytes(p0, p1)
SKY_secp256k1go_Signature_ParseBytes = _skycoin.SKY_secp256k1go_Signature_ParseBytes

def SKY_secp256k1go_Signature_Bytes(p0):
    return _skycoin.SKY_secp256k1go_Signature_Bytes(p0)
SKY_secp256k1go_Signature_Bytes = _skycoin.SKY_secp256k1go_Signature_Bytes

def SKY_secp256k1go_Number_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_Number_Print(p0, p1)
SKY_secp256k1go_Number_Print = _skycoin.SKY_secp256k1go_Number_Print

def SKY_secp256k1go_Number_SetHex(p0, p1):
    return _skycoin.SKY_secp256k1go_Number_SetHex(p0, p1)
SKY_secp256k1go_Number_SetHex = _skycoin.SKY_secp256k1go_Number_SetHex

def SKY_secp256k1go_Number_IsOdd(p0):
    return _skycoin.SKY_secp256k1go_Number_IsOdd(p0)
SKY_secp256k1go_Number_IsOdd = _skycoin.SKY_secp256k1go_Number_IsOdd

def SKY_wallet_CreateOptionsHandle(p0, p1, p2, p3, p4, p5, p6):
    return _skycoin.SKY_wallet_CreateOptionsHandle(p0, p1, p2, p3, p4, p5, p6)
SKY_wallet_CreateOptionsHandle = _skycoin.SKY_wallet_CreateOptionsHandle

def SKY_secp256k1go_XY_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_Print(p0, p1)
SKY_secp256k1go_XY_Print = _skycoin.SKY_secp256k1go_XY_Print

def SKY_secp256k1go_XY_ParsePubkey(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_ParsePubkey(p0, p1)
SKY_secp256k1go_XY_ParsePubkey = _skycoin.SKY_secp256k1go_XY_ParsePubkey

def SKY_secp256k1go_XY_Bytes(p0):
    return _skycoin.SKY_secp256k1go_XY_Bytes(p0)
SKY_secp256k1go_XY_Bytes = _skycoin.SKY_secp256k1go_XY_Bytes

def SKY_secp256k1go_XY_BytesUncompressed(p0):
    return _skycoin.SKY_secp256k1go_XY_BytesUncompressed(p0)
SKY_secp256k1go_XY_BytesUncompressed = _skycoin.SKY_secp256k1go_XY_BytesUncompressed

def SKY_secp256k1go_XY_SetXY(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XY_SetXY(p0, p1, p2)
SKY_secp256k1go_XY_SetXY = _skycoin.SKY_secp256k1go_XY_SetXY

def SKY_secp256k1go_XY_IsValid(p0):
    return _skycoin.SKY_secp256k1go_XY_IsValid(p0)
SKY_secp256k1go_XY_IsValid = _skycoin.SKY_secp256k1go_XY_IsValid

def SKY_secp256k1go_XY_SetXYZ(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_SetXYZ(p0, p1)
SKY_secp256k1go_XY_SetXYZ = _skycoin.SKY_secp256k1go_XY_SetXYZ

def SKY_secp256k1go_XY_Neg(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_Neg(p0, p1)
SKY_secp256k1go_XY_Neg = _skycoin.SKY_secp256k1go_XY_Neg

def SKY_secp256k1go_XY_SetXO(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XY_SetXO(p0, p1, p2)
SKY_secp256k1go_XY_SetXO = _skycoin.SKY_secp256k1go_XY_SetXO

def SKY_secp256k1go_XY_AddXY(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_AddXY(p0, p1)
SKY_secp256k1go_XY_AddXY = _skycoin.SKY_secp256k1go_XY_AddXY

def SKY_secp256k1go_XY_GetPublicKey(p0):
    return _skycoin.SKY_secp256k1go_XY_GetPublicKey(p0)
SKY_secp256k1go_XY_GetPublicKey = _skycoin.SKY_secp256k1go_XY_GetPublicKey

def SKY_wallet_Entry_Verify(p0):
    return _skycoin.SKY_wallet_Entry_Verify(p0)
SKY_wallet_Entry_Verify = _skycoin.SKY_wallet_Entry_Verify

def SKY_wallet_Entry_VerifyPublic(p0):
    return _skycoin.SKY_wallet_Entry_VerifyPublic(p0)
SKY_wallet_Entry_VerifyPublic = _skycoin.SKY_wallet_Entry_VerifyPublic

def SKY_wallet_CryptoTypeFromString(p0):
    return _skycoin.SKY_wallet_CryptoTypeFromString(p0)
SKY_wallet_CryptoTypeFromString = _skycoin.SKY_wallet_CryptoTypeFromString
class cipher__Address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher__Address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher__Address, name)
    __repr__ = _swig_repr

    def isEqual(self, a):
        return _skycoin.cipher__Address_isEqual(self, a)
    __swig_setmethods__["Version"] = _skycoin.cipher__Address_Version_set
    __swig_getmethods__["Version"] = _skycoin.cipher__Address_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.cipher__Address_Version_get, _skycoin.cipher__Address_Version_set)
    __swig_setmethods__["Key"] = _skycoin.cipher__Address_Key_set
    __swig_getmethods__["Key"] = _skycoin.cipher__Address_Key_get
    if _newclass:
        Key = _swig_property(_skycoin.cipher__Address_Key_get, _skycoin.cipher__Address_Key_set)

    def __init__(self):
        this = _skycoin.new_cipher__Address()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher__Address
    __del__ = lambda self: None
cipher__Address_swigregister = _skycoin.cipher__Address_swigregister
cipher__Address_swigregister(cipher__Address)

class chacha20poly1305__chacha20poly1305(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chacha20poly1305__chacha20poly1305, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chacha20poly1305__chacha20poly1305, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _skycoin.chacha20poly1305__chacha20poly1305_key_set
    __swig_getmethods__["key"] = _skycoin.chacha20poly1305__chacha20poly1305_key_get
    if _newclass:
        key = _swig_property(_skycoin.chacha20poly1305__chacha20poly1305_key_get, _skycoin.chacha20poly1305__chacha20poly1305_key_set)

    def __init__(self):
        this = _skycoin.new_chacha20poly1305__chacha20poly1305()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_chacha20poly1305__chacha20poly1305
    __del__ = lambda self: None
chacha20poly1305__chacha20poly1305_swigregister = _skycoin.chacha20poly1305__chacha20poly1305_swigregister
chacha20poly1305__chacha20poly1305_swigregister(chacha20poly1305__chacha20poly1305)

class encoder__coder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encoder__coder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encoder__coder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buf"] = _skycoin.encoder__coder_buf_set
    __swig_getmethods__["buf"] = _skycoin.encoder__coder_buf_get
    if _newclass:
        buf = _swig_property(_skycoin.encoder__coder_buf_get, _skycoin.encoder__coder_buf_set)

    def __init__(self):
        this = _skycoin.new_encoder__coder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_encoder__coder
    __del__ = lambda self: None
encoder__coder_swigregister = _skycoin.encoder__coder_swigregister
encoder__coder_swigregister(encoder__coder)

class encoder__StructField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encoder__StructField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encoder__StructField, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _skycoin.encoder__StructField_Name_set
    __swig_getmethods__["Name"] = _skycoin.encoder__StructField_Name_get
    if _newclass:
        Name = _swig_property(_skycoin.encoder__StructField_Name_get, _skycoin.encoder__StructField_Name_set)
    __swig_setmethods__["Kind"] = _skycoin.encoder__StructField_Kind_set
    __swig_getmethods__["Kind"] = _skycoin.encoder__StructField_Kind_get
    if _newclass:
        Kind = _swig_property(_skycoin.encoder__StructField_Kind_get, _skycoin.encoder__StructField_Kind_set)
    __swig_setmethods__["Type"] = _skycoin.encoder__StructField_Type_set
    __swig_getmethods__["Type"] = _skycoin.encoder__StructField_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.encoder__StructField_Type_get, _skycoin.encoder__StructField_Type_set)
    __swig_setmethods__["Tag"] = _skycoin.encoder__StructField_Tag_set
    __swig_getmethods__["Tag"] = _skycoin.encoder__StructField_Tag_get
    if _newclass:
        Tag = _swig_property(_skycoin.encoder__StructField_Tag_get, _skycoin.encoder__StructField_Tag_set)

    def __init__(self):
        this = _skycoin.new_encoder__StructField()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_encoder__StructField
    __del__ = lambda self: None
encoder__StructField_swigregister = _skycoin.encoder__StructField_swigregister
encoder__StructField_swigregister(encoder__StructField)

class encrypt__ScryptChacha20poly1305(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encrypt__ScryptChacha20poly1305, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encrypt__ScryptChacha20poly1305, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _skycoin.encrypt__ScryptChacha20poly1305_N_set
    __swig_getmethods__["N"] = _skycoin.encrypt__ScryptChacha20poly1305_N_get
    if _newclass:
        N = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_N_get, _skycoin.encrypt__ScryptChacha20poly1305_N_set)
    __swig_setmethods__["R"] = _skycoin.encrypt__ScryptChacha20poly1305_R_set
    __swig_getmethods__["R"] = _skycoin.encrypt__ScryptChacha20poly1305_R_get
    if _newclass:
        R = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_R_get, _skycoin.encrypt__ScryptChacha20poly1305_R_set)
    __swig_setmethods__["P"] = _skycoin.encrypt__ScryptChacha20poly1305_P_set
    __swig_getmethods__["P"] = _skycoin.encrypt__ScryptChacha20poly1305_P_get
    if _newclass:
        P = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_P_get, _skycoin.encrypt__ScryptChacha20poly1305_P_set)
    __swig_setmethods__["KeyLen"] = _skycoin.encrypt__ScryptChacha20poly1305_KeyLen_set
    __swig_getmethods__["KeyLen"] = _skycoin.encrypt__ScryptChacha20poly1305_KeyLen_get
    if _newclass:
        KeyLen = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_KeyLen_get, _skycoin.encrypt__ScryptChacha20poly1305_KeyLen_set)

    def __init__(self):
        this = _skycoin.new_encrypt__ScryptChacha20poly1305()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_encrypt__ScryptChacha20poly1305
    __del__ = lambda self: None
encrypt__ScryptChacha20poly1305_swigregister = _skycoin.encrypt__ScryptChacha20poly1305_swigregister
encrypt__ScryptChacha20poly1305_swigregister(encrypt__ScryptChacha20poly1305)

class encrypt__meta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encrypt__meta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encrypt__meta, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _skycoin.encrypt__meta_N_set
    __swig_getmethods__["N"] = _skycoin.encrypt__meta_N_get
    if _newclass:
        N = _swig_property(_skycoin.encrypt__meta_N_get, _skycoin.encrypt__meta_N_set)
    __swig_setmethods__["R"] = _skycoin.encrypt__meta_R_set
    __swig_getmethods__["R"] = _skycoin.encrypt__meta_R_get
    if _newclass:
        R = _swig_property(_skycoin.encrypt__meta_R_get, _skycoin.encrypt__meta_R_set)
    __swig_setmethods__["P"] = _skycoin.encrypt__meta_P_set
    __swig_getmethods__["P"] = _skycoin.encrypt__meta_P_get
    if _newclass:
        P = _swig_property(_skycoin.encrypt__meta_P_get, _skycoin.encrypt__meta_P_set)
    __swig_setmethods__["KeyLen"] = _skycoin.encrypt__meta_KeyLen_set
    __swig_getmethods__["KeyLen"] = _skycoin.encrypt__meta_KeyLen_get
    if _newclass:
        KeyLen = _swig_property(_skycoin.encrypt__meta_KeyLen_get, _skycoin.encrypt__meta_KeyLen_set)
    __swig_setmethods__["Salt"] = _skycoin.encrypt__meta_Salt_set
    __swig_getmethods__["Salt"] = _skycoin.encrypt__meta_Salt_get
    if _newclass:
        Salt = _swig_property(_skycoin.encrypt__meta_Salt_get, _skycoin.encrypt__meta_Salt_set)
    __swig_setmethods__["Nonce"] = _skycoin.encrypt__meta_Nonce_set
    __swig_getmethods__["Nonce"] = _skycoin.encrypt__meta_Nonce_get
    if _newclass:
        Nonce = _swig_property(_skycoin.encrypt__meta_Nonce_get, _skycoin.encrypt__meta_Nonce_set)

    def __init__(self):
        this = _skycoin.new_encrypt__meta()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_encrypt__meta
    __del__ = lambda self: None
encrypt__meta_swigregister = _skycoin.encrypt__meta_swigregister
encrypt__meta_swigregister(encrypt__meta)

class encrypt__Sha256Xor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encrypt__Sha256Xor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encrypt__Sha256Xor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_encrypt__Sha256Xor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_encrypt__Sha256Xor
    __del__ = lambda self: None
encrypt__Sha256Xor_swigregister = _skycoin.encrypt__Sha256Xor_swigregister
encrypt__Sha256Xor_swigregister(encrypt__Sha256Xor)

class secp256k1go__Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, secp256k1go__Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, secp256k1go__Field, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _skycoin.secp256k1go__Field_n_set
    __swig_getmethods__["n"] = _skycoin.secp256k1go__Field_n_get
    if _newclass:
        n = _swig_property(_skycoin.secp256k1go__Field_n_get, _skycoin.secp256k1go__Field_n_set)

    def __init__(self):
        this = _skycoin.new_secp256k1go__Field()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_secp256k1go__Field
    __del__ = lambda self: None
secp256k1go__Field_swigregister = _skycoin.secp256k1go__Field_swigregister
secp256k1go__Field_swigregister(secp256k1go__Field)

class secp256k1go__XY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, secp256k1go__XY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, secp256k1go__XY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _skycoin.secp256k1go__XY_X_set
    __swig_getmethods__["X"] = _skycoin.secp256k1go__XY_X_get
    if _newclass:
        X = _swig_property(_skycoin.secp256k1go__XY_X_get, _skycoin.secp256k1go__XY_X_set)
    __swig_setmethods__["Y"] = _skycoin.secp256k1go__XY_Y_set
    __swig_getmethods__["Y"] = _skycoin.secp256k1go__XY_Y_get
    if _newclass:
        Y = _swig_property(_skycoin.secp256k1go__XY_Y_get, _skycoin.secp256k1go__XY_Y_set)
    __swig_setmethods__["Infinity"] = _skycoin.secp256k1go__XY_Infinity_set
    __swig_getmethods__["Infinity"] = _skycoin.secp256k1go__XY_Infinity_get
    if _newclass:
        Infinity = _swig_property(_skycoin.secp256k1go__XY_Infinity_get, _skycoin.secp256k1go__XY_Infinity_set)

    def __init__(self):
        this = _skycoin.new_secp256k1go__XY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_secp256k1go__XY
    __del__ = lambda self: None
secp256k1go__XY_swigregister = _skycoin.secp256k1go__XY_swigregister
secp256k1go__XY_swigregister(secp256k1go__XY)

class secp256k1go__XYZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, secp256k1go__XYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, secp256k1go__XYZ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _skycoin.secp256k1go__XYZ_X_set
    __swig_getmethods__["X"] = _skycoin.secp256k1go__XYZ_X_get
    if _newclass:
        X = _swig_property(_skycoin.secp256k1go__XYZ_X_get, _skycoin.secp256k1go__XYZ_X_set)
    __swig_setmethods__["Y"] = _skycoin.secp256k1go__XYZ_Y_set
    __swig_getmethods__["Y"] = _skycoin.secp256k1go__XYZ_Y_get
    if _newclass:
        Y = _swig_property(_skycoin.secp256k1go__XYZ_Y_get, _skycoin.secp256k1go__XYZ_Y_set)
    __swig_setmethods__["Z"] = _skycoin.secp256k1go__XYZ_Z_set
    __swig_getmethods__["Z"] = _skycoin.secp256k1go__XYZ_Z_get
    if _newclass:
        Z = _swig_property(_skycoin.secp256k1go__XYZ_Z_get, _skycoin.secp256k1go__XYZ_Z_set)
    __swig_setmethods__["Infinity"] = _skycoin.secp256k1go__XYZ_Infinity_set
    __swig_getmethods__["Infinity"] = _skycoin.secp256k1go__XYZ_Infinity_get
    if _newclass:
        Infinity = _swig_property(_skycoin.secp256k1go__XYZ_Infinity_get, _skycoin.secp256k1go__XYZ_Infinity_set)

    def __init__(self):
        this = _skycoin.new_secp256k1go__XYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_secp256k1go__XYZ
    __del__ = lambda self: None
secp256k1go__XYZ_swigregister = _skycoin.secp256k1go__XYZ_swigregister
secp256k1go__XYZ_swigregister(secp256k1go__XYZ)

class coin__SortableTransactions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__SortableTransactions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__SortableTransactions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txns"] = _skycoin.coin__SortableTransactions_Txns_set
    __swig_getmethods__["Txns"] = _skycoin.coin__SortableTransactions_Txns_get
    if _newclass:
        Txns = _swig_property(_skycoin.coin__SortableTransactions_Txns_get, _skycoin.coin__SortableTransactions_Txns_set)
    __swig_setmethods__["Fees"] = _skycoin.coin__SortableTransactions_Fees_set
    __swig_getmethods__["Fees"] = _skycoin.coin__SortableTransactions_Fees_get
    if _newclass:
        Fees = _swig_property(_skycoin.coin__SortableTransactions_Fees_get, _skycoin.coin__SortableTransactions_Fees_set)
    __swig_setmethods__["Hashes"] = _skycoin.coin__SortableTransactions_Hashes_set
    __swig_getmethods__["Hashes"] = _skycoin.coin__SortableTransactions_Hashes_get
    if _newclass:
        Hashes = _swig_property(_skycoin.coin__SortableTransactions_Hashes_get, _skycoin.coin__SortableTransactions_Hashes_set)

    def __init__(self):
        this = _skycoin.new_coin__SortableTransactions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__SortableTransactions
    __del__ = lambda self: None
coin__SortableTransactions_swigregister = _skycoin.coin__SortableTransactions_swigregister
coin__SortableTransactions_swigregister(coin__SortableTransactions)

class coin__Transaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__Transaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__Transaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Length"] = _skycoin.coin__Transaction_Length_set
    __swig_getmethods__["Length"] = _skycoin.coin__Transaction_Length_get
    if _newclass:
        Length = _swig_property(_skycoin.coin__Transaction_Length_get, _skycoin.coin__Transaction_Length_set)
    __swig_setmethods__["Type"] = _skycoin.coin__Transaction_Type_set
    __swig_getmethods__["Type"] = _skycoin.coin__Transaction_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.coin__Transaction_Type_get, _skycoin.coin__Transaction_Type_set)
    __swig_setmethods__["InnerHash"] = _skycoin.coin__Transaction_InnerHash_set
    __swig_getmethods__["InnerHash"] = _skycoin.coin__Transaction_InnerHash_get
    if _newclass:
        InnerHash = _swig_property(_skycoin.coin__Transaction_InnerHash_get, _skycoin.coin__Transaction_InnerHash_set)
    __swig_setmethods__["Sigs"] = _skycoin.coin__Transaction_Sigs_set
    __swig_getmethods__["Sigs"] = _skycoin.coin__Transaction_Sigs_get
    if _newclass:
        Sigs = _swig_property(_skycoin.coin__Transaction_Sigs_get, _skycoin.coin__Transaction_Sigs_set)
    __swig_setmethods__["In"] = _skycoin.coin__Transaction_In_set
    __swig_getmethods__["In"] = _skycoin.coin__Transaction_In_get
    if _newclass:
        In = _swig_property(_skycoin.coin__Transaction_In_get, _skycoin.coin__Transaction_In_set)
    __swig_setmethods__["Out"] = _skycoin.coin__Transaction_Out_set
    __swig_getmethods__["Out"] = _skycoin.coin__Transaction_Out_get
    if _newclass:
        Out = _swig_property(_skycoin.coin__Transaction_Out_get, _skycoin.coin__Transaction_Out_set)

    def __init__(self):
        this = _skycoin.new_coin__Transaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__Transaction
    __del__ = lambda self: None
coin__Transaction_swigregister = _skycoin.coin__Transaction_swigregister
coin__Transaction_swigregister(coin__Transaction)

class coin__TransactionOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__TransactionOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__TransactionOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.coin__TransactionOutput_Address_set
    __swig_getmethods__["Address"] = _skycoin.coin__TransactionOutput_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.coin__TransactionOutput_Address_get, _skycoin.coin__TransactionOutput_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.coin__TransactionOutput_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.coin__TransactionOutput_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.coin__TransactionOutput_Coins_get, _skycoin.coin__TransactionOutput_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.coin__TransactionOutput_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.coin__TransactionOutput_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.coin__TransactionOutput_Hours_get, _skycoin.coin__TransactionOutput_Hours_set)

    def __init__(self):
        this = _skycoin.new_coin__TransactionOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__TransactionOutput
    __del__ = lambda self: None
coin__TransactionOutput_swigregister = _skycoin.coin__TransactionOutput_swigregister
coin__TransactionOutput_swigregister(coin__TransactionOutput)

class coin__HashPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__HashPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__HashPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.coin__HashPair_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.coin__HashPair_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.coin__HashPair_Hash_get, _skycoin.coin__HashPair_Hash_set)
    __swig_setmethods__["PreHash"] = _skycoin.coin__HashPair_PreHash_set
    __swig_getmethods__["PreHash"] = _skycoin.coin__HashPair_PreHash_get
    if _newclass:
        PreHash = _swig_property(_skycoin.coin__HashPair_PreHash_get, _skycoin.coin__HashPair_PreHash_set)

    def __init__(self):
        this = _skycoin.new_coin__HashPair()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__HashPair
    __del__ = lambda self: None
coin__HashPair_swigregister = _skycoin.coin__HashPair_swigregister
coin__HashPair_swigregister(coin__HashPair)

class coin__BlockHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__BlockHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__BlockHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Version"] = _skycoin.coin__BlockHeader_Version_set
    __swig_getmethods__["Version"] = _skycoin.coin__BlockHeader_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.coin__BlockHeader_Version_get, _skycoin.coin__BlockHeader_Version_set)
    __swig_setmethods__["Time"] = _skycoin.coin__BlockHeader_Time_set
    __swig_getmethods__["Time"] = _skycoin.coin__BlockHeader_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.coin__BlockHeader_Time_get, _skycoin.coin__BlockHeader_Time_set)
    __swig_setmethods__["BkSeq"] = _skycoin.coin__BlockHeader_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.coin__BlockHeader_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.coin__BlockHeader_BkSeq_get, _skycoin.coin__BlockHeader_BkSeq_set)
    __swig_setmethods__["Fee"] = _skycoin.coin__BlockHeader_Fee_set
    __swig_getmethods__["Fee"] = _skycoin.coin__BlockHeader_Fee_get
    if _newclass:
        Fee = _swig_property(_skycoin.coin__BlockHeader_Fee_get, _skycoin.coin__BlockHeader_Fee_set)
    __swig_setmethods__["PrevHash"] = _skycoin.coin__BlockHeader_PrevHash_set
    __swig_getmethods__["PrevHash"] = _skycoin.coin__BlockHeader_PrevHash_get
    if _newclass:
        PrevHash = _swig_property(_skycoin.coin__BlockHeader_PrevHash_get, _skycoin.coin__BlockHeader_PrevHash_set)
    __swig_setmethods__["BodyHash"] = _skycoin.coin__BlockHeader_BodyHash_set
    __swig_getmethods__["BodyHash"] = _skycoin.coin__BlockHeader_BodyHash_get
    if _newclass:
        BodyHash = _swig_property(_skycoin.coin__BlockHeader_BodyHash_get, _skycoin.coin__BlockHeader_BodyHash_set)
    __swig_setmethods__["UxHash"] = _skycoin.coin__BlockHeader_UxHash_set
    __swig_getmethods__["UxHash"] = _skycoin.coin__BlockHeader_UxHash_get
    if _newclass:
        UxHash = _swig_property(_skycoin.coin__BlockHeader_UxHash_get, _skycoin.coin__BlockHeader_UxHash_set)

    def __init__(self):
        this = _skycoin.new_coin__BlockHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__BlockHeader
    __del__ = lambda self: None
coin__BlockHeader_swigregister = _skycoin.coin__BlockHeader_swigregister
coin__BlockHeader_swigregister(coin__BlockHeader)

class coin__BlockBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__BlockBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__BlockBody, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Transactions"] = _skycoin.coin__BlockBody_Transactions_set
    __swig_getmethods__["Transactions"] = _skycoin.coin__BlockBody_Transactions_get
    if _newclass:
        Transactions = _swig_property(_skycoin.coin__BlockBody_Transactions_get, _skycoin.coin__BlockBody_Transactions_set)

    def __init__(self):
        this = _skycoin.new_coin__BlockBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__BlockBody
    __del__ = lambda self: None
coin__BlockBody_swigregister = _skycoin.coin__BlockBody_swigregister
coin__BlockBody_swigregister(coin__BlockBody)

class coin__Block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__Block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__Block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Head"] = _skycoin.coin__Block_Head_set
    __swig_getmethods__["Head"] = _skycoin.coin__Block_Head_get
    if _newclass:
        Head = _swig_property(_skycoin.coin__Block_Head_get, _skycoin.coin__Block_Head_set)
    __swig_setmethods__["Body"] = _skycoin.coin__Block_Body_set
    __swig_getmethods__["Body"] = _skycoin.coin__Block_Body_get
    if _newclass:
        Body = _swig_property(_skycoin.coin__Block_Body_get, _skycoin.coin__Block_Body_set)

    def __init__(self):
        this = _skycoin.new_coin__Block()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__Block
    __del__ = lambda self: None
coin__Block_swigregister = _skycoin.coin__Block_swigregister
coin__Block_swigregister(coin__Block)

class coin__SignedBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__SignedBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__SignedBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_unnamed"] = _skycoin.coin__SignedBlock__unnamed_set
    __swig_getmethods__["_unnamed"] = _skycoin.coin__SignedBlock__unnamed_get
    if _newclass:
        _unnamed = _swig_property(_skycoin.coin__SignedBlock__unnamed_get, _skycoin.coin__SignedBlock__unnamed_set)
    __swig_setmethods__["Sig"] = _skycoin.coin__SignedBlock_Sig_set
    __swig_getmethods__["Sig"] = _skycoin.coin__SignedBlock_Sig_get
    if _newclass:
        Sig = _swig_property(_skycoin.coin__SignedBlock_Sig_get, _skycoin.coin__SignedBlock_Sig_set)

    def __init__(self):
        this = _skycoin.new_coin__SignedBlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__SignedBlock
    __del__ = lambda self: None
coin__SignedBlock_swigregister = _skycoin.coin__SignedBlock_swigregister
coin__SignedBlock_swigregister(coin__SignedBlock)

class coin__UxHead(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__UxHead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__UxHead, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Time"] = _skycoin.coin__UxHead_Time_set
    __swig_getmethods__["Time"] = _skycoin.coin__UxHead_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.coin__UxHead_Time_get, _skycoin.coin__UxHead_Time_set)
    __swig_setmethods__["BkSeq"] = _skycoin.coin__UxHead_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.coin__UxHead_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.coin__UxHead_BkSeq_get, _skycoin.coin__UxHead_BkSeq_set)

    def __init__(self):
        this = _skycoin.new_coin__UxHead()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__UxHead
    __del__ = lambda self: None
coin__UxHead_swigregister = _skycoin.coin__UxHead_swigregister
coin__UxHead_swigregister(coin__UxHead)

class coin__UxBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__UxBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__UxBody, name)
    __repr__ = _swig_repr
    __swig_setmethods__["SrcTransaction"] = _skycoin.coin__UxBody_SrcTransaction_set
    __swig_getmethods__["SrcTransaction"] = _skycoin.coin__UxBody_SrcTransaction_get
    if _newclass:
        SrcTransaction = _swig_property(_skycoin.coin__UxBody_SrcTransaction_get, _skycoin.coin__UxBody_SrcTransaction_set)
    __swig_setmethods__["Address"] = _skycoin.coin__UxBody_Address_set
    __swig_getmethods__["Address"] = _skycoin.coin__UxBody_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.coin__UxBody_Address_get, _skycoin.coin__UxBody_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.coin__UxBody_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.coin__UxBody_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.coin__UxBody_Coins_get, _skycoin.coin__UxBody_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.coin__UxBody_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.coin__UxBody_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.coin__UxBody_Hours_get, _skycoin.coin__UxBody_Hours_set)

    def __init__(self):
        this = _skycoin.new_coin__UxBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__UxBody
    __del__ = lambda self: None
coin__UxBody_swigregister = _skycoin.coin__UxBody_swigregister
coin__UxBody_swigregister(coin__UxBody)

class coin__UxOut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__UxOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__UxOut, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Head"] = _skycoin.coin__UxOut_Head_set
    __swig_getmethods__["Head"] = _skycoin.coin__UxOut_Head_get
    if _newclass:
        Head = _swig_property(_skycoin.coin__UxOut_Head_get, _skycoin.coin__UxOut_Head_set)
    __swig_setmethods__["Body"] = _skycoin.coin__UxOut_Body_set
    __swig_getmethods__["Body"] = _skycoin.coin__UxOut_Body_get
    if _newclass:
        Body = _swig_property(_skycoin.coin__UxOut_Body_get, _skycoin.coin__UxOut_Body_set)

    def __init__(self):
        this = _skycoin.new_coin__UxOut()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__UxOut
    __del__ = lambda self: None
coin__UxOut_swigregister = _skycoin.coin__UxOut_swigregister
coin__UxOut_swigregister(coin__UxOut)

class consensus__BlockStatQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, consensus__BlockStatQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, consensus__BlockStatQueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queue"] = _skycoin.consensus__BlockStatQueue_queue_set
    __swig_getmethods__["queue"] = _skycoin.consensus__BlockStatQueue_queue_get
    if _newclass:
        queue = _swig_property(_skycoin.consensus__BlockStatQueue_queue_get, _skycoin.consensus__BlockStatQueue_queue_set)

    def __init__(self):
        this = _skycoin.new_consensus__BlockStatQueue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_consensus__BlockStatQueue
    __del__ = lambda self: None
consensus__BlockStatQueue_swigregister = _skycoin.consensus__BlockStatQueue_swigregister
consensus__BlockStatQueue_swigregister(consensus__BlockStatQueue)

class consensus__BlockBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, consensus__BlockBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, consensus__BlockBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Sig"] = _skycoin.consensus__BlockBase_Sig_set
    __swig_getmethods__["Sig"] = _skycoin.consensus__BlockBase_Sig_get
    if _newclass:
        Sig = _swig_property(_skycoin.consensus__BlockBase_Sig_get, _skycoin.consensus__BlockBase_Sig_set)
    __swig_setmethods__["Hash"] = _skycoin.consensus__BlockBase_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.consensus__BlockBase_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.consensus__BlockBase_Hash_get, _skycoin.consensus__BlockBase_Hash_set)
    __swig_setmethods__["Seqno"] = _skycoin.consensus__BlockBase_Seqno_set
    __swig_getmethods__["Seqno"] = _skycoin.consensus__BlockBase_Seqno_get
    if _newclass:
        Seqno = _swig_property(_skycoin.consensus__BlockBase_Seqno_get, _skycoin.consensus__BlockBase_Seqno_set)

    def __init__(self):
        this = _skycoin.new_consensus__BlockBase()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_consensus__BlockBase
    __del__ = lambda self: None
consensus__BlockBase_swigregister = _skycoin.consensus__BlockBase_swigregister
consensus__BlockBase_swigregister(consensus__BlockBase)

class httphelper__Address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, httphelper__Address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, httphelper__Address, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_unnamed"] = _skycoin.httphelper__Address__unnamed_set
    __swig_getmethods__["_unnamed"] = _skycoin.httphelper__Address__unnamed_get
    if _newclass:
        _unnamed = _swig_property(_skycoin.httphelper__Address__unnamed_get, _skycoin.httphelper__Address__unnamed_set)

    def __init__(self):
        this = _skycoin.new_httphelper__Address()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_httphelper__Address
    __del__ = lambda self: None
httphelper__Address_swigregister = _skycoin.httphelper__Address_swigregister
httphelper__Address_swigregister(httphelper__Address)

class logging__ColorScheme(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, logging__ColorScheme, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, logging__ColorScheme, name)
    __repr__ = _swig_repr
    __swig_setmethods__["InfoLevelStyle"] = _skycoin.logging__ColorScheme_InfoLevelStyle_set
    __swig_getmethods__["InfoLevelStyle"] = _skycoin.logging__ColorScheme_InfoLevelStyle_get
    if _newclass:
        InfoLevelStyle = _swig_property(_skycoin.logging__ColorScheme_InfoLevelStyle_get, _skycoin.logging__ColorScheme_InfoLevelStyle_set)
    __swig_setmethods__["WarnLevelStyle"] = _skycoin.logging__ColorScheme_WarnLevelStyle_set
    __swig_getmethods__["WarnLevelStyle"] = _skycoin.logging__ColorScheme_WarnLevelStyle_get
    if _newclass:
        WarnLevelStyle = _swig_property(_skycoin.logging__ColorScheme_WarnLevelStyle_get, _skycoin.logging__ColorScheme_WarnLevelStyle_set)
    __swig_setmethods__["ErrorLevelStyle"] = _skycoin.logging__ColorScheme_ErrorLevelStyle_set
    __swig_getmethods__["ErrorLevelStyle"] = _skycoin.logging__ColorScheme_ErrorLevelStyle_get
    if _newclass:
        ErrorLevelStyle = _swig_property(_skycoin.logging__ColorScheme_ErrorLevelStyle_get, _skycoin.logging__ColorScheme_ErrorLevelStyle_set)
    __swig_setmethods__["FatalLevelStyle"] = _skycoin.logging__ColorScheme_FatalLevelStyle_set
    __swig_getmethods__["FatalLevelStyle"] = _skycoin.logging__ColorScheme_FatalLevelStyle_get
    if _newclass:
        FatalLevelStyle = _swig_property(_skycoin.logging__ColorScheme_FatalLevelStyle_get, _skycoin.logging__ColorScheme_FatalLevelStyle_set)
    __swig_setmethods__["PanicLevelStyle"] = _skycoin.logging__ColorScheme_PanicLevelStyle_set
    __swig_getmethods__["PanicLevelStyle"] = _skycoin.logging__ColorScheme_PanicLevelStyle_get
    if _newclass:
        PanicLevelStyle = _swig_property(_skycoin.logging__ColorScheme_PanicLevelStyle_get, _skycoin.logging__ColorScheme_PanicLevelStyle_set)
    __swig_setmethods__["DebugLevelStyle"] = _skycoin.logging__ColorScheme_DebugLevelStyle_set
    __swig_getmethods__["DebugLevelStyle"] = _skycoin.logging__ColorScheme_DebugLevelStyle_get
    if _newclass:
        DebugLevelStyle = _swig_property(_skycoin.logging__ColorScheme_DebugLevelStyle_get, _skycoin.logging__ColorScheme_DebugLevelStyle_set)
    __swig_setmethods__["PrefixStyle"] = _skycoin.logging__ColorScheme_PrefixStyle_set
    __swig_getmethods__["PrefixStyle"] = _skycoin.logging__ColorScheme_PrefixStyle_get
    if _newclass:
        PrefixStyle = _swig_property(_skycoin.logging__ColorScheme_PrefixStyle_get, _skycoin.logging__ColorScheme_PrefixStyle_set)
    __swig_setmethods__["TimestampStyle"] = _skycoin.logging__ColorScheme_TimestampStyle_set
    __swig_getmethods__["TimestampStyle"] = _skycoin.logging__ColorScheme_TimestampStyle_get
    if _newclass:
        TimestampStyle = _swig_property(_skycoin.logging__ColorScheme_TimestampStyle_get, _skycoin.logging__ColorScheme_TimestampStyle_set)
    __swig_setmethods__["CallContextStyle"] = _skycoin.logging__ColorScheme_CallContextStyle_set
    __swig_getmethods__["CallContextStyle"] = _skycoin.logging__ColorScheme_CallContextStyle_get
    if _newclass:
        CallContextStyle = _swig_property(_skycoin.logging__ColorScheme_CallContextStyle_get, _skycoin.logging__ColorScheme_CallContextStyle_set)
    __swig_setmethods__["CriticalStyle"] = _skycoin.logging__ColorScheme_CriticalStyle_set
    __swig_getmethods__["CriticalStyle"] = _skycoin.logging__ColorScheme_CriticalStyle_get
    if _newclass:
        CriticalStyle = _swig_property(_skycoin.logging__ColorScheme_CriticalStyle_get, _skycoin.logging__ColorScheme_CriticalStyle_set)

    def __init__(self):
        this = _skycoin.new_logging__ColorScheme()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_logging__ColorScheme
    __del__ = lambda self: None
logging__ColorScheme_swigregister = _skycoin.logging__ColorScheme_swigregister
logging__ColorScheme_swigregister(logging__ColorScheme)

class visor__BlockchainConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__BlockchainConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__BlockchainConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Arbitrating"] = _skycoin.visor__BlockchainConfig_Arbitrating_set
    __swig_getmethods__["Arbitrating"] = _skycoin.visor__BlockchainConfig_Arbitrating_get
    if _newclass:
        Arbitrating = _swig_property(_skycoin.visor__BlockchainConfig_Arbitrating_get, _skycoin.visor__BlockchainConfig_Arbitrating_set)
    __swig_setmethods__["Pubkey"] = _skycoin.visor__BlockchainConfig_Pubkey_set
    __swig_getmethods__["Pubkey"] = _skycoin.visor__BlockchainConfig_Pubkey_get
    if _newclass:
        Pubkey = _swig_property(_skycoin.visor__BlockchainConfig_Pubkey_get, _skycoin.visor__BlockchainConfig_Pubkey_set)

    def __init__(self):
        this = _skycoin.new_visor__BlockchainConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__BlockchainConfig
    __del__ = lambda self: None
visor__BlockchainConfig_swigregister = _skycoin.visor__BlockchainConfig_swigregister
visor__BlockchainConfig_swigregister(visor__BlockchainConfig)

class visor__sigHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__sigHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__sigHash, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sig"] = _skycoin.visor__sigHash_sig_set
    __swig_getmethods__["sig"] = _skycoin.visor__sigHash_sig_get
    if _newclass:
        sig = _swig_property(_skycoin.visor__sigHash_sig_get, _skycoin.visor__sigHash_sig_set)
    __swig_setmethods__["hash"] = _skycoin.visor__sigHash_hash_set
    __swig_getmethods__["hash"] = _skycoin.visor__sigHash_hash_get
    if _newclass:
        hash = _swig_property(_skycoin.visor__sigHash_hash_get, _skycoin.visor__sigHash_hash_set)

    def __init__(self):
        this = _skycoin.new_visor__sigHash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__sigHash
    __del__ = lambda self: None
visor__sigHash_swigregister = _skycoin.visor__sigHash_swigregister
visor__sigHash_swigregister(visor__sigHash)

class visor__BuildInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__BuildInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__BuildInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Version"] = _skycoin.visor__BuildInfo_Version_set
    __swig_getmethods__["Version"] = _skycoin.visor__BuildInfo_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.visor__BuildInfo_Version_get, _skycoin.visor__BuildInfo_Version_set)
    __swig_setmethods__["Commit"] = _skycoin.visor__BuildInfo_Commit_set
    __swig_getmethods__["Commit"] = _skycoin.visor__BuildInfo_Commit_get
    if _newclass:
        Commit = _swig_property(_skycoin.visor__BuildInfo_Commit_get, _skycoin.visor__BuildInfo_Commit_set)
    __swig_setmethods__["Branch"] = _skycoin.visor__BuildInfo_Branch_set
    __swig_getmethods__["Branch"] = _skycoin.visor__BuildInfo_Branch_get
    if _newclass:
        Branch = _swig_property(_skycoin.visor__BuildInfo_Branch_get, _skycoin.visor__BuildInfo_Branch_set)

    def __init__(self):
        this = _skycoin.new_visor__BuildInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__BuildInfo
    __del__ = lambda self: None
visor__BuildInfo_swigregister = _skycoin.visor__BuildInfo_swigregister
visor__BuildInfo_swigregister(visor__BuildInfo)

class visor__addrsFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__addrsFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__addrsFilter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Addrs"] = _skycoin.visor__addrsFilter_Addrs_set
    __swig_getmethods__["Addrs"] = _skycoin.visor__addrsFilter_Addrs_get
    if _newclass:
        Addrs = _swig_property(_skycoin.visor__addrsFilter_Addrs_get, _skycoin.visor__addrsFilter_Addrs_set)

    def __init__(self):
        this = _skycoin.new_visor__addrsFilter()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__addrsFilter
    __del__ = lambda self: None
visor__addrsFilter_swigregister = _skycoin.visor__addrsFilter_swigregister
visor__addrsFilter_swigregister(visor__addrsFilter)

class blockdb__ErrMissingSignature(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blockdb__ErrMissingSignature, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blockdb__ErrMissingSignature, name)
    __repr__ = _swig_repr
    __swig_setmethods__["b"] = _skycoin.blockdb__ErrMissingSignature_b_set
    __swig_getmethods__["b"] = _skycoin.blockdb__ErrMissingSignature_b_get
    if _newclass:
        b = _swig_property(_skycoin.blockdb__ErrMissingSignature_b_get, _skycoin.blockdb__ErrMissingSignature_b_set)

    def __init__(self):
        this = _skycoin.new_blockdb__ErrMissingSignature()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_blockdb__ErrMissingSignature
    __del__ = lambda self: None
blockdb__ErrMissingSignature_swigregister = _skycoin.blockdb__ErrMissingSignature_swigregister
blockdb__ErrMissingSignature_swigregister(blockdb__ErrMissingSignature)

class blockdb__blockSigs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blockdb__blockSigs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blockdb__blockSigs, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_blockdb__blockSigs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_blockdb__blockSigs
    __del__ = lambda self: None
blockdb__blockSigs_swigregister = _skycoin.blockdb__blockSigs_swigregister
blockdb__blockSigs_swigregister(blockdb__blockSigs)

class blockdb__blockTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blockdb__blockTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blockdb__blockTree, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_blockdb__blockTree()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_blockdb__blockTree
    __del__ = lambda self: None
blockdb__blockTree_swigregister = _skycoin.blockdb__blockTree_swigregister
blockdb__blockTree_swigregister(blockdb__blockTree)

class blockdb__ErrUnspentNotExist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blockdb__ErrUnspentNotExist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blockdb__ErrUnspentNotExist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["UxID"] = _skycoin.blockdb__ErrUnspentNotExist_UxID_set
    __swig_getmethods__["UxID"] = _skycoin.blockdb__ErrUnspentNotExist_UxID_get
    if _newclass:
        UxID = _swig_property(_skycoin.blockdb__ErrUnspentNotExist_UxID_get, _skycoin.blockdb__ErrUnspentNotExist_UxID_set)

    def __init__(self):
        this = _skycoin.new_blockdb__ErrUnspentNotExist()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_blockdb__ErrUnspentNotExist
    __del__ = lambda self: None
blockdb__ErrUnspentNotExist_swigregister = _skycoin.blockdb__ErrUnspentNotExist_swigregister
blockdb__ErrUnspentNotExist_swigregister(blockdb__ErrUnspentNotExist)

class blockdb__unspentMeta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blockdb__unspentMeta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blockdb__unspentMeta, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_blockdb__unspentMeta()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_blockdb__unspentMeta
    __del__ = lambda self: None
blockdb__unspentMeta_swigregister = _skycoin.blockdb__unspentMeta_swigregister
blockdb__unspentMeta_swigregister(blockdb__unspentMeta)

class blockdb__pool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blockdb__pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blockdb__pool, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_blockdb__pool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_blockdb__pool
    __del__ = lambda self: None
blockdb__pool_swigregister = _skycoin.blockdb__pool_swigregister
blockdb__pool_swigregister(blockdb__pool)

class blockdb__poolAddrIndex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blockdb__poolAddrIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blockdb__poolAddrIndex, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_blockdb__poolAddrIndex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_blockdb__poolAddrIndex
    __del__ = lambda self: None
blockdb__poolAddrIndex_swigregister = _skycoin.blockdb__poolAddrIndex_swigregister
blockdb__poolAddrIndex_swigregister(blockdb__poolAddrIndex)

class visor__ErrCorruptDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ErrCorruptDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ErrCorruptDB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_unnamed"] = _skycoin.visor__ErrCorruptDB__unnamed_set
    __swig_getmethods__["_unnamed"] = _skycoin.visor__ErrCorruptDB__unnamed_get
    if _newclass:
        _unnamed = _swig_property(_skycoin.visor__ErrCorruptDB__unnamed_get, _skycoin.visor__ErrCorruptDB__unnamed_set)

    def __init__(self):
        this = _skycoin.new_visor__ErrCorruptDB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ErrCorruptDB
    __del__ = lambda self: None
visor__ErrCorruptDB_swigregister = _skycoin.visor__ErrCorruptDB_swigregister
visor__ErrCorruptDB_swigregister(visor__ErrCorruptDB)

class historydb__addressTxns(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__addressTxns, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__addressTxns, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_historydb__addressTxns()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__addressTxns
    __del__ = lambda self: None
historydb__addressTxns_swigregister = _skycoin.historydb__addressTxns_swigregister
historydb__addressTxns_swigregister(historydb__addressTxns)

class historydb__addressUx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__addressUx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__addressUx, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_historydb__addressUx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__addressUx
    __del__ = lambda self: None
historydb__addressUx_swigregister = _skycoin.historydb__addressUx_swigregister
historydb__addressUx_swigregister(historydb__addressUx)

class historydb__historyMeta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__historyMeta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__historyMeta, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_historydb__historyMeta()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__historyMeta
    __del__ = lambda self: None
historydb__historyMeta_swigregister = _skycoin.historydb__historyMeta_swigregister
historydb__historyMeta_swigregister(historydb__historyMeta)

class historydb__UxOutJSON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__UxOutJSON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__UxOutJSON, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Uxid"] = _skycoin.historydb__UxOutJSON_Uxid_set
    __swig_getmethods__["Uxid"] = _skycoin.historydb__UxOutJSON_Uxid_get
    if _newclass:
        Uxid = _swig_property(_skycoin.historydb__UxOutJSON_Uxid_get, _skycoin.historydb__UxOutJSON_Uxid_set)
    __swig_setmethods__["Time"] = _skycoin.historydb__UxOutJSON_Time_set
    __swig_getmethods__["Time"] = _skycoin.historydb__UxOutJSON_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.historydb__UxOutJSON_Time_get, _skycoin.historydb__UxOutJSON_Time_set)
    __swig_setmethods__["SrcBkSeq"] = _skycoin.historydb__UxOutJSON_SrcBkSeq_set
    __swig_getmethods__["SrcBkSeq"] = _skycoin.historydb__UxOutJSON_SrcBkSeq_get
    if _newclass:
        SrcBkSeq = _swig_property(_skycoin.historydb__UxOutJSON_SrcBkSeq_get, _skycoin.historydb__UxOutJSON_SrcBkSeq_set)
    __swig_setmethods__["SrcTx"] = _skycoin.historydb__UxOutJSON_SrcTx_set
    __swig_getmethods__["SrcTx"] = _skycoin.historydb__UxOutJSON_SrcTx_get
    if _newclass:
        SrcTx = _swig_property(_skycoin.historydb__UxOutJSON_SrcTx_get, _skycoin.historydb__UxOutJSON_SrcTx_set)
    __swig_setmethods__["OwnerAddress"] = _skycoin.historydb__UxOutJSON_OwnerAddress_set
    __swig_getmethods__["OwnerAddress"] = _skycoin.historydb__UxOutJSON_OwnerAddress_get
    if _newclass:
        OwnerAddress = _swig_property(_skycoin.historydb__UxOutJSON_OwnerAddress_get, _skycoin.historydb__UxOutJSON_OwnerAddress_set)
    __swig_setmethods__["Coins"] = _skycoin.historydb__UxOutJSON_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.historydb__UxOutJSON_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.historydb__UxOutJSON_Coins_get, _skycoin.historydb__UxOutJSON_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.historydb__UxOutJSON_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.historydb__UxOutJSON_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.historydb__UxOutJSON_Hours_get, _skycoin.historydb__UxOutJSON_Hours_set)
    __swig_setmethods__["SpentBlockSeq"] = _skycoin.historydb__UxOutJSON_SpentBlockSeq_set
    __swig_getmethods__["SpentBlockSeq"] = _skycoin.historydb__UxOutJSON_SpentBlockSeq_get
    if _newclass:
        SpentBlockSeq = _swig_property(_skycoin.historydb__UxOutJSON_SpentBlockSeq_get, _skycoin.historydb__UxOutJSON_SpentBlockSeq_set)
    __swig_setmethods__["SpentTxID"] = _skycoin.historydb__UxOutJSON_SpentTxID_set
    __swig_getmethods__["SpentTxID"] = _skycoin.historydb__UxOutJSON_SpentTxID_get
    if _newclass:
        SpentTxID = _swig_property(_skycoin.historydb__UxOutJSON_SpentTxID_get, _skycoin.historydb__UxOutJSON_SpentTxID_set)

    def __init__(self):
        this = _skycoin.new_historydb__UxOutJSON()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__UxOutJSON
    __del__ = lambda self: None
historydb__UxOutJSON_swigregister = _skycoin.historydb__UxOutJSON_swigregister
historydb__UxOutJSON_swigregister(historydb__UxOutJSON)

class historydb__UxOuts(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__UxOuts, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__UxOuts, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_historydb__UxOuts()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__UxOuts
    __del__ = lambda self: None
historydb__UxOuts_swigregister = _skycoin.historydb__UxOuts_swigregister
historydb__UxOuts_swigregister(historydb__UxOuts)

class historydb__UxOut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__UxOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__UxOut, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Out"] = _skycoin.historydb__UxOut_Out_set
    __swig_getmethods__["Out"] = _skycoin.historydb__UxOut_Out_get
    if _newclass:
        Out = _swig_property(_skycoin.historydb__UxOut_Out_get, _skycoin.historydb__UxOut_Out_set)
    __swig_setmethods__["SpentTxID"] = _skycoin.historydb__UxOut_SpentTxID_set
    __swig_getmethods__["SpentTxID"] = _skycoin.historydb__UxOut_SpentTxID_get
    if _newclass:
        SpentTxID = _swig_property(_skycoin.historydb__UxOut_SpentTxID_get, _skycoin.historydb__UxOut_SpentTxID_set)
    __swig_setmethods__["SpentBlockSeq"] = _skycoin.historydb__UxOut_SpentBlockSeq_set
    __swig_getmethods__["SpentBlockSeq"] = _skycoin.historydb__UxOut_SpentBlockSeq_get
    if _newclass:
        SpentBlockSeq = _swig_property(_skycoin.historydb__UxOut_SpentBlockSeq_get, _skycoin.historydb__UxOut_SpentBlockSeq_set)

    def __init__(self):
        this = _skycoin.new_historydb__UxOut()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__UxOut
    __del__ = lambda self: None
historydb__UxOut_swigregister = _skycoin.historydb__UxOut_swigregister
historydb__UxOut_swigregister(historydb__UxOut)

class historydb__transactions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__transactions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__transactions, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_historydb__transactions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__transactions
    __del__ = lambda self: None
historydb__transactions_swigregister = _skycoin.historydb__transactions_swigregister
historydb__transactions_swigregister(historydb__transactions)

class historydb__Transaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, historydb__Transaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, historydb__Transaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Tx"] = _skycoin.historydb__Transaction_Tx_set
    __swig_getmethods__["Tx"] = _skycoin.historydb__Transaction_Tx_get
    if _newclass:
        Tx = _swig_property(_skycoin.historydb__Transaction_Tx_get, _skycoin.historydb__Transaction_Tx_set)
    __swig_setmethods__["BlockSeq"] = _skycoin.historydb__Transaction_BlockSeq_set
    __swig_getmethods__["BlockSeq"] = _skycoin.historydb__Transaction_BlockSeq_get
    if _newclass:
        BlockSeq = _swig_property(_skycoin.historydb__Transaction_BlockSeq_get, _skycoin.historydb__Transaction_BlockSeq_set)

    def __init__(self):
        this = _skycoin.new_historydb__Transaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_historydb__Transaction
    __del__ = lambda self: None
historydb__Transaction_swigregister = _skycoin.historydb__Transaction_swigregister
historydb__Transaction_swigregister(historydb__Transaction)

class visor__TransactionStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__TransactionStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__TransactionStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Confirmed"] = _skycoin.visor__TransactionStatus_Confirmed_set
    __swig_getmethods__["Confirmed"] = _skycoin.visor__TransactionStatus_Confirmed_get
    if _newclass:
        Confirmed = _swig_property(_skycoin.visor__TransactionStatus_Confirmed_get, _skycoin.visor__TransactionStatus_Confirmed_set)
    __swig_setmethods__["Unconfirmed"] = _skycoin.visor__TransactionStatus_Unconfirmed_set
    __swig_getmethods__["Unconfirmed"] = _skycoin.visor__TransactionStatus_Unconfirmed_get
    if _newclass:
        Unconfirmed = _swig_property(_skycoin.visor__TransactionStatus_Unconfirmed_get, _skycoin.visor__TransactionStatus_Unconfirmed_set)
    __swig_setmethods__["Height"] = _skycoin.visor__TransactionStatus_Height_set
    __swig_getmethods__["Height"] = _skycoin.visor__TransactionStatus_Height_get
    if _newclass:
        Height = _swig_property(_skycoin.visor__TransactionStatus_Height_get, _skycoin.visor__TransactionStatus_Height_set)
    __swig_setmethods__["BlockSeq"] = _skycoin.visor__TransactionStatus_BlockSeq_set
    __swig_getmethods__["BlockSeq"] = _skycoin.visor__TransactionStatus_BlockSeq_get
    if _newclass:
        BlockSeq = _swig_property(_skycoin.visor__TransactionStatus_BlockSeq_get, _skycoin.visor__TransactionStatus_BlockSeq_set)
    __swig_setmethods__["Unknown"] = _skycoin.visor__TransactionStatus_Unknown_set
    __swig_getmethods__["Unknown"] = _skycoin.visor__TransactionStatus_Unknown_get
    if _newclass:
        Unknown = _swig_property(_skycoin.visor__TransactionStatus_Unknown_get, _skycoin.visor__TransactionStatus_Unknown_set)

    def __init__(self):
        this = _skycoin.new_visor__TransactionStatus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__TransactionStatus
    __del__ = lambda self: None
visor__TransactionStatus_swigregister = _skycoin.visor__TransactionStatus_swigregister
visor__TransactionStatus_swigregister(visor__TransactionStatus)

class visor__ReadableTransactionOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableTransactionOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableTransactionOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.visor__ReadableTransactionOutput_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.visor__ReadableTransactionOutput_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.visor__ReadableTransactionOutput_Hash_get, _skycoin.visor__ReadableTransactionOutput_Hash_set)
    __swig_setmethods__["Address"] = _skycoin.visor__ReadableTransactionOutput_Address_set
    __swig_getmethods__["Address"] = _skycoin.visor__ReadableTransactionOutput_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.visor__ReadableTransactionOutput_Address_get, _skycoin.visor__ReadableTransactionOutput_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.visor__ReadableTransactionOutput_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.visor__ReadableTransactionOutput_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.visor__ReadableTransactionOutput_Coins_get, _skycoin.visor__ReadableTransactionOutput_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.visor__ReadableTransactionOutput_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.visor__ReadableTransactionOutput_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.visor__ReadableTransactionOutput_Hours_get, _skycoin.visor__ReadableTransactionOutput_Hours_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableTransactionOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableTransactionOutput
    __del__ = lambda self: None
visor__ReadableTransactionOutput_swigregister = _skycoin.visor__ReadableTransactionOutput_swigregister
visor__ReadableTransactionOutput_swigregister(visor__ReadableTransactionOutput)

class visor__ReadableTransactionInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableTransactionInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableTransactionInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.visor__ReadableTransactionInput_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.visor__ReadableTransactionInput_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.visor__ReadableTransactionInput_Hash_get, _skycoin.visor__ReadableTransactionInput_Hash_set)
    __swig_setmethods__["Address"] = _skycoin.visor__ReadableTransactionInput_Address_set
    __swig_getmethods__["Address"] = _skycoin.visor__ReadableTransactionInput_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.visor__ReadableTransactionInput_Address_get, _skycoin.visor__ReadableTransactionInput_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.visor__ReadableTransactionInput_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.visor__ReadableTransactionInput_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.visor__ReadableTransactionInput_Coins_get, _skycoin.visor__ReadableTransactionInput_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.visor__ReadableTransactionInput_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.visor__ReadableTransactionInput_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.visor__ReadableTransactionInput_Hours_get, _skycoin.visor__ReadableTransactionInput_Hours_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableTransactionInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableTransactionInput
    __del__ = lambda self: None
visor__ReadableTransactionInput_swigregister = _skycoin.visor__ReadableTransactionInput_swigregister
visor__ReadableTransactionInput_swigregister(visor__ReadableTransactionInput)

class visor__ReadableOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.visor__ReadableOutput_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.visor__ReadableOutput_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.visor__ReadableOutput_Hash_get, _skycoin.visor__ReadableOutput_Hash_set)
    __swig_setmethods__["Time"] = _skycoin.visor__ReadableOutput_Time_set
    __swig_getmethods__["Time"] = _skycoin.visor__ReadableOutput_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.visor__ReadableOutput_Time_get, _skycoin.visor__ReadableOutput_Time_set)
    __swig_setmethods__["BkSeq"] = _skycoin.visor__ReadableOutput_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.visor__ReadableOutput_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.visor__ReadableOutput_BkSeq_get, _skycoin.visor__ReadableOutput_BkSeq_set)
    __swig_setmethods__["SourceTransaction"] = _skycoin.visor__ReadableOutput_SourceTransaction_set
    __swig_getmethods__["SourceTransaction"] = _skycoin.visor__ReadableOutput_SourceTransaction_get
    if _newclass:
        SourceTransaction = _swig_property(_skycoin.visor__ReadableOutput_SourceTransaction_get, _skycoin.visor__ReadableOutput_SourceTransaction_set)
    __swig_setmethods__["Address"] = _skycoin.visor__ReadableOutput_Address_set
    __swig_getmethods__["Address"] = _skycoin.visor__ReadableOutput_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.visor__ReadableOutput_Address_get, _skycoin.visor__ReadableOutput_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.visor__ReadableOutput_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.visor__ReadableOutput_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.visor__ReadableOutput_Coins_get, _skycoin.visor__ReadableOutput_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.visor__ReadableOutput_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.visor__ReadableOutput_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.visor__ReadableOutput_Hours_get, _skycoin.visor__ReadableOutput_Hours_set)
    __swig_setmethods__["CalculatedHours"] = _skycoin.visor__ReadableOutput_CalculatedHours_set
    __swig_getmethods__["CalculatedHours"] = _skycoin.visor__ReadableOutput_CalculatedHours_get
    if _newclass:
        CalculatedHours = _swig_property(_skycoin.visor__ReadableOutput_CalculatedHours_get, _skycoin.visor__ReadableOutput_CalculatedHours_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableOutput
    __del__ = lambda self: None
visor__ReadableOutput_swigregister = _skycoin.visor__ReadableOutput_swigregister
visor__ReadableOutput_swigregister(visor__ReadableOutput)

class visor__ReadableTransaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableTransaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableTransaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Length"] = _skycoin.visor__ReadableTransaction_Length_set
    __swig_getmethods__["Length"] = _skycoin.visor__ReadableTransaction_Length_get
    if _newclass:
        Length = _swig_property(_skycoin.visor__ReadableTransaction_Length_get, _skycoin.visor__ReadableTransaction_Length_set)
    __swig_setmethods__["Type"] = _skycoin.visor__ReadableTransaction_Type_set
    __swig_getmethods__["Type"] = _skycoin.visor__ReadableTransaction_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.visor__ReadableTransaction_Type_get, _skycoin.visor__ReadableTransaction_Type_set)
    __swig_setmethods__["Hash"] = _skycoin.visor__ReadableTransaction_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.visor__ReadableTransaction_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.visor__ReadableTransaction_Hash_get, _skycoin.visor__ReadableTransaction_Hash_set)
    __swig_setmethods__["InnerHash"] = _skycoin.visor__ReadableTransaction_InnerHash_set
    __swig_getmethods__["InnerHash"] = _skycoin.visor__ReadableTransaction_InnerHash_get
    if _newclass:
        InnerHash = _swig_property(_skycoin.visor__ReadableTransaction_InnerHash_get, _skycoin.visor__ReadableTransaction_InnerHash_set)
    __swig_setmethods__["Timestamp"] = _skycoin.visor__ReadableTransaction_Timestamp_set
    __swig_getmethods__["Timestamp"] = _skycoin.visor__ReadableTransaction_Timestamp_get
    if _newclass:
        Timestamp = _swig_property(_skycoin.visor__ReadableTransaction_Timestamp_get, _skycoin.visor__ReadableTransaction_Timestamp_set)
    __swig_setmethods__["Sigs"] = _skycoin.visor__ReadableTransaction_Sigs_set
    __swig_getmethods__["Sigs"] = _skycoin.visor__ReadableTransaction_Sigs_get
    if _newclass:
        Sigs = _swig_property(_skycoin.visor__ReadableTransaction_Sigs_get, _skycoin.visor__ReadableTransaction_Sigs_set)
    __swig_setmethods__["In"] = _skycoin.visor__ReadableTransaction_In_set
    __swig_getmethods__["In"] = _skycoin.visor__ReadableTransaction_In_get
    if _newclass:
        In = _swig_property(_skycoin.visor__ReadableTransaction_In_get, _skycoin.visor__ReadableTransaction_In_set)
    __swig_setmethods__["Out"] = _skycoin.visor__ReadableTransaction_Out_set
    __swig_getmethods__["Out"] = _skycoin.visor__ReadableTransaction_Out_get
    if _newclass:
        Out = _swig_property(_skycoin.visor__ReadableTransaction_Out_get, _skycoin.visor__ReadableTransaction_Out_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableTransaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableTransaction
    __del__ = lambda self: None
visor__ReadableTransaction_swigregister = _skycoin.visor__ReadableTransaction_swigregister
visor__ReadableTransaction_swigregister(visor__ReadableTransaction)

class visor__ReadableBlockHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableBlockHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableBlockHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BkSeq"] = _skycoin.visor__ReadableBlockHeader_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.visor__ReadableBlockHeader_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.visor__ReadableBlockHeader_BkSeq_get, _skycoin.visor__ReadableBlockHeader_BkSeq_set)
    __swig_setmethods__["BlockHash"] = _skycoin.visor__ReadableBlockHeader_BlockHash_set
    __swig_getmethods__["BlockHash"] = _skycoin.visor__ReadableBlockHeader_BlockHash_get
    if _newclass:
        BlockHash = _swig_property(_skycoin.visor__ReadableBlockHeader_BlockHash_get, _skycoin.visor__ReadableBlockHeader_BlockHash_set)
    __swig_setmethods__["PreviousBlockHash"] = _skycoin.visor__ReadableBlockHeader_PreviousBlockHash_set
    __swig_getmethods__["PreviousBlockHash"] = _skycoin.visor__ReadableBlockHeader_PreviousBlockHash_get
    if _newclass:
        PreviousBlockHash = _swig_property(_skycoin.visor__ReadableBlockHeader_PreviousBlockHash_get, _skycoin.visor__ReadableBlockHeader_PreviousBlockHash_set)
    __swig_setmethods__["Time"] = _skycoin.visor__ReadableBlockHeader_Time_set
    __swig_getmethods__["Time"] = _skycoin.visor__ReadableBlockHeader_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.visor__ReadableBlockHeader_Time_get, _skycoin.visor__ReadableBlockHeader_Time_set)
    __swig_setmethods__["Fee"] = _skycoin.visor__ReadableBlockHeader_Fee_set
    __swig_getmethods__["Fee"] = _skycoin.visor__ReadableBlockHeader_Fee_get
    if _newclass:
        Fee = _swig_property(_skycoin.visor__ReadableBlockHeader_Fee_get, _skycoin.visor__ReadableBlockHeader_Fee_set)
    __swig_setmethods__["Version"] = _skycoin.visor__ReadableBlockHeader_Version_set
    __swig_getmethods__["Version"] = _skycoin.visor__ReadableBlockHeader_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.visor__ReadableBlockHeader_Version_get, _skycoin.visor__ReadableBlockHeader_Version_set)
    __swig_setmethods__["BodyHash"] = _skycoin.visor__ReadableBlockHeader_BodyHash_set
    __swig_getmethods__["BodyHash"] = _skycoin.visor__ReadableBlockHeader_BodyHash_get
    if _newclass:
        BodyHash = _swig_property(_skycoin.visor__ReadableBlockHeader_BodyHash_get, _skycoin.visor__ReadableBlockHeader_BodyHash_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableBlockHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableBlockHeader
    __del__ = lambda self: None
visor__ReadableBlockHeader_swigregister = _skycoin.visor__ReadableBlockHeader_swigregister
visor__ReadableBlockHeader_swigregister(visor__ReadableBlockHeader)

class visor__ReadableBlockBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableBlockBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableBlockBody, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Transactions"] = _skycoin.visor__ReadableBlockBody_Transactions_set
    __swig_getmethods__["Transactions"] = _skycoin.visor__ReadableBlockBody_Transactions_get
    if _newclass:
        Transactions = _swig_property(_skycoin.visor__ReadableBlockBody_Transactions_get, _skycoin.visor__ReadableBlockBody_Transactions_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableBlockBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableBlockBody
    __del__ = lambda self: None
visor__ReadableBlockBody_swigregister = _skycoin.visor__ReadableBlockBody_swigregister
visor__ReadableBlockBody_swigregister(visor__ReadableBlockBody)

class visor__ReadableBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Head"] = _skycoin.visor__ReadableBlock_Head_set
    __swig_getmethods__["Head"] = _skycoin.visor__ReadableBlock_Head_get
    if _newclass:
        Head = _swig_property(_skycoin.visor__ReadableBlock_Head_get, _skycoin.visor__ReadableBlock_Head_set)
    __swig_setmethods__["Body"] = _skycoin.visor__ReadableBlock_Body_set
    __swig_getmethods__["Body"] = _skycoin.visor__ReadableBlock_Body_get
    if _newclass:
        Body = _swig_property(_skycoin.visor__ReadableBlock_Body_get, _skycoin.visor__ReadableBlock_Body_set)
    __swig_setmethods__["Size"] = _skycoin.visor__ReadableBlock_Size_set
    __swig_getmethods__["Size"] = _skycoin.visor__ReadableBlock_Size_get
    if _newclass:
        Size = _swig_property(_skycoin.visor__ReadableBlock_Size_get, _skycoin.visor__ReadableBlock_Size_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableBlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableBlock
    __del__ = lambda self: None
visor__ReadableBlock_swigregister = _skycoin.visor__ReadableBlock_swigregister
visor__ReadableBlock_swigregister(visor__ReadableBlock)

class visor__ReadableBlocks(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableBlocks, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableBlocks, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Blocks"] = _skycoin.visor__ReadableBlocks_Blocks_set
    __swig_getmethods__["Blocks"] = _skycoin.visor__ReadableBlocks_Blocks_get
    if _newclass:
        Blocks = _swig_property(_skycoin.visor__ReadableBlocks_Blocks_get, _skycoin.visor__ReadableBlocks_Blocks_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableBlocks()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableBlocks
    __del__ = lambda self: None
visor__ReadableBlocks_swigregister = _skycoin.visor__ReadableBlocks_swigregister
visor__ReadableBlocks_swigregister(visor__ReadableBlocks)

class visor__TransactionOutputJSON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__TransactionOutputJSON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__TransactionOutputJSON, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.visor__TransactionOutputJSON_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.visor__TransactionOutputJSON_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.visor__TransactionOutputJSON_Hash_get, _skycoin.visor__TransactionOutputJSON_Hash_set)
    __swig_setmethods__["SourceTransaction"] = _skycoin.visor__TransactionOutputJSON_SourceTransaction_set
    __swig_getmethods__["SourceTransaction"] = _skycoin.visor__TransactionOutputJSON_SourceTransaction_get
    if _newclass:
        SourceTransaction = _swig_property(_skycoin.visor__TransactionOutputJSON_SourceTransaction_get, _skycoin.visor__TransactionOutputJSON_SourceTransaction_set)
    __swig_setmethods__["Address"] = _skycoin.visor__TransactionOutputJSON_Address_set
    __swig_getmethods__["Address"] = _skycoin.visor__TransactionOutputJSON_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.visor__TransactionOutputJSON_Address_get, _skycoin.visor__TransactionOutputJSON_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.visor__TransactionOutputJSON_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.visor__TransactionOutputJSON_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.visor__TransactionOutputJSON_Coins_get, _skycoin.visor__TransactionOutputJSON_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.visor__TransactionOutputJSON_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.visor__TransactionOutputJSON_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.visor__TransactionOutputJSON_Hours_get, _skycoin.visor__TransactionOutputJSON_Hours_set)

    def __init__(self):
        this = _skycoin.new_visor__TransactionOutputJSON()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__TransactionOutputJSON
    __del__ = lambda self: None
visor__TransactionOutputJSON_swigregister = _skycoin.visor__TransactionOutputJSON_swigregister
visor__TransactionOutputJSON_swigregister(visor__TransactionOutputJSON)

class visor__TransactionJSON(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__TransactionJSON, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__TransactionJSON, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.visor__TransactionJSON_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.visor__TransactionJSON_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.visor__TransactionJSON_Hash_get, _skycoin.visor__TransactionJSON_Hash_set)
    __swig_setmethods__["InnerHash"] = _skycoin.visor__TransactionJSON_InnerHash_set
    __swig_getmethods__["InnerHash"] = _skycoin.visor__TransactionJSON_InnerHash_get
    if _newclass:
        InnerHash = _swig_property(_skycoin.visor__TransactionJSON_InnerHash_get, _skycoin.visor__TransactionJSON_InnerHash_set)
    __swig_setmethods__["Sigs"] = _skycoin.visor__TransactionJSON_Sigs_set
    __swig_getmethods__["Sigs"] = _skycoin.visor__TransactionJSON_Sigs_get
    if _newclass:
        Sigs = _swig_property(_skycoin.visor__TransactionJSON_Sigs_get, _skycoin.visor__TransactionJSON_Sigs_set)
    __swig_setmethods__["In"] = _skycoin.visor__TransactionJSON_In_set
    __swig_getmethods__["In"] = _skycoin.visor__TransactionJSON_In_get
    if _newclass:
        In = _swig_property(_skycoin.visor__TransactionJSON_In_get, _skycoin.visor__TransactionJSON_In_set)
    __swig_setmethods__["Out"] = _skycoin.visor__TransactionJSON_Out_set
    __swig_getmethods__["Out"] = _skycoin.visor__TransactionJSON_Out_get
    if _newclass:
        Out = _swig_property(_skycoin.visor__TransactionJSON_Out_get, _skycoin.visor__TransactionJSON_Out_set)

    def __init__(self):
        this = _skycoin.new_visor__TransactionJSON()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__TransactionJSON
    __del__ = lambda self: None
visor__TransactionJSON_swigregister = _skycoin.visor__TransactionJSON_swigregister
visor__TransactionJSON_swigregister(visor__TransactionJSON)

class visor__BlockchainMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__BlockchainMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__BlockchainMetadata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Head"] = _skycoin.visor__BlockchainMetadata_Head_set
    __swig_getmethods__["Head"] = _skycoin.visor__BlockchainMetadata_Head_get
    if _newclass:
        Head = _swig_property(_skycoin.visor__BlockchainMetadata_Head_get, _skycoin.visor__BlockchainMetadata_Head_set)
    __swig_setmethods__["Unspents"] = _skycoin.visor__BlockchainMetadata_Unspents_set
    __swig_getmethods__["Unspents"] = _skycoin.visor__BlockchainMetadata_Unspents_get
    if _newclass:
        Unspents = _swig_property(_skycoin.visor__BlockchainMetadata_Unspents_get, _skycoin.visor__BlockchainMetadata_Unspents_set)
    __swig_setmethods__["Unconfirmed"] = _skycoin.visor__BlockchainMetadata_Unconfirmed_set
    __swig_getmethods__["Unconfirmed"] = _skycoin.visor__BlockchainMetadata_Unconfirmed_get
    if _newclass:
        Unconfirmed = _swig_property(_skycoin.visor__BlockchainMetadata_Unconfirmed_get, _skycoin.visor__BlockchainMetadata_Unconfirmed_set)

    def __init__(self):
        this = _skycoin.new_visor__BlockchainMetadata()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__BlockchainMetadata
    __del__ = lambda self: None
visor__BlockchainMetadata_swigregister = _skycoin.visor__BlockchainMetadata_swigregister
visor__BlockchainMetadata_swigregister(visor__BlockchainMetadata)

class visor__ReadableOutputSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ReadableOutputSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ReadableOutputSet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HeadOutputs"] = _skycoin.visor__ReadableOutputSet_HeadOutputs_set
    __swig_getmethods__["HeadOutputs"] = _skycoin.visor__ReadableOutputSet_HeadOutputs_get
    if _newclass:
        HeadOutputs = _swig_property(_skycoin.visor__ReadableOutputSet_HeadOutputs_get, _skycoin.visor__ReadableOutputSet_HeadOutputs_set)
    __swig_setmethods__["OutgoingOutputs"] = _skycoin.visor__ReadableOutputSet_OutgoingOutputs_set
    __swig_getmethods__["OutgoingOutputs"] = _skycoin.visor__ReadableOutputSet_OutgoingOutputs_get
    if _newclass:
        OutgoingOutputs = _swig_property(_skycoin.visor__ReadableOutputSet_OutgoingOutputs_get, _skycoin.visor__ReadableOutputSet_OutgoingOutputs_set)
    __swig_setmethods__["IncomingOutputs"] = _skycoin.visor__ReadableOutputSet_IncomingOutputs_set
    __swig_getmethods__["IncomingOutputs"] = _skycoin.visor__ReadableOutputSet_IncomingOutputs_get
    if _newclass:
        IncomingOutputs = _swig_property(_skycoin.visor__ReadableOutputSet_IncomingOutputs_get, _skycoin.visor__ReadableOutputSet_IncomingOutputs_set)

    def __init__(self):
        this = _skycoin.new_visor__ReadableOutputSet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ReadableOutputSet
    __del__ = lambda self: None
visor__ReadableOutputSet_swigregister = _skycoin.visor__ReadableOutputSet_swigregister
visor__ReadableOutputSet_swigregister(visor__ReadableOutputSet)

class visor__Transaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__Transaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__Transaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txn"] = _skycoin.visor__Transaction_Txn_set
    __swig_getmethods__["Txn"] = _skycoin.visor__Transaction_Txn_get
    if _newclass:
        Txn = _swig_property(_skycoin.visor__Transaction_Txn_get, _skycoin.visor__Transaction_Txn_set)
    __swig_setmethods__["Status"] = _skycoin.visor__Transaction_Status_set
    __swig_getmethods__["Status"] = _skycoin.visor__Transaction_Status_get
    if _newclass:
        Status = _swig_property(_skycoin.visor__Transaction_Status_get, _skycoin.visor__Transaction_Status_set)
    __swig_setmethods__["Time"] = _skycoin.visor__Transaction_Time_set
    __swig_getmethods__["Time"] = _skycoin.visor__Transaction_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.visor__Transaction_Time_get, _skycoin.visor__Transaction_Time_set)
    __swig_setmethods__["Size"] = _skycoin.visor__Transaction_Size_set
    __swig_getmethods__["Size"] = _skycoin.visor__Transaction_Size_get
    if _newclass:
        Size = _swig_property(_skycoin.visor__Transaction_Size_get, _skycoin.visor__Transaction_Size_set)

    def __init__(self):
        this = _skycoin.new_visor__Transaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__Transaction
    __del__ = lambda self: None
visor__Transaction_swigregister = _skycoin.visor__Transaction_swigregister
visor__Transaction_swigregister(visor__Transaction)

class visor__RichlistBalance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__RichlistBalance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__RichlistBalance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.visor__RichlistBalance_Address_set
    __swig_getmethods__["Address"] = _skycoin.visor__RichlistBalance_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.visor__RichlistBalance_Address_get, _skycoin.visor__RichlistBalance_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.visor__RichlistBalance_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.visor__RichlistBalance_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.visor__RichlistBalance_Coins_get, _skycoin.visor__RichlistBalance_Coins_set)
    __swig_setmethods__["Locked"] = _skycoin.visor__RichlistBalance_Locked_set
    __swig_getmethods__["Locked"] = _skycoin.visor__RichlistBalance_Locked_get
    if _newclass:
        Locked = _swig_property(_skycoin.visor__RichlistBalance_Locked_get, _skycoin.visor__RichlistBalance_Locked_set)
    __swig_setmethods__["coins"] = _skycoin.visor__RichlistBalance_coins_set
    __swig_getmethods__["coins"] = _skycoin.visor__RichlistBalance_coins_get
    if _newclass:
        coins = _swig_property(_skycoin.visor__RichlistBalance_coins_get, _skycoin.visor__RichlistBalance_coins_set)

    def __init__(self):
        this = _skycoin.new_visor__RichlistBalance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__RichlistBalance
    __del__ = lambda self: None
visor__RichlistBalance_swigregister = _skycoin.visor__RichlistBalance_swigregister
visor__RichlistBalance_swigregister(visor__RichlistBalance)

class visor__unconfirmedTxns(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__unconfirmedTxns, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__unconfirmedTxns, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_visor__unconfirmedTxns()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__unconfirmedTxns
    __del__ = lambda self: None
visor__unconfirmedTxns_swigregister = _skycoin.visor__unconfirmedTxns_swigregister
visor__unconfirmedTxns_swigregister(visor__unconfirmedTxns)

class visor__txUnspents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__txUnspents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__txUnspents, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_visor__txUnspents()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__txUnspents
    __del__ = lambda self: None
visor__txUnspents_swigregister = _skycoin.visor__txUnspents_swigregister
visor__txUnspents_swigregister(visor__txUnspents)

class visor__UnconfirmedTxn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__UnconfirmedTxn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__UnconfirmedTxn, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txn"] = _skycoin.visor__UnconfirmedTxn_Txn_set
    __swig_getmethods__["Txn"] = _skycoin.visor__UnconfirmedTxn_Txn_get
    if _newclass:
        Txn = _swig_property(_skycoin.visor__UnconfirmedTxn_Txn_get, _skycoin.visor__UnconfirmedTxn_Txn_set)
    __swig_setmethods__["Received"] = _skycoin.visor__UnconfirmedTxn_Received_set
    __swig_getmethods__["Received"] = _skycoin.visor__UnconfirmedTxn_Received_get
    if _newclass:
        Received = _swig_property(_skycoin.visor__UnconfirmedTxn_Received_get, _skycoin.visor__UnconfirmedTxn_Received_set)
    __swig_setmethods__["Checked"] = _skycoin.visor__UnconfirmedTxn_Checked_set
    __swig_getmethods__["Checked"] = _skycoin.visor__UnconfirmedTxn_Checked_get
    if _newclass:
        Checked = _swig_property(_skycoin.visor__UnconfirmedTxn_Checked_get, _skycoin.visor__UnconfirmedTxn_Checked_set)
    __swig_setmethods__["Announced"] = _skycoin.visor__UnconfirmedTxn_Announced_set
    __swig_getmethods__["Announced"] = _skycoin.visor__UnconfirmedTxn_Announced_get
    if _newclass:
        Announced = _swig_property(_skycoin.visor__UnconfirmedTxn_Announced_get, _skycoin.visor__UnconfirmedTxn_Announced_set)
    __swig_setmethods__["IsValid"] = _skycoin.visor__UnconfirmedTxn_IsValid_set
    __swig_getmethods__["IsValid"] = _skycoin.visor__UnconfirmedTxn_IsValid_get
    if _newclass:
        IsValid = _swig_property(_skycoin.visor__UnconfirmedTxn_IsValid_get, _skycoin.visor__UnconfirmedTxn_IsValid_set)

    def __init__(self):
        this = _skycoin.new_visor__UnconfirmedTxn()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__UnconfirmedTxn
    __del__ = lambda self: None
visor__UnconfirmedTxn_swigregister = _skycoin.visor__UnconfirmedTxn_swigregister
visor__UnconfirmedTxn_swigregister(visor__UnconfirmedTxn)

class visor__ErrTxnViolatesHardConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ErrTxnViolatesHardConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ErrTxnViolatesHardConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Err"] = _skycoin.visor__ErrTxnViolatesHardConstraint_Err_set
    __swig_getmethods__["Err"] = _skycoin.visor__ErrTxnViolatesHardConstraint_Err_get
    if _newclass:
        Err = _swig_property(_skycoin.visor__ErrTxnViolatesHardConstraint_Err_get, _skycoin.visor__ErrTxnViolatesHardConstraint_Err_set)

    def __init__(self):
        this = _skycoin.new_visor__ErrTxnViolatesHardConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ErrTxnViolatesHardConstraint
    __del__ = lambda self: None
visor__ErrTxnViolatesHardConstraint_swigregister = _skycoin.visor__ErrTxnViolatesHardConstraint_swigregister
visor__ErrTxnViolatesHardConstraint_swigregister(visor__ErrTxnViolatesHardConstraint)

class visor__ErrTxnViolatesSoftConstraint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, visor__ErrTxnViolatesSoftConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, visor__ErrTxnViolatesSoftConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Err"] = _skycoin.visor__ErrTxnViolatesSoftConstraint_Err_set
    __swig_getmethods__["Err"] = _skycoin.visor__ErrTxnViolatesSoftConstraint_Err_get
    if _newclass:
        Err = _swig_property(_skycoin.visor__ErrTxnViolatesSoftConstraint_Err_get, _skycoin.visor__ErrTxnViolatesSoftConstraint_Err_set)

    def __init__(self):
        this = _skycoin.new_visor__ErrTxnViolatesSoftConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_visor__ErrTxnViolatesSoftConstraint
    __del__ = lambda self: None
visor__ErrTxnViolatesSoftConstraint_swigregister = _skycoin.visor__ErrTxnViolatesSoftConstraint_swigregister
visor__ErrTxnViolatesSoftConstraint_swigregister(visor__ErrTxnViolatesSoftConstraint)

class gnet__MessageContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gnet__MessageContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gnet__MessageContext, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ConnID"] = _skycoin.gnet__MessageContext_ConnID_set
    __swig_getmethods__["ConnID"] = _skycoin.gnet__MessageContext_ConnID_get
    if _newclass:
        ConnID = _swig_property(_skycoin.gnet__MessageContext_ConnID_get, _skycoin.gnet__MessageContext_ConnID_set)
    __swig_setmethods__["Addr"] = _skycoin.gnet__MessageContext_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.gnet__MessageContext_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.gnet__MessageContext_Addr_get, _skycoin.gnet__MessageContext_Addr_set)

    def __init__(self):
        this = _skycoin.new_gnet__MessageContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_gnet__MessageContext
    __del__ = lambda self: None
gnet__MessageContext_swigregister = _skycoin.gnet__MessageContext_swigregister
gnet__MessageContext_swigregister(gnet__MessageContext)

class daemon__MessagesConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__MessagesConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__MessagesConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Messages"] = _skycoin.daemon__MessagesConfig_Messages_set
    __swig_getmethods__["Messages"] = _skycoin.daemon__MessagesConfig_Messages_get
    if _newclass:
        Messages = _swig_property(_skycoin.daemon__MessagesConfig_Messages_get, _skycoin.daemon__MessagesConfig_Messages_set)

    def __init__(self):
        this = _skycoin.new_daemon__MessagesConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__MessagesConfig
    __del__ = lambda self: None
daemon__MessagesConfig_swigregister = _skycoin.daemon__MessagesConfig_swigregister
daemon__MessagesConfig_swigregister(daemon__MessagesConfig)

class daemon__Messages(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__Messages, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__Messages, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Config"] = _skycoin.daemon__Messages_Config_set
    __swig_getmethods__["Config"] = _skycoin.daemon__Messages_Config_get
    if _newclass:
        Config = _swig_property(_skycoin.daemon__Messages_Config_get, _skycoin.daemon__Messages_Config_set)
    __swig_setmethods__["Mirror"] = _skycoin.daemon__Messages_Mirror_set
    __swig_getmethods__["Mirror"] = _skycoin.daemon__Messages_Mirror_get
    if _newclass:
        Mirror = _swig_property(_skycoin.daemon__Messages_Mirror_get, _skycoin.daemon__Messages_Mirror_set)

    def __init__(self):
        this = _skycoin.new_daemon__Messages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__Messages
    __del__ = lambda self: None
daemon__Messages_swigregister = _skycoin.daemon__Messages_swigregister
daemon__Messages_swigregister(daemon__Messages)

class daemon__IPAddr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__IPAddr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__IPAddr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IP"] = _skycoin.daemon__IPAddr_IP_set
    __swig_getmethods__["IP"] = _skycoin.daemon__IPAddr_IP_get
    if _newclass:
        IP = _swig_property(_skycoin.daemon__IPAddr_IP_get, _skycoin.daemon__IPAddr_IP_set)
    __swig_setmethods__["Port"] = _skycoin.daemon__IPAddr_Port_set
    __swig_getmethods__["Port"] = _skycoin.daemon__IPAddr_Port_get
    if _newclass:
        Port = _swig_property(_skycoin.daemon__IPAddr_Port_get, _skycoin.daemon__IPAddr_Port_set)

    def __init__(self):
        this = _skycoin.new_daemon__IPAddr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__IPAddr
    __del__ = lambda self: None
daemon__IPAddr_swigregister = _skycoin.daemon__IPAddr_swigregister
daemon__IPAddr_swigregister(daemon__IPAddr)

class daemon__GetPeersMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__GetPeersMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__GetPeersMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _skycoin.daemon__GetPeersMessage_addr_set
    __swig_getmethods__["addr"] = _skycoin.daemon__GetPeersMessage_addr_get
    if _newclass:
        addr = _swig_property(_skycoin.daemon__GetPeersMessage_addr_get, _skycoin.daemon__GetPeersMessage_addr_set)

    def __init__(self):
        this = _skycoin.new_daemon__GetPeersMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__GetPeersMessage
    __del__ = lambda self: None
daemon__GetPeersMessage_swigregister = _skycoin.daemon__GetPeersMessage_swigregister
daemon__GetPeersMessage_swigregister(daemon__GetPeersMessage)

class daemon__PongMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__PongMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__PongMessage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_daemon__PongMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__PongMessage
    __del__ = lambda self: None
daemon__PongMessage_swigregister = _skycoin.daemon__PongMessage_swigregister
daemon__PongMessage_swigregister(daemon__PongMessage)

class daemon__GivePeersMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__GivePeersMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__GivePeersMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Peers"] = _skycoin.daemon__GivePeersMessage_Peers_set
    __swig_getmethods__["Peers"] = _skycoin.daemon__GivePeersMessage_Peers_get
    if _newclass:
        Peers = _swig_property(_skycoin.daemon__GivePeersMessage_Peers_get, _skycoin.daemon__GivePeersMessage_Peers_set)
    __swig_setmethods__["c"] = _skycoin.daemon__GivePeersMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__GivePeersMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__GivePeersMessage_c_get, _skycoin.daemon__GivePeersMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__GivePeersMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__GivePeersMessage
    __del__ = lambda self: None
daemon__GivePeersMessage_swigregister = _skycoin.daemon__GivePeersMessage_swigregister
daemon__GivePeersMessage_swigregister(daemon__GivePeersMessage)

class daemon__IntroductionMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__IntroductionMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__IntroductionMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Mirror"] = _skycoin.daemon__IntroductionMessage_Mirror_set
    __swig_getmethods__["Mirror"] = _skycoin.daemon__IntroductionMessage_Mirror_get
    if _newclass:
        Mirror = _swig_property(_skycoin.daemon__IntroductionMessage_Mirror_get, _skycoin.daemon__IntroductionMessage_Mirror_set)
    __swig_setmethods__["Port"] = _skycoin.daemon__IntroductionMessage_Port_set
    __swig_getmethods__["Port"] = _skycoin.daemon__IntroductionMessage_Port_get
    if _newclass:
        Port = _swig_property(_skycoin.daemon__IntroductionMessage_Port_get, _skycoin.daemon__IntroductionMessage_Port_set)
    __swig_setmethods__["Version"] = _skycoin.daemon__IntroductionMessage_Version_set
    __swig_getmethods__["Version"] = _skycoin.daemon__IntroductionMessage_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.daemon__IntroductionMessage_Version_get, _skycoin.daemon__IntroductionMessage_Version_set)
    __swig_setmethods__["c"] = _skycoin.daemon__IntroductionMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__IntroductionMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__IntroductionMessage_c_get, _skycoin.daemon__IntroductionMessage_c_set)
    __swig_setmethods__["valid"] = _skycoin.daemon__IntroductionMessage_valid_set
    __swig_getmethods__["valid"] = _skycoin.daemon__IntroductionMessage_valid_get
    if _newclass:
        valid = _swig_property(_skycoin.daemon__IntroductionMessage_valid_get, _skycoin.daemon__IntroductionMessage_valid_set)

    def __init__(self):
        this = _skycoin.new_daemon__IntroductionMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__IntroductionMessage
    __del__ = lambda self: None
daemon__IntroductionMessage_swigregister = _skycoin.daemon__IntroductionMessage_swigregister
daemon__IntroductionMessage_swigregister(daemon__IntroductionMessage)

class daemon__PingMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__PingMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__PingMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _skycoin.daemon__PingMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__PingMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__PingMessage_c_get, _skycoin.daemon__PingMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__PingMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__PingMessage
    __del__ = lambda self: None
daemon__PingMessage_swigregister = _skycoin.daemon__PingMessage_swigregister
daemon__PingMessage_swigregister(daemon__PingMessage)

class daemon__ConnectEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__ConnectEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__ConnectEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Addr"] = _skycoin.daemon__ConnectEvent_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.daemon__ConnectEvent_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.daemon__ConnectEvent_Addr_get, _skycoin.daemon__ConnectEvent_Addr_set)
    __swig_setmethods__["Solicited"] = _skycoin.daemon__ConnectEvent_Solicited_set
    __swig_getmethods__["Solicited"] = _skycoin.daemon__ConnectEvent_Solicited_get
    if _newclass:
        Solicited = _swig_property(_skycoin.daemon__ConnectEvent_Solicited_get, _skycoin.daemon__ConnectEvent_Solicited_set)

    def __init__(self):
        this = _skycoin.new_daemon__ConnectEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__ConnectEvent
    __del__ = lambda self: None
daemon__ConnectEvent_swigregister = _skycoin.daemon__ConnectEvent_swigregister
daemon__ConnectEvent_swigregister(daemon__ConnectEvent)

class daemon__ConnectionError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__ConnectionError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__ConnectionError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Addr"] = _skycoin.daemon__ConnectionError_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.daemon__ConnectionError_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.daemon__ConnectionError_Addr_get, _skycoin.daemon__ConnectionError_Addr_set)
    __swig_setmethods__["Error"] = _skycoin.daemon__ConnectionError_Error_set
    __swig_getmethods__["Error"] = _skycoin.daemon__ConnectionError_Error_get
    if _newclass:
        Error = _swig_property(_skycoin.daemon__ConnectionError_Error_get, _skycoin.daemon__ConnectionError_Error_set)

    def __init__(self):
        this = _skycoin.new_daemon__ConnectionError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__ConnectionError
    __del__ = lambda self: None
daemon__ConnectionError_swigregister = _skycoin.daemon__ConnectionError_swigregister
daemon__ConnectionError_swigregister(daemon__ConnectionError)

class daemon__DisconnectEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__DisconnectEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__DisconnectEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Addr"] = _skycoin.daemon__DisconnectEvent_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.daemon__DisconnectEvent_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.daemon__DisconnectEvent_Addr_get, _skycoin.daemon__DisconnectEvent_Addr_set)
    __swig_setmethods__["Reason"] = _skycoin.daemon__DisconnectEvent_Reason_set
    __swig_getmethods__["Reason"] = _skycoin.daemon__DisconnectEvent_Reason_get
    if _newclass:
        Reason = _swig_property(_skycoin.daemon__DisconnectEvent_Reason_get, _skycoin.daemon__DisconnectEvent_Reason_set)

    def __init__(self):
        this = _skycoin.new_daemon__DisconnectEvent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__DisconnectEvent
    __del__ = lambda self: None
daemon__DisconnectEvent_swigregister = _skycoin.daemon__DisconnectEvent_swigregister
daemon__DisconnectEvent_swigregister(daemon__DisconnectEvent)

class daemon__GatewayConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__GatewayConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__GatewayConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BufferSize"] = _skycoin.daemon__GatewayConfig_BufferSize_set
    __swig_getmethods__["BufferSize"] = _skycoin.daemon__GatewayConfig_BufferSize_get
    if _newclass:
        BufferSize = _swig_property(_skycoin.daemon__GatewayConfig_BufferSize_get, _skycoin.daemon__GatewayConfig_BufferSize_set)
    __swig_setmethods__["EnableWalletAPI"] = _skycoin.daemon__GatewayConfig_EnableWalletAPI_set
    __swig_getmethods__["EnableWalletAPI"] = _skycoin.daemon__GatewayConfig_EnableWalletAPI_get
    if _newclass:
        EnableWalletAPI = _swig_property(_skycoin.daemon__GatewayConfig_EnableWalletAPI_get, _skycoin.daemon__GatewayConfig_EnableWalletAPI_set)
    __swig_setmethods__["EnableGUI"] = _skycoin.daemon__GatewayConfig_EnableGUI_set
    __swig_getmethods__["EnableGUI"] = _skycoin.daemon__GatewayConfig_EnableGUI_get
    if _newclass:
        EnableGUI = _swig_property(_skycoin.daemon__GatewayConfig_EnableGUI_get, _skycoin.daemon__GatewayConfig_EnableGUI_set)

    def __init__(self):
        this = _skycoin.new_daemon__GatewayConfig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__GatewayConfig
    __del__ = lambda self: None
daemon__GatewayConfig_swigregister = _skycoin.daemon__GatewayConfig_swigregister
daemon__GatewayConfig_swigregister(daemon__GatewayConfig)

class daemon__TransactionResults(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__TransactionResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__TransactionResults, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txns"] = _skycoin.daemon__TransactionResults_Txns_set
    __swig_getmethods__["Txns"] = _skycoin.daemon__TransactionResults_Txns_get
    if _newclass:
        Txns = _swig_property(_skycoin.daemon__TransactionResults_Txns_get, _skycoin.daemon__TransactionResults_Txns_set)

    def __init__(self):
        this = _skycoin.new_daemon__TransactionResults()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__TransactionResults
    __del__ = lambda self: None
daemon__TransactionResults_swigregister = _skycoin.daemon__TransactionResults_swigregister
daemon__TransactionResults_swigregister(daemon__TransactionResults)

class daemon__TransactionResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__TransactionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__TransactionResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Status"] = _skycoin.daemon__TransactionResult_Status_set
    __swig_getmethods__["Status"] = _skycoin.daemon__TransactionResult_Status_get
    if _newclass:
        Status = _swig_property(_skycoin.daemon__TransactionResult_Status_get, _skycoin.daemon__TransactionResult_Status_set)
    __swig_setmethods__["Time"] = _skycoin.daemon__TransactionResult_Time_set
    __swig_getmethods__["Time"] = _skycoin.daemon__TransactionResult_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.daemon__TransactionResult_Time_get, _skycoin.daemon__TransactionResult_Time_set)
    __swig_setmethods__["Transaction"] = _skycoin.daemon__TransactionResult_Transaction_set
    __swig_getmethods__["Transaction"] = _skycoin.daemon__TransactionResult_Transaction_get
    if _newclass:
        Transaction = _swig_property(_skycoin.daemon__TransactionResult_Transaction_get, _skycoin.daemon__TransactionResult_Transaction_set)

    def __init__(self):
        this = _skycoin.new_daemon__TransactionResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__TransactionResult
    __del__ = lambda self: None
daemon__TransactionResult_swigregister = _skycoin.daemon__TransactionResult_swigregister
daemon__TransactionResult_swigregister(daemon__TransactionResult)

class pex__Peer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pex__Peer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pex__Peer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Addr"] = _skycoin.pex__Peer_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.pex__Peer_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.pex__Peer_Addr_get, _skycoin.pex__Peer_Addr_set)
    __swig_setmethods__["LastSeen"] = _skycoin.pex__Peer_LastSeen_set
    __swig_getmethods__["LastSeen"] = _skycoin.pex__Peer_LastSeen_get
    if _newclass:
        LastSeen = _swig_property(_skycoin.pex__Peer_LastSeen_get, _skycoin.pex__Peer_LastSeen_set)
    __swig_setmethods__["Private"] = _skycoin.pex__Peer_Private_set
    __swig_getmethods__["Private"] = _skycoin.pex__Peer_Private_get
    if _newclass:
        Private = _swig_property(_skycoin.pex__Peer_Private_get, _skycoin.pex__Peer_Private_set)
    __swig_setmethods__["Trusted"] = _skycoin.pex__Peer_Trusted_set
    __swig_getmethods__["Trusted"] = _skycoin.pex__Peer_Trusted_get
    if _newclass:
        Trusted = _swig_property(_skycoin.pex__Peer_Trusted_get, _skycoin.pex__Peer_Trusted_set)
    __swig_setmethods__["HasIncomingPort"] = _skycoin.pex__Peer_HasIncomingPort_set
    __swig_getmethods__["HasIncomingPort"] = _skycoin.pex__Peer_HasIncomingPort_get
    if _newclass:
        HasIncomingPort = _swig_property(_skycoin.pex__Peer_HasIncomingPort_get, _skycoin.pex__Peer_HasIncomingPort_set)
    __swig_setmethods__["RetryTimes"] = _skycoin.pex__Peer_RetryTimes_set
    __swig_getmethods__["RetryTimes"] = _skycoin.pex__Peer_RetryTimes_get
    if _newclass:
        RetryTimes = _swig_property(_skycoin.pex__Peer_RetryTimes_get, _skycoin.pex__Peer_RetryTimes_set)

    def __init__(self):
        this = _skycoin.new_pex__Peer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_pex__Peer
    __del__ = lambda self: None
pex__Peer_swigregister = _skycoin.pex__Peer_swigregister
pex__Peer_swigregister(pex__Peer)

class daemon__Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__Connection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ID"] = _skycoin.daemon__Connection_ID_set
    __swig_getmethods__["ID"] = _skycoin.daemon__Connection_ID_get
    if _newclass:
        ID = _swig_property(_skycoin.daemon__Connection_ID_get, _skycoin.daemon__Connection_ID_set)
    __swig_setmethods__["Addr"] = _skycoin.daemon__Connection_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.daemon__Connection_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.daemon__Connection_Addr_get, _skycoin.daemon__Connection_Addr_set)
    __swig_setmethods__["LastSent"] = _skycoin.daemon__Connection_LastSent_set
    __swig_getmethods__["LastSent"] = _skycoin.daemon__Connection_LastSent_get
    if _newclass:
        LastSent = _swig_property(_skycoin.daemon__Connection_LastSent_get, _skycoin.daemon__Connection_LastSent_set)
    __swig_setmethods__["LastReceived"] = _skycoin.daemon__Connection_LastReceived_set
    __swig_getmethods__["LastReceived"] = _skycoin.daemon__Connection_LastReceived_get
    if _newclass:
        LastReceived = _swig_property(_skycoin.daemon__Connection_LastReceived_get, _skycoin.daemon__Connection_LastReceived_set)
    __swig_setmethods__["Outgoing"] = _skycoin.daemon__Connection_Outgoing_set
    __swig_getmethods__["Outgoing"] = _skycoin.daemon__Connection_Outgoing_get
    if _newclass:
        Outgoing = _swig_property(_skycoin.daemon__Connection_Outgoing_get, _skycoin.daemon__Connection_Outgoing_set)
    __swig_setmethods__["Introduced"] = _skycoin.daemon__Connection_Introduced_set
    __swig_getmethods__["Introduced"] = _skycoin.daemon__Connection_Introduced_get
    if _newclass:
        Introduced = _swig_property(_skycoin.daemon__Connection_Introduced_get, _skycoin.daemon__Connection_Introduced_set)
    __swig_setmethods__["Mirror"] = _skycoin.daemon__Connection_Mirror_set
    __swig_getmethods__["Mirror"] = _skycoin.daemon__Connection_Mirror_get
    if _newclass:
        Mirror = _swig_property(_skycoin.daemon__Connection_Mirror_get, _skycoin.daemon__Connection_Mirror_set)
    __swig_setmethods__["ListenPort"] = _skycoin.daemon__Connection_ListenPort_set
    __swig_getmethods__["ListenPort"] = _skycoin.daemon__Connection_ListenPort_get
    if _newclass:
        ListenPort = _swig_property(_skycoin.daemon__Connection_ListenPort_get, _skycoin.daemon__Connection_ListenPort_set)

    def __init__(self):
        this = _skycoin.new_daemon__Connection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__Connection
    __del__ = lambda self: None
daemon__Connection_swigregister = _skycoin.daemon__Connection_swigregister
daemon__Connection_swigregister(daemon__Connection)

class daemon__Connections(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__Connections, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__Connections, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Connections"] = _skycoin.daemon__Connections_Connections_set
    __swig_getmethods__["Connections"] = _skycoin.daemon__Connections_Connections_get
    if _newclass:
        Connections = _swig_property(_skycoin.daemon__Connections_Connections_get, _skycoin.daemon__Connections_Connections_set)

    def __init__(self):
        this = _skycoin.new_daemon__Connections()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__Connections
    __del__ = lambda self: None
daemon__Connections_swigregister = _skycoin.daemon__Connections_swigregister
daemon__Connections_swigregister(daemon__Connections)

class daemon__BlockchainProgress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__BlockchainProgress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__BlockchainProgress, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Current"] = _skycoin.daemon__BlockchainProgress_Current_set
    __swig_getmethods__["Current"] = _skycoin.daemon__BlockchainProgress_Current_get
    if _newclass:
        Current = _swig_property(_skycoin.daemon__BlockchainProgress_Current_get, _skycoin.daemon__BlockchainProgress_Current_set)
    __swig_setmethods__["Highest"] = _skycoin.daemon__BlockchainProgress_Highest_set
    __swig_getmethods__["Highest"] = _skycoin.daemon__BlockchainProgress_Highest_get
    if _newclass:
        Highest = _swig_property(_skycoin.daemon__BlockchainProgress_Highest_get, _skycoin.daemon__BlockchainProgress_Highest_set)
    __swig_setmethods__["Peers"] = _skycoin.daemon__BlockchainProgress_Peers_set
    __swig_getmethods__["Peers"] = _skycoin.daemon__BlockchainProgress_Peers_get
    if _newclass:
        Peers = _swig_property(_skycoin.daemon__BlockchainProgress_Peers_get, _skycoin.daemon__BlockchainProgress_Peers_set)

    def __init__(self):
        this = _skycoin.new_daemon__BlockchainProgress()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__BlockchainProgress
    __del__ = lambda self: None
daemon__BlockchainProgress_swigregister = _skycoin.daemon__BlockchainProgress_swigregister
daemon__BlockchainProgress_swigregister(daemon__BlockchainProgress)

class daemon__ResendResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__ResendResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__ResendResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txids"] = _skycoin.daemon__ResendResult_Txids_set
    __swig_getmethods__["Txids"] = _skycoin.daemon__ResendResult_Txids_get
    if _newclass:
        Txids = _swig_property(_skycoin.daemon__ResendResult_Txids_get, _skycoin.daemon__ResendResult_Txids_set)

    def __init__(self):
        this = _skycoin.new_daemon__ResendResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__ResendResult
    __del__ = lambda self: None
daemon__ResendResult_swigregister = _skycoin.daemon__ResendResult_swigregister
daemon__ResendResult_swigregister(daemon__ResendResult)

class daemon__RPC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__RPC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__RPC, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_daemon__RPC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__RPC
    __del__ = lambda self: None
daemon__RPC_swigregister = _skycoin.daemon__RPC_swigregister
daemon__RPC_swigregister(daemon__RPC)

class daemon__PeerBlockchainHeight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__PeerBlockchainHeight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__PeerBlockchainHeight, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.daemon__PeerBlockchainHeight_Address_set
    __swig_getmethods__["Address"] = _skycoin.daemon__PeerBlockchainHeight_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.daemon__PeerBlockchainHeight_Address_get, _skycoin.daemon__PeerBlockchainHeight_Address_set)
    __swig_setmethods__["Height"] = _skycoin.daemon__PeerBlockchainHeight_Height_set
    __swig_getmethods__["Height"] = _skycoin.daemon__PeerBlockchainHeight_Height_get
    if _newclass:
        Height = _swig_property(_skycoin.daemon__PeerBlockchainHeight_Height_get, _skycoin.daemon__PeerBlockchainHeight_Height_set)

    def __init__(self):
        this = _skycoin.new_daemon__PeerBlockchainHeight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__PeerBlockchainHeight
    __del__ = lambda self: None
daemon__PeerBlockchainHeight_swigregister = _skycoin.daemon__PeerBlockchainHeight_swigregister
daemon__PeerBlockchainHeight_swigregister(daemon__PeerBlockchainHeight)

class daemon__GetBlocksMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__GetBlocksMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__GetBlocksMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["LastBlock"] = _skycoin.daemon__GetBlocksMessage_LastBlock_set
    __swig_getmethods__["LastBlock"] = _skycoin.daemon__GetBlocksMessage_LastBlock_get
    if _newclass:
        LastBlock = _swig_property(_skycoin.daemon__GetBlocksMessage_LastBlock_get, _skycoin.daemon__GetBlocksMessage_LastBlock_set)
    __swig_setmethods__["RequestedBlocks"] = _skycoin.daemon__GetBlocksMessage_RequestedBlocks_set
    __swig_getmethods__["RequestedBlocks"] = _skycoin.daemon__GetBlocksMessage_RequestedBlocks_get
    if _newclass:
        RequestedBlocks = _swig_property(_skycoin.daemon__GetBlocksMessage_RequestedBlocks_get, _skycoin.daemon__GetBlocksMessage_RequestedBlocks_set)
    __swig_setmethods__["c"] = _skycoin.daemon__GetBlocksMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__GetBlocksMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__GetBlocksMessage_c_get, _skycoin.daemon__GetBlocksMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__GetBlocksMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__GetBlocksMessage
    __del__ = lambda self: None
daemon__GetBlocksMessage_swigregister = _skycoin.daemon__GetBlocksMessage_swigregister
daemon__GetBlocksMessage_swigregister(daemon__GetBlocksMessage)

class daemon__GiveBlocksMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__GiveBlocksMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__GiveBlocksMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Blocks"] = _skycoin.daemon__GiveBlocksMessage_Blocks_set
    __swig_getmethods__["Blocks"] = _skycoin.daemon__GiveBlocksMessage_Blocks_get
    if _newclass:
        Blocks = _swig_property(_skycoin.daemon__GiveBlocksMessage_Blocks_get, _skycoin.daemon__GiveBlocksMessage_Blocks_set)
    __swig_setmethods__["c"] = _skycoin.daemon__GiveBlocksMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__GiveBlocksMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__GiveBlocksMessage_c_get, _skycoin.daemon__GiveBlocksMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__GiveBlocksMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__GiveBlocksMessage
    __del__ = lambda self: None
daemon__GiveBlocksMessage_swigregister = _skycoin.daemon__GiveBlocksMessage_swigregister
daemon__GiveBlocksMessage_swigregister(daemon__GiveBlocksMessage)

class daemon__AnnounceBlocksMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__AnnounceBlocksMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__AnnounceBlocksMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MaxBkSeq"] = _skycoin.daemon__AnnounceBlocksMessage_MaxBkSeq_set
    __swig_getmethods__["MaxBkSeq"] = _skycoin.daemon__AnnounceBlocksMessage_MaxBkSeq_get
    if _newclass:
        MaxBkSeq = _swig_property(_skycoin.daemon__AnnounceBlocksMessage_MaxBkSeq_get, _skycoin.daemon__AnnounceBlocksMessage_MaxBkSeq_set)
    __swig_setmethods__["c"] = _skycoin.daemon__AnnounceBlocksMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__AnnounceBlocksMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__AnnounceBlocksMessage_c_get, _skycoin.daemon__AnnounceBlocksMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__AnnounceBlocksMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__AnnounceBlocksMessage
    __del__ = lambda self: None
daemon__AnnounceBlocksMessage_swigregister = _skycoin.daemon__AnnounceBlocksMessage_swigregister
daemon__AnnounceBlocksMessage_swigregister(daemon__AnnounceBlocksMessage)

class daemon__AnnounceTxnsMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__AnnounceTxnsMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__AnnounceTxnsMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txns"] = _skycoin.daemon__AnnounceTxnsMessage_Txns_set
    __swig_getmethods__["Txns"] = _skycoin.daemon__AnnounceTxnsMessage_Txns_get
    if _newclass:
        Txns = _swig_property(_skycoin.daemon__AnnounceTxnsMessage_Txns_get, _skycoin.daemon__AnnounceTxnsMessage_Txns_set)
    __swig_setmethods__["c"] = _skycoin.daemon__AnnounceTxnsMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__AnnounceTxnsMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__AnnounceTxnsMessage_c_get, _skycoin.daemon__AnnounceTxnsMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__AnnounceTxnsMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__AnnounceTxnsMessage
    __del__ = lambda self: None
daemon__AnnounceTxnsMessage_swigregister = _skycoin.daemon__AnnounceTxnsMessage_swigregister
daemon__AnnounceTxnsMessage_swigregister(daemon__AnnounceTxnsMessage)

class daemon__GetTxnsMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__GetTxnsMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__GetTxnsMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txns"] = _skycoin.daemon__GetTxnsMessage_Txns_set
    __swig_getmethods__["Txns"] = _skycoin.daemon__GetTxnsMessage_Txns_get
    if _newclass:
        Txns = _swig_property(_skycoin.daemon__GetTxnsMessage_Txns_get, _skycoin.daemon__GetTxnsMessage_Txns_set)
    __swig_setmethods__["c"] = _skycoin.daemon__GetTxnsMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__GetTxnsMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__GetTxnsMessage_c_get, _skycoin.daemon__GetTxnsMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__GetTxnsMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__GetTxnsMessage
    __del__ = lambda self: None
daemon__GetTxnsMessage_swigregister = _skycoin.daemon__GetTxnsMessage_swigregister
daemon__GetTxnsMessage_swigregister(daemon__GetTxnsMessage)

class daemon__GiveTxnsMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, daemon__GiveTxnsMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, daemon__GiveTxnsMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txns"] = _skycoin.daemon__GiveTxnsMessage_Txns_set
    __swig_getmethods__["Txns"] = _skycoin.daemon__GiveTxnsMessage_Txns_get
    if _newclass:
        Txns = _swig_property(_skycoin.daemon__GiveTxnsMessage_Txns_get, _skycoin.daemon__GiveTxnsMessage_Txns_set)
    __swig_setmethods__["c"] = _skycoin.daemon__GiveTxnsMessage_c_set
    __swig_getmethods__["c"] = _skycoin.daemon__GiveTxnsMessage_c_get
    if _newclass:
        c = _swig_property(_skycoin.daemon__GiveTxnsMessage_c_get, _skycoin.daemon__GiveTxnsMessage_c_set)

    def __init__(self):
        this = _skycoin.new_daemon__GiveTxnsMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_daemon__GiveTxnsMessage
    __del__ = lambda self: None
daemon__GiveTxnsMessage_swigregister = _skycoin.daemon__GiveTxnsMessage_swigregister
daemon__GiveTxnsMessage_swigregister(daemon__GiveTxnsMessage)

class webrpc__OutputsResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, webrpc__OutputsResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, webrpc__OutputsResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Outputs"] = _skycoin.webrpc__OutputsResult_Outputs_set
    __swig_getmethods__["Outputs"] = _skycoin.webrpc__OutputsResult_Outputs_get
    if _newclass:
        Outputs = _swig_property(_skycoin.webrpc__OutputsResult_Outputs_get, _skycoin.webrpc__OutputsResult_Outputs_set)

    def __init__(self):
        this = _skycoin.new_webrpc__OutputsResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_webrpc__OutputsResult
    __del__ = lambda self: None
webrpc__OutputsResult_swigregister = _skycoin.webrpc__OutputsResult_swigregister
webrpc__OutputsResult_swigregister(webrpc__OutputsResult)

class webrpc__StatusResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, webrpc__StatusResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, webrpc__StatusResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Running"] = _skycoin.webrpc__StatusResult_Running_set
    __swig_getmethods__["Running"] = _skycoin.webrpc__StatusResult_Running_get
    if _newclass:
        Running = _swig_property(_skycoin.webrpc__StatusResult_Running_get, _skycoin.webrpc__StatusResult_Running_set)
    __swig_setmethods__["BlockNum"] = _skycoin.webrpc__StatusResult_BlockNum_set
    __swig_getmethods__["BlockNum"] = _skycoin.webrpc__StatusResult_BlockNum_get
    if _newclass:
        BlockNum = _swig_property(_skycoin.webrpc__StatusResult_BlockNum_get, _skycoin.webrpc__StatusResult_BlockNum_set)
    __swig_setmethods__["LastBlockHash"] = _skycoin.webrpc__StatusResult_LastBlockHash_set
    __swig_getmethods__["LastBlockHash"] = _skycoin.webrpc__StatusResult_LastBlockHash_get
    if _newclass:
        LastBlockHash = _swig_property(_skycoin.webrpc__StatusResult_LastBlockHash_get, _skycoin.webrpc__StatusResult_LastBlockHash_set)
    __swig_setmethods__["TimeSinceLastBlock"] = _skycoin.webrpc__StatusResult_TimeSinceLastBlock_set
    __swig_getmethods__["TimeSinceLastBlock"] = _skycoin.webrpc__StatusResult_TimeSinceLastBlock_get
    if _newclass:
        TimeSinceLastBlock = _swig_property(_skycoin.webrpc__StatusResult_TimeSinceLastBlock_get, _skycoin.webrpc__StatusResult_TimeSinceLastBlock_set)

    def __init__(self):
        this = _skycoin.new_webrpc__StatusResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_webrpc__StatusResult
    __del__ = lambda self: None
webrpc__StatusResult_swigregister = _skycoin.webrpc__StatusResult_swigregister
webrpc__StatusResult_swigregister(webrpc__StatusResult)

class webrpc__TxIDJson(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, webrpc__TxIDJson, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, webrpc__TxIDJson, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txid"] = _skycoin.webrpc__TxIDJson_Txid_set
    __swig_getmethods__["Txid"] = _skycoin.webrpc__TxIDJson_Txid_get
    if _newclass:
        Txid = _swig_property(_skycoin.webrpc__TxIDJson_Txid_get, _skycoin.webrpc__TxIDJson_Txid_set)

    def __init__(self):
        this = _skycoin.new_webrpc__TxIDJson()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_webrpc__TxIDJson
    __del__ = lambda self: None
webrpc__TxIDJson_swigregister = _skycoin.webrpc__TxIDJson_swigregister
webrpc__TxIDJson_swigregister(webrpc__TxIDJson)

class webrpc__TxnResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, webrpc__TxnResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, webrpc__TxnResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Transaction"] = _skycoin.webrpc__TxnResult_Transaction_set
    __swig_getmethods__["Transaction"] = _skycoin.webrpc__TxnResult_Transaction_get
    if _newclass:
        Transaction = _swig_property(_skycoin.webrpc__TxnResult_Transaction_get, _skycoin.webrpc__TxnResult_Transaction_set)

    def __init__(self):
        this = _skycoin.new_webrpc__TxnResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_webrpc__TxnResult
    __del__ = lambda self: None
webrpc__TxnResult_swigregister = _skycoin.webrpc__TxnResult_swigregister
webrpc__TxnResult_swigregister(webrpc__TxnResult)

class webrpc__AddrUxoutResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, webrpc__AddrUxoutResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, webrpc__AddrUxoutResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.webrpc__AddrUxoutResult_Address_set
    __swig_getmethods__["Address"] = _skycoin.webrpc__AddrUxoutResult_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.webrpc__AddrUxoutResult_Address_get, _skycoin.webrpc__AddrUxoutResult_Address_set)
    __swig_setmethods__["UxOuts"] = _skycoin.webrpc__AddrUxoutResult_UxOuts_set
    __swig_getmethods__["UxOuts"] = _skycoin.webrpc__AddrUxoutResult_UxOuts_get
    if _newclass:
        UxOuts = _swig_property(_skycoin.webrpc__AddrUxoutResult_UxOuts_get, _skycoin.webrpc__AddrUxoutResult_UxOuts_set)

    def __init__(self):
        this = _skycoin.new_webrpc__AddrUxoutResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_webrpc__AddrUxoutResult
    __del__ = lambda self: None
webrpc__AddrUxoutResult_swigregister = _skycoin.webrpc__AddrUxoutResult_swigregister
webrpc__AddrUxoutResult_swigregister(webrpc__AddrUxoutResult)

class webrpc__RPCError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, webrpc__RPCError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, webrpc__RPCError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Code"] = _skycoin.webrpc__RPCError_Code_set
    __swig_getmethods__["Code"] = _skycoin.webrpc__RPCError_Code_get
    if _newclass:
        Code = _swig_property(_skycoin.webrpc__RPCError_Code_get, _skycoin.webrpc__RPCError_Code_set)
    __swig_setmethods__["Message"] = _skycoin.webrpc__RPCError_Message_set
    __swig_getmethods__["Message"] = _skycoin.webrpc__RPCError_Message_get
    if _newclass:
        Message = _swig_property(_skycoin.webrpc__RPCError_Message_get, _skycoin.webrpc__RPCError_Message_set)
    __swig_setmethods__["Data"] = _skycoin.webrpc__RPCError_Data_set
    __swig_getmethods__["Data"] = _skycoin.webrpc__RPCError_Data_get
    if _newclass:
        Data = _swig_property(_skycoin.webrpc__RPCError_Data_get, _skycoin.webrpc__RPCError_Data_set)

    def __init__(self):
        this = _skycoin.new_webrpc__RPCError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_webrpc__RPCError
    __del__ = lambda self: None
webrpc__RPCError_swigregister = _skycoin.webrpc__RPCError_swigregister
webrpc__RPCError_swigregister(webrpc__RPCError)

class wallet__Balance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Balance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Balance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Coins"] = _skycoin.wallet__Balance_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.wallet__Balance_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.wallet__Balance_Coins_get, _skycoin.wallet__Balance_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.wallet__Balance_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.wallet__Balance_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.wallet__Balance_Hours_get, _skycoin.wallet__Balance_Hours_set)

    def __init__(self):
        this = _skycoin.new_wallet__Balance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Balance
    __del__ = lambda self: None
wallet__Balance_swigregister = _skycoin.wallet__Balance_swigregister
wallet__Balance_swigregister(wallet__Balance)

class wallet__BalancePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__BalancePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__BalancePair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Confirmed"] = _skycoin.wallet__BalancePair_Confirmed_set
    __swig_getmethods__["Confirmed"] = _skycoin.wallet__BalancePair_Confirmed_get
    if _newclass:
        Confirmed = _swig_property(_skycoin.wallet__BalancePair_Confirmed_get, _skycoin.wallet__BalancePair_Confirmed_set)
    __swig_setmethods__["Predicted"] = _skycoin.wallet__BalancePair_Predicted_set
    __swig_getmethods__["Predicted"] = _skycoin.wallet__BalancePair_Predicted_get
    if _newclass:
        Predicted = _swig_property(_skycoin.wallet__BalancePair_Predicted_get, _skycoin.wallet__BalancePair_Predicted_set)

    def __init__(self):
        this = _skycoin.new_wallet__BalancePair()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__BalancePair
    __del__ = lambda self: None
wallet__BalancePair_swigregister = _skycoin.wallet__BalancePair_swigregister
wallet__BalancePair_swigregister(wallet__BalancePair)

class wallet__Entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Entry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.wallet__Entry_Address_set
    __swig_getmethods__["Address"] = _skycoin.wallet__Entry_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.wallet__Entry_Address_get, _skycoin.wallet__Entry_Address_set)
    __swig_setmethods__["Public"] = _skycoin.wallet__Entry_Public_set
    __swig_getmethods__["Public"] = _skycoin.wallet__Entry_Public_get
    if _newclass:
        Public = _swig_property(_skycoin.wallet__Entry_Public_get, _skycoin.wallet__Entry_Public_set)
    __swig_setmethods__["Secret"] = _skycoin.wallet__Entry_Secret_set
    __swig_getmethods__["Secret"] = _skycoin.wallet__Entry_Secret_get
    if _newclass:
        Secret = _swig_property(_skycoin.wallet__Entry_Secret_get, _skycoin.wallet__Entry_Secret_set)

    def __init__(self):
        this = _skycoin.new_wallet__Entry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Entry
    __del__ = lambda self: None
wallet__Entry_swigregister = _skycoin.wallet__Entry_swigregister
wallet__Entry_swigregister(wallet__Entry)

class wallet__Note(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Note, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Note, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TxID"] = _skycoin.wallet__Note_TxID_set
    __swig_getmethods__["TxID"] = _skycoin.wallet__Note_TxID_get
    if _newclass:
        TxID = _swig_property(_skycoin.wallet__Note_TxID_get, _skycoin.wallet__Note_TxID_set)
    __swig_setmethods__["Value"] = _skycoin.wallet__Note_Value_set
    __swig_getmethods__["Value"] = _skycoin.wallet__Note_Value_get
    if _newclass:
        Value = _swig_property(_skycoin.wallet__Note_Value_get, _skycoin.wallet__Note_Value_set)

    def __init__(self):
        this = _skycoin.new_wallet__Note()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Note
    __del__ = lambda self: None
wallet__Note_swigregister = _skycoin.wallet__Note_swigregister
wallet__Note_swigregister(wallet__Note)

class wallet__ReadableNote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__ReadableNote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__ReadableNote, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TransactionID"] = _skycoin.wallet__ReadableNote_TransactionID_set
    __swig_getmethods__["TransactionID"] = _skycoin.wallet__ReadableNote_TransactionID_get
    if _newclass:
        TransactionID = _swig_property(_skycoin.wallet__ReadableNote_TransactionID_get, _skycoin.wallet__ReadableNote_TransactionID_set)
    __swig_setmethods__["ActualNote"] = _skycoin.wallet__ReadableNote_ActualNote_set
    __swig_getmethods__["ActualNote"] = _skycoin.wallet__ReadableNote_ActualNote_get
    if _newclass:
        ActualNote = _swig_property(_skycoin.wallet__ReadableNote_ActualNote_get, _skycoin.wallet__ReadableNote_ActualNote_set)

    def __init__(self):
        this = _skycoin.new_wallet__ReadableNote()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__ReadableNote
    __del__ = lambda self: None
wallet__ReadableNote_swigregister = _skycoin.wallet__ReadableNote_swigregister
wallet__ReadableNote_swigregister(wallet__ReadableNote)

class wallet__ReadableEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__ReadableEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__ReadableEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.wallet__ReadableEntry_Address_set
    __swig_getmethods__["Address"] = _skycoin.wallet__ReadableEntry_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.wallet__ReadableEntry_Address_get, _skycoin.wallet__ReadableEntry_Address_set)
    __swig_setmethods__["Public"] = _skycoin.wallet__ReadableEntry_Public_set
    __swig_getmethods__["Public"] = _skycoin.wallet__ReadableEntry_Public_get
    if _newclass:
        Public = _swig_property(_skycoin.wallet__ReadableEntry_Public_get, _skycoin.wallet__ReadableEntry_Public_set)
    __swig_setmethods__["Secret"] = _skycoin.wallet__ReadableEntry_Secret_set
    __swig_getmethods__["Secret"] = _skycoin.wallet__ReadableEntry_Secret_get
    if _newclass:
        Secret = _swig_property(_skycoin.wallet__ReadableEntry_Secret_get, _skycoin.wallet__ReadableEntry_Secret_set)

    def __init__(self):
        this = _skycoin.new_wallet__ReadableEntry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__ReadableEntry
    __del__ = lambda self: None
wallet__ReadableEntry_swigregister = _skycoin.wallet__ReadableEntry_swigregister
wallet__ReadableEntry_swigregister(wallet__ReadableEntry)

class wallet__Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["WalletDir"] = _skycoin.wallet__Config_WalletDir_set
    __swig_getmethods__["WalletDir"] = _skycoin.wallet__Config_WalletDir_get
    if _newclass:
        WalletDir = _swig_property(_skycoin.wallet__Config_WalletDir_get, _skycoin.wallet__Config_WalletDir_set)
    __swig_setmethods__["CryptoType"] = _skycoin.wallet__Config_CryptoType_set
    __swig_getmethods__["CryptoType"] = _skycoin.wallet__Config_CryptoType_get
    if _newclass:
        CryptoType = _swig_property(_skycoin.wallet__Config_CryptoType_get, _skycoin.wallet__Config_CryptoType_set)
    __swig_setmethods__["EnableWalletAPI"] = _skycoin.wallet__Config_EnableWalletAPI_set
    __swig_getmethods__["EnableWalletAPI"] = _skycoin.wallet__Config_EnableWalletAPI_get
    if _newclass:
        EnableWalletAPI = _swig_property(_skycoin.wallet__Config_EnableWalletAPI_get, _skycoin.wallet__Config_EnableWalletAPI_set)
    __swig_setmethods__["EnableSeedAPI"] = _skycoin.wallet__Config_EnableSeedAPI_set
    __swig_getmethods__["EnableSeedAPI"] = _skycoin.wallet__Config_EnableSeedAPI_get
    if _newclass:
        EnableSeedAPI = _swig_property(_skycoin.wallet__Config_EnableSeedAPI_get, _skycoin.wallet__Config_EnableSeedAPI_set)

    def __init__(self):
        this = _skycoin.new_wallet__Config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Config
    __del__ = lambda self: None
wallet__Config_swigregister = _skycoin.wallet__Config_swigregister
wallet__Config_swigregister(wallet__Config)

class wallet__Wallet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Wallet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Wallet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Meta"] = _skycoin.wallet__Wallet_Meta_set
    __swig_getmethods__["Meta"] = _skycoin.wallet__Wallet_Meta_get
    if _newclass:
        Meta = _swig_property(_skycoin.wallet__Wallet_Meta_get, _skycoin.wallet__Wallet_Meta_set)
    __swig_setmethods__["Entries"] = _skycoin.wallet__Wallet_Entries_set
    __swig_getmethods__["Entries"] = _skycoin.wallet__Wallet_Entries_get
    if _newclass:
        Entries = _swig_property(_skycoin.wallet__Wallet_Entries_get, _skycoin.wallet__Wallet_Entries_set)

    def __init__(self):
        this = _skycoin.new_wallet__Wallet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Wallet
    __del__ = lambda self: None
wallet__Wallet_swigregister = _skycoin.wallet__Wallet_swigregister
wallet__Wallet_swigregister(wallet__Wallet)

class wallet__Options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Coin"] = _skycoin.wallet__Options_Coin_set
    __swig_getmethods__["Coin"] = _skycoin.wallet__Options_Coin_get
    if _newclass:
        Coin = _swig_property(_skycoin.wallet__Options_Coin_get, _skycoin.wallet__Options_Coin_set)
    __swig_setmethods__["Label"] = _skycoin.wallet__Options_Label_set
    __swig_getmethods__["Label"] = _skycoin.wallet__Options_Label_get
    if _newclass:
        Label = _swig_property(_skycoin.wallet__Options_Label_get, _skycoin.wallet__Options_Label_set)
    __swig_setmethods__["Seed"] = _skycoin.wallet__Options_Seed_set
    __swig_getmethods__["Seed"] = _skycoin.wallet__Options_Seed_get
    if _newclass:
        Seed = _swig_property(_skycoin.wallet__Options_Seed_get, _skycoin.wallet__Options_Seed_set)
    __swig_setmethods__["Encrypt"] = _skycoin.wallet__Options_Encrypt_set
    __swig_getmethods__["Encrypt"] = _skycoin.wallet__Options_Encrypt_get
    if _newclass:
        Encrypt = _swig_property(_skycoin.wallet__Options_Encrypt_get, _skycoin.wallet__Options_Encrypt_set)
    __swig_setmethods__["Password"] = _skycoin.wallet__Options_Password_set
    __swig_getmethods__["Password"] = _skycoin.wallet__Options_Password_get
    if _newclass:
        Password = _swig_property(_skycoin.wallet__Options_Password_get, _skycoin.wallet__Options_Password_set)
    __swig_setmethods__["CryptoType"] = _skycoin.wallet__Options_CryptoType_set
    __swig_getmethods__["CryptoType"] = _skycoin.wallet__Options_CryptoType_get
    if _newclass:
        CryptoType = _swig_property(_skycoin.wallet__Options_CryptoType_get, _skycoin.wallet__Options_CryptoType_set)

    def __init__(self):
        this = _skycoin.new_wallet__Options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Options
    __del__ = lambda self: None
wallet__Options_swigregister = _skycoin.wallet__Options_swigregister
wallet__Options_swigregister(wallet__Options)

class wallet__UxBalance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__UxBalance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__UxBalance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.wallet__UxBalance_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.wallet__UxBalance_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.wallet__UxBalance_Hash_get, _skycoin.wallet__UxBalance_Hash_set)
    __swig_setmethods__["BkSeq"] = _skycoin.wallet__UxBalance_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.wallet__UxBalance_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.wallet__UxBalance_BkSeq_get, _skycoin.wallet__UxBalance_BkSeq_set)
    __swig_setmethods__["Address"] = _skycoin.wallet__UxBalance_Address_set
    __swig_getmethods__["Address"] = _skycoin.wallet__UxBalance_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.wallet__UxBalance_Address_get, _skycoin.wallet__UxBalance_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.wallet__UxBalance_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.wallet__UxBalance_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.wallet__UxBalance_Coins_get, _skycoin.wallet__UxBalance_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.wallet__UxBalance_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.wallet__UxBalance_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.wallet__UxBalance_Hours_get, _skycoin.wallet__UxBalance_Hours_set)

    def __init__(self):
        this = _skycoin.new_wallet__UxBalance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__UxBalance
    __del__ = lambda self: None
wallet__UxBalance_swigregister = _skycoin.wallet__UxBalance_swigregister
wallet__UxBalance_swigregister(wallet__UxBalance)

class api__CreateTransactionRequestWallet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__CreateTransactionRequestWallet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__CreateTransactionRequestWallet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ID"] = _skycoin.api__CreateTransactionRequestWallet_ID_set
    __swig_getmethods__["ID"] = _skycoin.api__CreateTransactionRequestWallet_ID_get
    if _newclass:
        ID = _swig_property(_skycoin.api__CreateTransactionRequestWallet_ID_get, _skycoin.api__CreateTransactionRequestWallet_ID_set)
    __swig_setmethods__["Addresses"] = _skycoin.api__CreateTransactionRequestWallet_Addresses_set
    __swig_getmethods__["Addresses"] = _skycoin.api__CreateTransactionRequestWallet_Addresses_get
    if _newclass:
        Addresses = _swig_property(_skycoin.api__CreateTransactionRequestWallet_Addresses_get, _skycoin.api__CreateTransactionRequestWallet_Addresses_set)
    __swig_setmethods__["Password"] = _skycoin.api__CreateTransactionRequestWallet_Password_set
    __swig_getmethods__["Password"] = _skycoin.api__CreateTransactionRequestWallet_Password_get
    if _newclass:
        Password = _swig_property(_skycoin.api__CreateTransactionRequestWallet_Password_get, _skycoin.api__CreateTransactionRequestWallet_Password_set)

    def __init__(self):
        this = _skycoin.new_api__CreateTransactionRequestWallet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__CreateTransactionRequestWallet
    __del__ = lambda self: None
api__CreateTransactionRequestWallet_swigregister = _skycoin.api__CreateTransactionRequestWallet_swigregister
api__CreateTransactionRequestWallet_swigregister(api__CreateTransactionRequestWallet)

class api__HoursSelection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__HoursSelection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__HoursSelection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Type"] = _skycoin.api__HoursSelection_Type_set
    __swig_getmethods__["Type"] = _skycoin.api__HoursSelection_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.api__HoursSelection_Type_get, _skycoin.api__HoursSelection_Type_set)
    __swig_setmethods__["Mode"] = _skycoin.api__HoursSelection_Mode_set
    __swig_getmethods__["Mode"] = _skycoin.api__HoursSelection_Mode_get
    if _newclass:
        Mode = _swig_property(_skycoin.api__HoursSelection_Mode_get, _skycoin.api__HoursSelection_Mode_set)
    __swig_setmethods__["ShareFactor"] = _skycoin.api__HoursSelection_ShareFactor_set
    __swig_getmethods__["ShareFactor"] = _skycoin.api__HoursSelection_ShareFactor_get
    if _newclass:
        ShareFactor = _swig_property(_skycoin.api__HoursSelection_ShareFactor_get, _skycoin.api__HoursSelection_ShareFactor_set)

    def __init__(self):
        this = _skycoin.new_api__HoursSelection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__HoursSelection
    __del__ = lambda self: None
api__HoursSelection_swigregister = _skycoin.api__HoursSelection_swigregister
api__HoursSelection_swigregister(api__HoursSelection)

class api__Receiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__Receiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__Receiver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.api__Receiver_Address_set
    __swig_getmethods__["Address"] = _skycoin.api__Receiver_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.api__Receiver_Address_get, _skycoin.api__Receiver_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.api__Receiver_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.api__Receiver_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.api__Receiver_Coins_get, _skycoin.api__Receiver_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.api__Receiver_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.api__Receiver_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.api__Receiver_Hours_get, _skycoin.api__Receiver_Hours_set)

    def __init__(self):
        this = _skycoin.new_api__Receiver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__Receiver
    __del__ = lambda self: None
api__Receiver_swigregister = _skycoin.api__Receiver_swigregister
api__Receiver_swigregister(api__Receiver)

class api__RichlistParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__RichlistParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__RichlistParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _skycoin.api__RichlistParams_N_set
    __swig_getmethods__["N"] = _skycoin.api__RichlistParams_N_get
    if _newclass:
        N = _swig_property(_skycoin.api__RichlistParams_N_get, _skycoin.api__RichlistParams_N_set)
    __swig_setmethods__["IncludeDistribution"] = _skycoin.api__RichlistParams_IncludeDistribution_set
    __swig_getmethods__["IncludeDistribution"] = _skycoin.api__RichlistParams_IncludeDistribution_get
    if _newclass:
        IncludeDistribution = _swig_property(_skycoin.api__RichlistParams_IncludeDistribution_get, _skycoin.api__RichlistParams_IncludeDistribution_set)

    def __init__(self):
        this = _skycoin.new_api__RichlistParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__RichlistParams
    __del__ = lambda self: None
api__RichlistParams_swigregister = _skycoin.api__RichlistParams_swigregister
api__RichlistParams_swigregister(api__RichlistParams)

class api__CreateTransactionRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__CreateTransactionRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__CreateTransactionRequest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["HoursSelection"] = _skycoin.api__CreateTransactionRequest_HoursSelection_set
    __swig_getmethods__["HoursSelection"] = _skycoin.api__CreateTransactionRequest_HoursSelection_get
    if _newclass:
        HoursSelection = _swig_property(_skycoin.api__CreateTransactionRequest_HoursSelection_get, _skycoin.api__CreateTransactionRequest_HoursSelection_set)
    __swig_setmethods__["Wallet"] = _skycoin.api__CreateTransactionRequest_Wallet_set
    __swig_getmethods__["Wallet"] = _skycoin.api__CreateTransactionRequest_Wallet_get
    if _newclass:
        Wallet = _swig_property(_skycoin.api__CreateTransactionRequest_Wallet_get, _skycoin.api__CreateTransactionRequest_Wallet_set)
    __swig_setmethods__["ChangeAddress"] = _skycoin.api__CreateTransactionRequest_ChangeAddress_set
    __swig_getmethods__["ChangeAddress"] = _skycoin.api__CreateTransactionRequest_ChangeAddress_get
    if _newclass:
        ChangeAddress = _swig_property(_skycoin.api__CreateTransactionRequest_ChangeAddress_get, _skycoin.api__CreateTransactionRequest_ChangeAddress_set)
    __swig_setmethods__["To"] = _skycoin.api__CreateTransactionRequest_To_set
    __swig_getmethods__["To"] = _skycoin.api__CreateTransactionRequest_To_get
    if _newclass:
        To = _swig_property(_skycoin.api__CreateTransactionRequest_To_get, _skycoin.api__CreateTransactionRequest_To_set)

    def __init__(self):
        this = _skycoin.new_api__CreateTransactionRequest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__CreateTransactionRequest
    __del__ = lambda self: None
api__CreateTransactionRequest_swigregister = _skycoin.api__CreateTransactionRequest_swigregister
api__CreateTransactionRequest_swigregister(api__CreateTransactionRequest)

class api__Richlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__Richlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__Richlist, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Richlist"] = _skycoin.api__Richlist_Richlist_set
    __swig_getmethods__["Richlist"] = _skycoin.api__Richlist_Richlist_get
    if _newclass:
        Richlist = _swig_property(_skycoin.api__Richlist_Richlist_get, _skycoin.api__Richlist_Richlist_set)

    def __init__(self):
        this = _skycoin.new_api__Richlist()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__Richlist
    __del__ = lambda self: None
api__Richlist_swigregister = _skycoin.api__Richlist_swigregister
api__Richlist_swigregister(api__Richlist)

class api__ReadableTransaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__ReadableTransaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__ReadableTransaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Status"] = _skycoin.api__ReadableTransaction_Status_set
    __swig_getmethods__["Status"] = _skycoin.api__ReadableTransaction_Status_get
    if _newclass:
        Status = _swig_property(_skycoin.api__ReadableTransaction_Status_get, _skycoin.api__ReadableTransaction_Status_set)
    __swig_setmethods__["Length"] = _skycoin.api__ReadableTransaction_Length_set
    __swig_getmethods__["Length"] = _skycoin.api__ReadableTransaction_Length_get
    if _newclass:
        Length = _swig_property(_skycoin.api__ReadableTransaction_Length_get, _skycoin.api__ReadableTransaction_Length_set)
    __swig_setmethods__["Type"] = _skycoin.api__ReadableTransaction_Type_set
    __swig_getmethods__["Type"] = _skycoin.api__ReadableTransaction_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.api__ReadableTransaction_Type_get, _skycoin.api__ReadableTransaction_Type_set)
    __swig_setmethods__["Hash"] = _skycoin.api__ReadableTransaction_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.api__ReadableTransaction_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.api__ReadableTransaction_Hash_get, _skycoin.api__ReadableTransaction_Hash_set)
    __swig_setmethods__["InnerHash"] = _skycoin.api__ReadableTransaction_InnerHash_set
    __swig_getmethods__["InnerHash"] = _skycoin.api__ReadableTransaction_InnerHash_get
    if _newclass:
        InnerHash = _swig_property(_skycoin.api__ReadableTransaction_InnerHash_get, _skycoin.api__ReadableTransaction_InnerHash_set)
    __swig_setmethods__["Timestamp"] = _skycoin.api__ReadableTransaction_Timestamp_set
    __swig_getmethods__["Timestamp"] = _skycoin.api__ReadableTransaction_Timestamp_get
    if _newclass:
        Timestamp = _swig_property(_skycoin.api__ReadableTransaction_Timestamp_get, _skycoin.api__ReadableTransaction_Timestamp_set)
    __swig_setmethods__["Sigs"] = _skycoin.api__ReadableTransaction_Sigs_set
    __swig_getmethods__["Sigs"] = _skycoin.api__ReadableTransaction_Sigs_get
    if _newclass:
        Sigs = _swig_property(_skycoin.api__ReadableTransaction_Sigs_get, _skycoin.api__ReadableTransaction_Sigs_set)
    __swig_setmethods__["In"] = _skycoin.api__ReadableTransaction_In_set
    __swig_getmethods__["In"] = _skycoin.api__ReadableTransaction_In_get
    if _newclass:
        In = _swig_property(_skycoin.api__ReadableTransaction_In_get, _skycoin.api__ReadableTransaction_In_set)
    __swig_setmethods__["Out"] = _skycoin.api__ReadableTransaction_Out_set
    __swig_getmethods__["Out"] = _skycoin.api__ReadableTransaction_Out_get
    if _newclass:
        Out = _swig_property(_skycoin.api__ReadableTransaction_Out_get, _skycoin.api__ReadableTransaction_Out_set)

    def __init__(self):
        this = _skycoin.new_api__ReadableTransaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__ReadableTransaction
    __del__ = lambda self: None
api__ReadableTransaction_swigregister = _skycoin.api__ReadableTransaction_swigregister
api__ReadableTransaction_swigregister(api__ReadableTransaction)

class api__CreatedTransaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__CreatedTransaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__CreatedTransaction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Length"] = _skycoin.api__CreatedTransaction_Length_set
    __swig_getmethods__["Length"] = _skycoin.api__CreatedTransaction_Length_get
    if _newclass:
        Length = _swig_property(_skycoin.api__CreatedTransaction_Length_get, _skycoin.api__CreatedTransaction_Length_set)
    __swig_setmethods__["Type"] = _skycoin.api__CreatedTransaction_Type_set
    __swig_getmethods__["Type"] = _skycoin.api__CreatedTransaction_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.api__CreatedTransaction_Type_get, _skycoin.api__CreatedTransaction_Type_set)
    __swig_setmethods__["TxID"] = _skycoin.api__CreatedTransaction_TxID_set
    __swig_getmethods__["TxID"] = _skycoin.api__CreatedTransaction_TxID_get
    if _newclass:
        TxID = _swig_property(_skycoin.api__CreatedTransaction_TxID_get, _skycoin.api__CreatedTransaction_TxID_set)
    __swig_setmethods__["InnerHash"] = _skycoin.api__CreatedTransaction_InnerHash_set
    __swig_getmethods__["InnerHash"] = _skycoin.api__CreatedTransaction_InnerHash_get
    if _newclass:
        InnerHash = _swig_property(_skycoin.api__CreatedTransaction_InnerHash_get, _skycoin.api__CreatedTransaction_InnerHash_set)
    __swig_setmethods__["Fee"] = _skycoin.api__CreatedTransaction_Fee_set
    __swig_getmethods__["Fee"] = _skycoin.api__CreatedTransaction_Fee_get
    if _newclass:
        Fee = _swig_property(_skycoin.api__CreatedTransaction_Fee_get, _skycoin.api__CreatedTransaction_Fee_set)
    __swig_setmethods__["Sigs"] = _skycoin.api__CreatedTransaction_Sigs_set
    __swig_getmethods__["Sigs"] = _skycoin.api__CreatedTransaction_Sigs_get
    if _newclass:
        Sigs = _swig_property(_skycoin.api__CreatedTransaction_Sigs_get, _skycoin.api__CreatedTransaction_Sigs_set)
    __swig_setmethods__["In"] = _skycoin.api__CreatedTransaction_In_set
    __swig_getmethods__["In"] = _skycoin.api__CreatedTransaction_In_get
    if _newclass:
        In = _swig_property(_skycoin.api__CreatedTransaction_In_get, _skycoin.api__CreatedTransaction_In_set)
    __swig_setmethods__["Out"] = _skycoin.api__CreatedTransaction_Out_set
    __swig_getmethods__["Out"] = _skycoin.api__CreatedTransaction_Out_get
    if _newclass:
        Out = _swig_property(_skycoin.api__CreatedTransaction_Out_get, _skycoin.api__CreatedTransaction_Out_set)

    def __init__(self):
        this = _skycoin.new_api__CreatedTransaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__CreatedTransaction
    __del__ = lambda self: None
api__CreatedTransaction_swigregister = _skycoin.api__CreatedTransaction_swigregister
api__CreatedTransaction_swigregister(api__CreatedTransaction)

class api__CreatedTransactionOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__CreatedTransactionOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__CreatedTransactionOutput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["UxID"] = _skycoin.api__CreatedTransactionOutput_UxID_set
    __swig_getmethods__["UxID"] = _skycoin.api__CreatedTransactionOutput_UxID_get
    if _newclass:
        UxID = _swig_property(_skycoin.api__CreatedTransactionOutput_UxID_get, _skycoin.api__CreatedTransactionOutput_UxID_set)
    __swig_setmethods__["Address"] = _skycoin.api__CreatedTransactionOutput_Address_set
    __swig_getmethods__["Address"] = _skycoin.api__CreatedTransactionOutput_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.api__CreatedTransactionOutput_Address_get, _skycoin.api__CreatedTransactionOutput_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.api__CreatedTransactionOutput_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.api__CreatedTransactionOutput_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.api__CreatedTransactionOutput_Coins_get, _skycoin.api__CreatedTransactionOutput_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.api__CreatedTransactionOutput_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.api__CreatedTransactionOutput_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.api__CreatedTransactionOutput_Hours_get, _skycoin.api__CreatedTransactionOutput_Hours_set)

    def __init__(self):
        this = _skycoin.new_api__CreatedTransactionOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__CreatedTransactionOutput
    __del__ = lambda self: None
api__CreatedTransactionOutput_swigregister = _skycoin.api__CreatedTransactionOutput_swigregister
api__CreatedTransactionOutput_swigregister(api__CreatedTransactionOutput)

class api__CreatedTransactionInput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__CreatedTransactionInput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__CreatedTransactionInput, name)
    __repr__ = _swig_repr
    __swig_setmethods__["UxID"] = _skycoin.api__CreatedTransactionInput_UxID_set
    __swig_getmethods__["UxID"] = _skycoin.api__CreatedTransactionInput_UxID_get
    if _newclass:
        UxID = _swig_property(_skycoin.api__CreatedTransactionInput_UxID_get, _skycoin.api__CreatedTransactionInput_UxID_set)
    __swig_setmethods__["Address"] = _skycoin.api__CreatedTransactionInput_Address_set
    __swig_getmethods__["Address"] = _skycoin.api__CreatedTransactionInput_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.api__CreatedTransactionInput_Address_get, _skycoin.api__CreatedTransactionInput_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.api__CreatedTransactionInput_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.api__CreatedTransactionInput_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.api__CreatedTransactionInput_Coins_get, _skycoin.api__CreatedTransactionInput_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.api__CreatedTransactionInput_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.api__CreatedTransactionInput_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.api__CreatedTransactionInput_Hours_get, _skycoin.api__CreatedTransactionInput_Hours_set)
    __swig_setmethods__["CalculatedHours"] = _skycoin.api__CreatedTransactionInput_CalculatedHours_set
    __swig_getmethods__["CalculatedHours"] = _skycoin.api__CreatedTransactionInput_CalculatedHours_get
    if _newclass:
        CalculatedHours = _swig_property(_skycoin.api__CreatedTransactionInput_CalculatedHours_get, _skycoin.api__CreatedTransactionInput_CalculatedHours_set)
    __swig_setmethods__["Time"] = _skycoin.api__CreatedTransactionInput_Time_set
    __swig_getmethods__["Time"] = _skycoin.api__CreatedTransactionInput_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.api__CreatedTransactionInput_Time_get, _skycoin.api__CreatedTransactionInput_Time_set)
    __swig_setmethods__["Block"] = _skycoin.api__CreatedTransactionInput_Block_set
    __swig_getmethods__["Block"] = _skycoin.api__CreatedTransactionInput_Block_get
    if _newclass:
        Block = _swig_property(_skycoin.api__CreatedTransactionInput_Block_get, _skycoin.api__CreatedTransactionInput_Block_set)
    __swig_setmethods__["TxID"] = _skycoin.api__CreatedTransactionInput_TxID_set
    __swig_getmethods__["TxID"] = _skycoin.api__CreatedTransactionInput_TxID_get
    if _newclass:
        TxID = _swig_property(_skycoin.api__CreatedTransactionInput_TxID_get, _skycoin.api__CreatedTransactionInput_TxID_set)

    def __init__(self):
        this = _skycoin.new_api__CreatedTransactionInput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__CreatedTransactionInput
    __del__ = lambda self: None
api__CreatedTransactionInput_swigregister = _skycoin.api__CreatedTransactionInput_swigregister
api__CreatedTransactionInput_swigregister(api__CreatedTransactionInput)

class api__createTransactionRequestWallet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__createTransactionRequestWallet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__createTransactionRequestWallet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ID"] = _skycoin.api__createTransactionRequestWallet_ID_set
    __swig_getmethods__["ID"] = _skycoin.api__createTransactionRequestWallet_ID_get
    if _newclass:
        ID = _swig_property(_skycoin.api__createTransactionRequestWallet_ID_get, _skycoin.api__createTransactionRequestWallet_ID_set)
    __swig_setmethods__["Addresses"] = _skycoin.api__createTransactionRequestWallet_Addresses_set
    __swig_getmethods__["Addresses"] = _skycoin.api__createTransactionRequestWallet_Addresses_get
    if _newclass:
        Addresses = _swig_property(_skycoin.api__createTransactionRequestWallet_Addresses_get, _skycoin.api__createTransactionRequestWallet_Addresses_set)
    __swig_setmethods__["Password"] = _skycoin.api__createTransactionRequestWallet_Password_set
    __swig_getmethods__["Password"] = _skycoin.api__createTransactionRequestWallet_Password_get
    if _newclass:
        Password = _swig_property(_skycoin.api__createTransactionRequestWallet_Password_get, _skycoin.api__createTransactionRequestWallet_Password_set)

    def __init__(self):
        this = _skycoin.new_api__createTransactionRequestWallet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__createTransactionRequestWallet
    __del__ = lambda self: None
api__createTransactionRequestWallet_swigregister = _skycoin.api__createTransactionRequestWallet_swigregister
api__createTransactionRequestWallet_swigregister(api__createTransactionRequestWallet)

class api__CreateTransactionResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__CreateTransactionResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__CreateTransactionResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Transaction"] = _skycoin.api__CreateTransactionResponse_Transaction_set
    __swig_getmethods__["Transaction"] = _skycoin.api__CreateTransactionResponse_Transaction_get
    if _newclass:
        Transaction = _swig_property(_skycoin.api__CreateTransactionResponse_Transaction_get, _skycoin.api__CreateTransactionResponse_Transaction_set)
    __swig_setmethods__["EncodedTransaction"] = _skycoin.api__CreateTransactionResponse_EncodedTransaction_set
    __swig_getmethods__["EncodedTransaction"] = _skycoin.api__CreateTransactionResponse_EncodedTransaction_get
    if _newclass:
        EncodedTransaction = _swig_property(_skycoin.api__CreateTransactionResponse_EncodedTransaction_get, _skycoin.api__CreateTransactionResponse_EncodedTransaction_set)

    def __init__(self):
        this = _skycoin.new_api__CreateTransactionResponse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__CreateTransactionResponse
    __del__ = lambda self: None
api__CreateTransactionResponse_swigregister = _skycoin.api__CreateTransactionResponse_swigregister
api__CreateTransactionResponse_swigregister(api__CreateTransactionResponse)

class api__receiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__receiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__receiver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.api__receiver_Address_set
    __swig_getmethods__["Address"] = _skycoin.api__receiver_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.api__receiver_Address_get, _skycoin.api__receiver_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.api__receiver_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.api__receiver_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.api__receiver_Coins_get, _skycoin.api__receiver_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.api__receiver_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.api__receiver_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.api__receiver_Hours_get, _skycoin.api__receiver_Hours_set)

    def __init__(self):
        this = _skycoin.new_api__receiver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__receiver
    __del__ = lambda self: None
api__receiver_swigregister = _skycoin.api__receiver_swigregister
api__receiver_swigregister(api__receiver)

class api__UnconfirmedTxnsResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__UnconfirmedTxnsResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__UnconfirmedTxnsResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Transactions"] = _skycoin.api__UnconfirmedTxnsResponse_Transactions_set
    __swig_getmethods__["Transactions"] = _skycoin.api__UnconfirmedTxnsResponse_Transactions_get
    if _newclass:
        Transactions = _swig_property(_skycoin.api__UnconfirmedTxnsResponse_Transactions_get, _skycoin.api__UnconfirmedTxnsResponse_Transactions_set)

    def __init__(self):
        this = _skycoin.new_api__UnconfirmedTxnsResponse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__UnconfirmedTxnsResponse
    __del__ = lambda self: None
api__UnconfirmedTxnsResponse_swigregister = _skycoin.api__UnconfirmedTxnsResponse_swigregister
api__UnconfirmedTxnsResponse_swigregister(api__UnconfirmedTxnsResponse)

class api__WalletEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__WalletEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__WalletEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.api__WalletEntry_Address_set
    __swig_getmethods__["Address"] = _skycoin.api__WalletEntry_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.api__WalletEntry_Address_get, _skycoin.api__WalletEntry_Address_set)
    __swig_setmethods__["Public"] = _skycoin.api__WalletEntry_Public_set
    __swig_getmethods__["Public"] = _skycoin.api__WalletEntry_Public_get
    if _newclass:
        Public = _swig_property(_skycoin.api__WalletEntry_Public_get, _skycoin.api__WalletEntry_Public_set)

    def __init__(self):
        this = _skycoin.new_api__WalletEntry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__WalletEntry
    __del__ = lambda self: None
api__WalletEntry_swigregister = _skycoin.api__WalletEntry_swigregister
api__WalletEntry_swigregister(api__WalletEntry)

class api__WalletMeta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__WalletMeta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__WalletMeta, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Coin"] = _skycoin.api__WalletMeta_Coin_set
    __swig_getmethods__["Coin"] = _skycoin.api__WalletMeta_Coin_get
    if _newclass:
        Coin = _swig_property(_skycoin.api__WalletMeta_Coin_get, _skycoin.api__WalletMeta_Coin_set)
    __swig_setmethods__["Filename"] = _skycoin.api__WalletMeta_Filename_set
    __swig_getmethods__["Filename"] = _skycoin.api__WalletMeta_Filename_get
    if _newclass:
        Filename = _swig_property(_skycoin.api__WalletMeta_Filename_get, _skycoin.api__WalletMeta_Filename_set)
    __swig_setmethods__["Label"] = _skycoin.api__WalletMeta_Label_set
    __swig_getmethods__["Label"] = _skycoin.api__WalletMeta_Label_get
    if _newclass:
        Label = _swig_property(_skycoin.api__WalletMeta_Label_get, _skycoin.api__WalletMeta_Label_set)
    __swig_setmethods__["Type"] = _skycoin.api__WalletMeta_Type_set
    __swig_getmethods__["Type"] = _skycoin.api__WalletMeta_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.api__WalletMeta_Type_get, _skycoin.api__WalletMeta_Type_set)
    __swig_setmethods__["Version"] = _skycoin.api__WalletMeta_Version_set
    __swig_getmethods__["Version"] = _skycoin.api__WalletMeta_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.api__WalletMeta_Version_get, _skycoin.api__WalletMeta_Version_set)
    __swig_setmethods__["CryptoType"] = _skycoin.api__WalletMeta_CryptoType_set
    __swig_getmethods__["CryptoType"] = _skycoin.api__WalletMeta_CryptoType_get
    if _newclass:
        CryptoType = _swig_property(_skycoin.api__WalletMeta_CryptoType_get, _skycoin.api__WalletMeta_CryptoType_set)
    __swig_setmethods__["Timestamp"] = _skycoin.api__WalletMeta_Timestamp_set
    __swig_getmethods__["Timestamp"] = _skycoin.api__WalletMeta_Timestamp_get
    if _newclass:
        Timestamp = _swig_property(_skycoin.api__WalletMeta_Timestamp_get, _skycoin.api__WalletMeta_Timestamp_set)
    __swig_setmethods__["Encrypted"] = _skycoin.api__WalletMeta_Encrypted_set
    __swig_getmethods__["Encrypted"] = _skycoin.api__WalletMeta_Encrypted_get
    if _newclass:
        Encrypted = _swig_property(_skycoin.api__WalletMeta_Encrypted_get, _skycoin.api__WalletMeta_Encrypted_set)

    def __init__(self):
        this = _skycoin.new_api__WalletMeta()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__WalletMeta
    __del__ = lambda self: None
api__WalletMeta_swigregister = _skycoin.api__WalletMeta_swigregister
api__WalletMeta_swigregister(api__WalletMeta)

class api__WalletResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__WalletResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__WalletResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Meta"] = _skycoin.api__WalletResponse_Meta_set
    __swig_getmethods__["Meta"] = _skycoin.api__WalletResponse_Meta_get
    if _newclass:
        Meta = _swig_property(_skycoin.api__WalletResponse_Meta_get, _skycoin.api__WalletResponse_Meta_set)
    __swig_setmethods__["Entries"] = _skycoin.api__WalletResponse_Entries_set
    __swig_getmethods__["Entries"] = _skycoin.api__WalletResponse_Entries_get
    if _newclass:
        Entries = _swig_property(_skycoin.api__WalletResponse_Entries_get, _skycoin.api__WalletResponse_Entries_set)

    def __init__(self):
        this = _skycoin.new_api__WalletResponse()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__WalletResponse
    __del__ = lambda self: None
api__WalletResponse_swigregister = _skycoin.api__WalletResponse_swigregister
api__WalletResponse_swigregister(api__WalletResponse)

class api__WalletFolder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__WalletFolder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__WalletFolder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.api__WalletFolder_Address_set
    __swig_getmethods__["Address"] = _skycoin.api__WalletFolder_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.api__WalletFolder_Address_get, _skycoin.api__WalletFolder_Address_set)

    def __init__(self):
        this = _skycoin.new_api__WalletFolder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__WalletFolder
    __del__ = lambda self: None
api__WalletFolder_swigregister = _skycoin.api__WalletFolder_swigregister
api__WalletFolder_swigregister(api__WalletFolder)

class api__SpendResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__SpendResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__SpendResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Balance"] = _skycoin.api__SpendResult_Balance_set
    __swig_getmethods__["Balance"] = _skycoin.api__SpendResult_Balance_get
    if _newclass:
        Balance = _swig_property(_skycoin.api__SpendResult_Balance_get, _skycoin.api__SpendResult_Balance_set)
    __swig_setmethods__["Transaction"] = _skycoin.api__SpendResult_Transaction_set
    __swig_getmethods__["Transaction"] = _skycoin.api__SpendResult_Transaction_get
    if _newclass:
        Transaction = _swig_property(_skycoin.api__SpendResult_Transaction_get, _skycoin.api__SpendResult_Transaction_set)
    __swig_setmethods__["Error"] = _skycoin.api__SpendResult_Error_set
    __swig_getmethods__["Error"] = _skycoin.api__SpendResult_Error_get
    if _newclass:
        Error = _swig_property(_skycoin.api__SpendResult_Error_get, _skycoin.api__SpendResult_Error_set)

    def __init__(self):
        this = _skycoin.new_api__SpendResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__SpendResult
    __del__ = lambda self: None
api__SpendResult_swigregister = _skycoin.api__SpendResult_swigregister
api__SpendResult_swigregister(api__SpendResult)

class cli__Balance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__Balance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__Balance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Coins"] = _skycoin.cli__Balance_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.cli__Balance_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.cli__Balance_Coins_get, _skycoin.cli__Balance_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.cli__Balance_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.cli__Balance_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.cli__Balance_Hours_get, _skycoin.cli__Balance_Hours_set)

    def __init__(self):
        this = _skycoin.new_cli__Balance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__Balance
    __del__ = lambda self: None
cli__Balance_swigregister = _skycoin.cli__Balance_swigregister
cli__Balance_swigregister(cli__Balance)

class cli__AddressBalance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__AddressBalance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__AddressBalance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Confirmed"] = _skycoin.cli__AddressBalance_Confirmed_set
    __swig_getmethods__["Confirmed"] = _skycoin.cli__AddressBalance_Confirmed_get
    if _newclass:
        Confirmed = _swig_property(_skycoin.cli__AddressBalance_Confirmed_get, _skycoin.cli__AddressBalance_Confirmed_set)
    __swig_setmethods__["Spendable"] = _skycoin.cli__AddressBalance_Spendable_set
    __swig_getmethods__["Spendable"] = _skycoin.cli__AddressBalance_Spendable_get
    if _newclass:
        Spendable = _swig_property(_skycoin.cli__AddressBalance_Spendable_get, _skycoin.cli__AddressBalance_Spendable_set)
    __swig_setmethods__["Expected"] = _skycoin.cli__AddressBalance_Expected_set
    __swig_getmethods__["Expected"] = _skycoin.cli__AddressBalance_Expected_get
    if _newclass:
        Expected = _swig_property(_skycoin.cli__AddressBalance_Expected_get, _skycoin.cli__AddressBalance_Expected_set)
    __swig_setmethods__["Address"] = _skycoin.cli__AddressBalance_Address_set
    __swig_getmethods__["Address"] = _skycoin.cli__AddressBalance_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.cli__AddressBalance_Address_get, _skycoin.cli__AddressBalance_Address_set)

    def __init__(self):
        this = _skycoin.new_cli__AddressBalance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__AddressBalance
    __del__ = lambda self: None
cli__AddressBalance_swigregister = _skycoin.cli__AddressBalance_swigregister
cli__AddressBalance_swigregister(cli__AddressBalance)

class cli__BalanceResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__BalanceResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__BalanceResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Confirmed"] = _skycoin.cli__BalanceResult_Confirmed_set
    __swig_getmethods__["Confirmed"] = _skycoin.cli__BalanceResult_Confirmed_get
    if _newclass:
        Confirmed = _swig_property(_skycoin.cli__BalanceResult_Confirmed_get, _skycoin.cli__BalanceResult_Confirmed_set)
    __swig_setmethods__["Spendable"] = _skycoin.cli__BalanceResult_Spendable_set
    __swig_getmethods__["Spendable"] = _skycoin.cli__BalanceResult_Spendable_get
    if _newclass:
        Spendable = _swig_property(_skycoin.cli__BalanceResult_Spendable_get, _skycoin.cli__BalanceResult_Spendable_set)
    __swig_setmethods__["Expected"] = _skycoin.cli__BalanceResult_Expected_set
    __swig_getmethods__["Expected"] = _skycoin.cli__BalanceResult_Expected_get
    if _newclass:
        Expected = _swig_property(_skycoin.cli__BalanceResult_Expected_get, _skycoin.cli__BalanceResult_Expected_set)
    __swig_setmethods__["Addresses"] = _skycoin.cli__BalanceResult_Addresses_set
    __swig_getmethods__["Addresses"] = _skycoin.cli__BalanceResult_Addresses_get
    if _newclass:
        Addresses = _swig_property(_skycoin.cli__BalanceResult_Addresses_get, _skycoin.cli__BalanceResult_Addresses_set)

    def __init__(self):
        this = _skycoin.new_cli__BalanceResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__BalanceResult
    __del__ = lambda self: None
cli__BalanceResult_swigregister = _skycoin.cli__BalanceResult_swigregister
cli__BalanceResult_swigregister(cli__BalanceResult)

class cli__Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__Config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["WalletDir"] = _skycoin.cli__Config_WalletDir_set
    __swig_getmethods__["WalletDir"] = _skycoin.cli__Config_WalletDir_get
    if _newclass:
        WalletDir = _swig_property(_skycoin.cli__Config_WalletDir_get, _skycoin.cli__Config_WalletDir_set)
    __swig_setmethods__["WalletName"] = _skycoin.cli__Config_WalletName_set
    __swig_getmethods__["WalletName"] = _skycoin.cli__Config_WalletName_get
    if _newclass:
        WalletName = _swig_property(_skycoin.cli__Config_WalletName_get, _skycoin.cli__Config_WalletName_set)
    __swig_setmethods__["DataDir"] = _skycoin.cli__Config_DataDir_set
    __swig_getmethods__["DataDir"] = _skycoin.cli__Config_DataDir_get
    if _newclass:
        DataDir = _swig_property(_skycoin.cli__Config_DataDir_get, _skycoin.cli__Config_DataDir_set)
    __swig_setmethods__["Coin"] = _skycoin.cli__Config_Coin_set
    __swig_getmethods__["Coin"] = _skycoin.cli__Config_Coin_get
    if _newclass:
        Coin = _swig_property(_skycoin.cli__Config_Coin_get, _skycoin.cli__Config_Coin_set)
    __swig_setmethods__["RPCAddress"] = _skycoin.cli__Config_RPCAddress_set
    __swig_getmethods__["RPCAddress"] = _skycoin.cli__Config_RPCAddress_get
    if _newclass:
        RPCAddress = _swig_property(_skycoin.cli__Config_RPCAddress_get, _skycoin.cli__Config_RPCAddress_set)
    __swig_setmethods__["UseCSRF"] = _skycoin.cli__Config_UseCSRF_set
    __swig_getmethods__["UseCSRF"] = _skycoin.cli__Config_UseCSRF_get
    if _newclass:
        UseCSRF = _swig_property(_skycoin.cli__Config_UseCSRF_get, _skycoin.cli__Config_UseCSRF_set)

    def __init__(self):
        this = _skycoin.new_cli__Config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__Config
    __del__ = lambda self: None
cli__Config_swigregister = _skycoin.cli__Config_swigregister
cli__Config_swigregister(cli__Config)

class cli__WalletLoadError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__WalletLoadError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__WalletLoadError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_unnamed"] = _skycoin.cli__WalletLoadError__unnamed_set
    __swig_getmethods__["_unnamed"] = _skycoin.cli__WalletLoadError__unnamed_get
    if _newclass:
        _unnamed = _swig_property(_skycoin.cli__WalletLoadError__unnamed_get, _skycoin.cli__WalletLoadError__unnamed_set)

    def __init__(self):
        this = _skycoin.new_cli__WalletLoadError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__WalletLoadError
    __del__ = lambda self: None
cli__WalletLoadError_swigregister = _skycoin.cli__WalletLoadError_swigregister
cli__WalletLoadError_swigregister(cli__WalletLoadError)

class cli__WalletSaveError(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__WalletSaveError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__WalletSaveError, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_unnamed"] = _skycoin.cli__WalletSaveError__unnamed_set
    __swig_getmethods__["_unnamed"] = _skycoin.cli__WalletSaveError__unnamed_get
    if _newclass:
        _unnamed = _swig_property(_skycoin.cli__WalletSaveError__unnamed_get, _skycoin.cli__WalletSaveError__unnamed_set)

    def __init__(self):
        this = _skycoin.new_cli__WalletSaveError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__WalletSaveError
    __del__ = lambda self: None
cli__WalletSaveError_swigregister = _skycoin.cli__WalletSaveError_swigregister
cli__WalletSaveError_swigregister(cli__WalletSaveError)

class cli__PasswordFromTerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__PasswordFromTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__PasswordFromTerm, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _skycoin.new_cli__PasswordFromTerm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__PasswordFromTerm
    __del__ = lambda self: None
cli__PasswordFromTerm_swigregister = _skycoin.cli__PasswordFromTerm_swigregister
cli__PasswordFromTerm_swigregister(cli__PasswordFromTerm)

class cli__SendAmount(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__SendAmount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__SendAmount, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Addr"] = _skycoin.cli__SendAmount_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.cli__SendAmount_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.cli__SendAmount_Addr_get, _skycoin.cli__SendAmount_Addr_set)
    __swig_setmethods__["Coins"] = _skycoin.cli__SendAmount_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.cli__SendAmount_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.cli__SendAmount_Coins_get, _skycoin.cli__SendAmount_Coins_set)

    def __init__(self):
        this = _skycoin.new_cli__SendAmount()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__SendAmount
    __del__ = lambda self: None
cli__SendAmount_swigregister = _skycoin.cli__SendAmount_swigregister
cli__SendAmount_swigregister(cli__SendAmount)

# This file is compatible with both classic and new-style classes.


