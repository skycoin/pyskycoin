# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_skycoin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_skycoin')
    _skycoin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_skycoin', [dirname(__file__)])
        except ImportError:
            import _skycoin
            return _skycoin
        if fp is not None:
            try:
                _mod = imp.load_module('_skycoin', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _skycoin = swig_import_helper()
    del swig_import_helper
else:
    import _skycoin
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def destroy_cipher_SecKeys(p):
    return _skycoin.destroy_cipher_SecKeys(p)
destroy_cipher_SecKeys = _skycoin.destroy_cipher_SecKeys

def destroy_cipher_PubKeys(p):
    return _skycoin.destroy_cipher_PubKeys(p)
destroy_cipher_PubKeys = _skycoin.destroy_cipher_PubKeys

def equalSlices(slice1, slice2, elem_size):
    return _skycoin.equalSlices(slice1, slice2, elem_size)
equalSlices = _skycoin.equalSlices

def equalTransactions(t1, t2):
    return _skycoin.equalTransactions(t1, t2)
equalTransactions = _skycoin.equalTransactions

def equalTransactionsArrays(pTxs1, pTxs2):
    return _skycoin.equalTransactionsArrays(pTxs1, pTxs2)
equalTransactionsArrays = _skycoin.equalTransactionsArrays

def equalBlockHeaders(bh1, bh2):
    return _skycoin.equalBlockHeaders(bh1, bh2)
equalBlockHeaders = _skycoin.equalBlockHeaders

def wrap_SKY_cipher_GenerateDeterministicKeyPairsSeed(seed, n):
    return _skycoin.wrap_SKY_cipher_GenerateDeterministicKeyPairsSeed(seed, n)
wrap_SKY_cipher_GenerateDeterministicKeyPairsSeed = _skycoin.wrap_SKY_cipher_GenerateDeterministicKeyPairsSeed
class cipher_PubKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_PubKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_PubKey, name)
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_PubKey___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_PubKey_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_PubKey_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_PubKey_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_PubKey_assignTo(self, data)
    __swig_setmethods__["data"] = _skycoin.cipher_PubKey_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_PubKey_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_PubKey_data_get, _skycoin.cipher_PubKey_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_PubKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_PubKey
    __del__ = lambda self: None
cipher_PubKey_swigregister = _skycoin.cipher_PubKey_swigregister
cipher_PubKey_swigregister(cipher_PubKey)

class cipher_SecKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SecKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SecKey, name)
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_SecKey___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_SecKey_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_SecKey_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_SecKey_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_SecKey_assignTo(self, data)
    __swig_setmethods__["data"] = _skycoin.cipher_SecKey_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_SecKey_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_SecKey_data_get, _skycoin.cipher_SecKey_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_SecKey()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_SecKey
    __del__ = lambda self: None
cipher_SecKey_swigregister = _skycoin.cipher_SecKey_swigregister
cipher_SecKey_swigregister(cipher_SecKey)

class cipher_Ripemd160(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Ripemd160, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Ripemd160, name)
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_Ripemd160___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_Ripemd160_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_Ripemd160_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_Ripemd160_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_Ripemd160_assignTo(self, data)
    __swig_setmethods__["data"] = _skycoin.cipher_Ripemd160_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_Ripemd160_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_Ripemd160_data_get, _skycoin.cipher_Ripemd160_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_Ripemd160()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_Ripemd160
    __del__ = lambda self: None
cipher_Ripemd160_swigregister = _skycoin.cipher_Ripemd160_swigregister
cipher_Ripemd160_swigregister(cipher_Ripemd160)

class cipher_Sig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Sig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Sig, name)
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_Sig___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_Sig_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_Sig_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_Sig_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_Sig_assignTo(self, data)
    __swig_setmethods__["data"] = _skycoin.cipher_Sig_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_Sig_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_Sig_data_get, _skycoin.cipher_Sig_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_Sig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_Sig
    __del__ = lambda self: None
cipher_Sig_swigregister = _skycoin.cipher_Sig_swigregister
cipher_Sig_swigregister(cipher_Sig)

class cipher_SHA256(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SHA256, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SHA256, name)
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_SHA256___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_SHA256_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_SHA256_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_SHA256_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_SHA256_assignTo(self, data)
    __swig_setmethods__["data"] = _skycoin.cipher_SHA256_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_SHA256_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_SHA256_data_get, _skycoin.cipher_SHA256_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_SHA256()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_SHA256
    __del__ = lambda self: None
cipher_SHA256_swigregister = _skycoin.cipher_SHA256_swigregister
cipher_SHA256_swigregister(cipher_SHA256)

class cipher_Checksum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_Checksum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_Checksum, name)
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher_Checksum___eq__(self, a)

    def compareToString(self, str):
        return _skycoin.cipher_Checksum_compareToString(self, str)

    def toStr(self):
        return _skycoin.cipher_Checksum_toStr(self)

    def assignFrom(self, data):
        return _skycoin.cipher_Checksum_assignFrom(self, data)

    def assignTo(self, data):
        return _skycoin.cipher_Checksum_assignTo(self, data)
    __swig_setmethods__["data"] = _skycoin.cipher_Checksum_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_Checksum_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_Checksum_data_get, _skycoin.cipher_Checksum_data_set)

    def __init__(self):
        this = _skycoin.new_cipher_Checksum()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_Checksum
    __del__ = lambda self: None
cipher_Checksum_swigregister = _skycoin.cipher_Checksum_swigregister
cipher_Checksum_swigregister(cipher_Checksum)

class cipher_SecKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SecKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SecKeys, name)
    __repr__ = _swig_repr

    def getAt(self, i):
        return _skycoin.cipher_SecKeys_getAt(self, i)

    def setAt(self, i, seckey):
        return _skycoin.cipher_SecKeys_setAt(self, i, seckey)

    def __eq__(self, a):
        return _skycoin.cipher_SecKeys___eq__(self, a)

    def allocate(self, n):
        return _skycoin.cipher_SecKeys_allocate(self, n)

    def release(self):
        return _skycoin.cipher_SecKeys_release(self)
    __swig_setmethods__["data"] = _skycoin.cipher_SecKeys_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_SecKeys_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_SecKeys_data_get, _skycoin.cipher_SecKeys_data_set)
    __swig_setmethods__["count"] = _skycoin.cipher_SecKeys_count_set
    __swig_getmethods__["count"] = _skycoin.cipher_SecKeys_count_get
    if _newclass:
        count = _swig_property(_skycoin.cipher_SecKeys_count_get, _skycoin.cipher_SecKeys_count_set)

    def __init__(self):
        this = _skycoin.new_cipher_SecKeys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_SecKeys
    __del__ = lambda self: None
cipher_SecKeys_swigregister = _skycoin.cipher_SecKeys_swigregister
cipher_SecKeys_swigregister(cipher_SecKeys)

class cipher_PubKeys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_PubKeys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_PubKeys, name)
    __repr__ = _swig_repr

    def getAt(self, i):
        return _skycoin.cipher_PubKeys_getAt(self, i)

    def setAt(self, i, pubkey):
        return _skycoin.cipher_PubKeys_setAt(self, i, pubkey)

    def __eq__(self, a):
        return _skycoin.cipher_PubKeys___eq__(self, a)

    def allocate(self, n):
        return _skycoin.cipher_PubKeys_allocate(self, n)

    def release(self):
        return _skycoin.cipher_PubKeys_release(self)
    __swig_setmethods__["data"] = _skycoin.cipher_PubKeys_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_PubKeys_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_PubKeys_data_get, _skycoin.cipher_PubKeys_data_set)
    __swig_setmethods__["count"] = _skycoin.cipher_PubKeys_count_set
    __swig_getmethods__["count"] = _skycoin.cipher_PubKeys_count_get
    if _newclass:
        count = _swig_property(_skycoin.cipher_PubKeys_count_get, _skycoin.cipher_PubKeys_count_set)

    def __init__(self):
        this = _skycoin.new_cipher_PubKeys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_PubKeys
    __del__ = lambda self: None
cipher_PubKeys_swigregister = _skycoin.cipher_PubKeys_swigregister
cipher_PubKeys_swigregister(cipher_PubKeys)

class cipher_SHA256s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher_SHA256s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher_SHA256s, name)
    __repr__ = _swig_repr

    def getAt(self, i):
        return _skycoin.cipher_SHA256s_getAt(self, i)

    def setAt(self, i, hash):
        return _skycoin.cipher_SHA256s_setAt(self, i, hash)

    def __eq__(self, a):
        return _skycoin.cipher_SHA256s___eq__(self, a)

    def allocate(self, n):
        return _skycoin.cipher_SHA256s_allocate(self, n)

    def release(self):
        return _skycoin.cipher_SHA256s_release(self)
    __swig_setmethods__["data"] = _skycoin.cipher_SHA256s_data_set
    __swig_getmethods__["data"] = _skycoin.cipher_SHA256s_data_get
    if _newclass:
        data = _swig_property(_skycoin.cipher_SHA256s_data_get, _skycoin.cipher_SHA256s_data_set)
    __swig_setmethods__["count"] = _skycoin.cipher_SHA256s_count_set
    __swig_getmethods__["count"] = _skycoin.cipher_SHA256s_count_get
    if _newclass:
        count = _swig_property(_skycoin.cipher_SHA256s_count_get, _skycoin.cipher_SHA256s_count_set)

    def __init__(self):
        this = _skycoin.new_cipher_SHA256s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher_SHA256s
    __del__ = lambda self: None
cipher_SHA256s_swigregister = _skycoin.cipher_SHA256s_swigregister
cipher_SHA256s_swigregister(cipher_SHA256s)

class coin_UxOutArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin_UxOutArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin_UxOutArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.coin_UxOutArray_data_set
    __swig_getmethods__["data"] = _skycoin.coin_UxOutArray_data_get
    if _newclass:
        data = _swig_property(_skycoin.coin_UxOutArray_data_get, _skycoin.coin_UxOutArray_data_set)
    __swig_setmethods__["count"] = _skycoin.coin_UxOutArray_count_set
    __swig_getmethods__["count"] = _skycoin.coin_UxOutArray_count_get
    if _newclass:
        count = _swig_property(_skycoin.coin_UxOutArray_count_get, _skycoin.coin_UxOutArray_count_set)

    def __init__(self):
        this = _skycoin.new_coin_UxOutArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin_UxOutArray
    __del__ = lambda self: None
coin_UxOutArray_swigregister = _skycoin.coin_UxOutArray_swigregister
coin_UxOutArray_swigregister(coin_UxOutArray)

class _GoString_(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _GoString_, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _GoString_, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _skycoin._GoString__p_set
    __swig_getmethods__["p"] = _skycoin._GoString__p_get
    if _newclass:
        p = _swig_property(_skycoin._GoString__p_get, _skycoin._GoString__p_set)
    __swig_setmethods__["n"] = _skycoin._GoString__n_set
    __swig_getmethods__["n"] = _skycoin._GoString__n_get
    if _newclass:
        n = _swig_property(_skycoin._GoString__n_get, _skycoin._GoString__n_set)

    def __init__(self):
        this = _skycoin.new__GoString_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete__GoString_
    __del__ = lambda self: None
_GoString__swigregister = _skycoin._GoString__swigregister
_GoString__swigregister(_GoString_)

class GoInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoInterface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t"] = _skycoin.GoInterface_t_set
    __swig_getmethods__["t"] = _skycoin.GoInterface_t_get
    if _newclass:
        t = _swig_property(_skycoin.GoInterface_t_get, _skycoin.GoInterface_t_set)
    __swig_setmethods__["v"] = _skycoin.GoInterface_v_set
    __swig_getmethods__["v"] = _skycoin.GoInterface_v_get
    if _newclass:
        v = _swig_property(_skycoin.GoInterface_v_get, _skycoin.GoInterface_v_set)

    def __init__(self):
        this = _skycoin.new_GoInterface()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_GoInterface
    __del__ = lambda self: None
GoInterface_swigregister = _skycoin.GoInterface_swigregister
GoInterface_swigregister(GoInterface)

class GoSlice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoSlice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoSlice, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _skycoin.GoSlice_data_set
    __swig_getmethods__["data"] = _skycoin.GoSlice_data_get
    if _newclass:
        data = _swig_property(_skycoin.GoSlice_data_get, _skycoin.GoSlice_data_set)
    __swig_setmethods__["len"] = _skycoin.GoSlice_len_set
    __swig_getmethods__["len"] = _skycoin.GoSlice_len_get
    if _newclass:
        len = _swig_property(_skycoin.GoSlice_len_get, _skycoin.GoSlice_len_set)
    __swig_setmethods__["cap"] = _skycoin.GoSlice_cap_set
    __swig_getmethods__["cap"] = _skycoin.GoSlice_cap_get
    if _newclass:
        cap = _swig_property(_skycoin.GoSlice_cap_get, _skycoin.GoSlice_cap_set)

    def __init__(self):
        this = _skycoin.new_GoSlice()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_GoSlice
    __del__ = lambda self: None
GoSlice_swigregister = _skycoin.GoSlice_swigregister
GoSlice_swigregister(GoSlice)


def SKY_base58_String2Hex(p0):
    return _skycoin.SKY_base58_String2Hex(p0)
SKY_base58_String2Hex = _skycoin.SKY_base58_String2Hex

def SKY_base58_Base58_ToInt(p0):
    return _skycoin.SKY_base58_Base58_ToInt(p0)
SKY_base58_Base58_ToInt = _skycoin.SKY_base58_Base58_ToInt

def SKY_base58_Base58_ToHex(p0):
    return _skycoin.SKY_base58_Base58_ToHex(p0)
SKY_base58_Base58_ToHex = _skycoin.SKY_base58_Base58_ToHex

def SKY_base58_Base58_Base582Int(p0):
    return _skycoin.SKY_base58_Base58_Base582Int(p0)
SKY_base58_Base58_Base582Int = _skycoin.SKY_base58_Base58_Base582Int

def SKY_base58_Base582Hex(p0):
    return _skycoin.SKY_base58_Base582Hex(p0)
SKY_base58_Base582Hex = _skycoin.SKY_base58_Base582Hex

def SKY_base58_Base58_BitHex(p0):
    return _skycoin.SKY_base58_Base58_BitHex(p0)
SKY_base58_Base58_BitHex = _skycoin.SKY_base58_Base58_BitHex

def SKY_base58_Int2Base58(p0):
    return _skycoin.SKY_base58_Int2Base58(p0)
SKY_base58_Int2Base58 = _skycoin.SKY_base58_Int2Base58

def SKY_base58_Hex2Base58(p0):
    return _skycoin.SKY_base58_Hex2Base58(p0)
SKY_base58_Hex2Base58 = _skycoin.SKY_base58_Hex2Base58

def SKY_base58_Hex2Base58String(p0):
    return _skycoin.SKY_base58_Hex2Base58String(p0)
SKY_base58_Hex2Base58String = _skycoin.SKY_base58_Hex2Base58String

def SKY_base58_Hex2Base58Str(p0):
    return _skycoin.SKY_base58_Hex2Base58Str(p0)
SKY_base58_Hex2Base58Str = _skycoin.SKY_base58_Hex2Base58Str

def SKY_wallet_NewReadableEntry(p0):
    return _skycoin.SKY_wallet_NewReadableEntry(p0)
SKY_wallet_NewReadableEntry = _skycoin.SKY_wallet_NewReadableEntry

def SKY_wallet_LoadReadableEntry(p0):
    return _skycoin.SKY_wallet_LoadReadableEntry(p0)
SKY_wallet_LoadReadableEntry = _skycoin.SKY_wallet_LoadReadableEntry

def SKY_wallet_NewReadableEntryFromPubkey(p0):
    return _skycoin.SKY_wallet_NewReadableEntryFromPubkey(p0)
SKY_wallet_NewReadableEntryFromPubkey = _skycoin.SKY_wallet_NewReadableEntryFromPubkey

def SKY_wallet_ReadableEntry_Save(p0, p1):
    return _skycoin.SKY_wallet_ReadableEntry_Save(p0, p1)
SKY_wallet_ReadableEntry_Save = _skycoin.SKY_wallet_ReadableEntry_Save

def SKY_wallet_LoadReadableWallet(p0):
    return _skycoin.SKY_wallet_LoadReadableWallet(p0)
SKY_wallet_LoadReadableWallet = _skycoin.SKY_wallet_LoadReadableWallet

def SKY_wallet_ReadableWallet_Save(p0, p1):
    return _skycoin.SKY_wallet_ReadableWallet_Save(p0, p1)
SKY_wallet_ReadableWallet_Save = _skycoin.SKY_wallet_ReadableWallet_Save

def SKY_wallet_ReadableWallet_Load(p0, p1):
    return _skycoin.SKY_wallet_ReadableWallet_Load(p0, p1)
SKY_wallet_ReadableWallet_Load = _skycoin.SKY_wallet_ReadableWallet_Load

def SKY_wallet_ReadableWallet_Erase(p0):
    return _skycoin.SKY_wallet_ReadableWallet_Erase(p0)
SKY_wallet_ReadableWallet_Erase = _skycoin.SKY_wallet_ReadableWallet_Erase

def SKY_cli_GetWalletOutputsFromFile(p0, p1, p2):
    return _skycoin.SKY_cli_GetWalletOutputsFromFile(p0, p1, p2)
SKY_cli_GetWalletOutputsFromFile = _skycoin.SKY_cli_GetWalletOutputsFromFile

def SKY_cli_GetWalletOutputs(p0, p2):
    return _skycoin.SKY_cli_GetWalletOutputs(p0, p2)
SKY_cli_GetWalletOutputs = _skycoin.SKY_cli_GetWalletOutputs

def SKY_secp256k1go_Field_String(p0):
    return _skycoin.SKY_secp256k1go_Field_String(p0)
SKY_secp256k1go_Field_String = _skycoin.SKY_secp256k1go_Field_String

def SKY_secp256k1go_Field_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Print(p0, p1)
SKY_secp256k1go_Field_Print = _skycoin.SKY_secp256k1go_Field_Print

def SKY_secp256k1go_Field_SetB32(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetB32(p0, p1)
SKY_secp256k1go_Field_SetB32 = _skycoin.SKY_secp256k1go_Field_SetB32

def SKY_secp256k1go_Field_SetBytes(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetBytes(p0, p1)
SKY_secp256k1go_Field_SetBytes = _skycoin.SKY_secp256k1go_Field_SetBytes

def SKY_secp256k1go_Field_SetHex(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetHex(p0, p1)
SKY_secp256k1go_Field_SetHex = _skycoin.SKY_secp256k1go_Field_SetHex

def SKY_secp256k1go_Field_IsOdd(p0):
    return _skycoin.SKY_secp256k1go_Field_IsOdd(p0)
SKY_secp256k1go_Field_IsOdd = _skycoin.SKY_secp256k1go_Field_IsOdd

def SKY_secp256k1go_Field_IsZero(p0):
    return _skycoin.SKY_secp256k1go_Field_IsZero(p0)
SKY_secp256k1go_Field_IsZero = _skycoin.SKY_secp256k1go_Field_IsZero

def SKY_secp256k1go_Field_SetInt(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetInt(p0, p1)
SKY_secp256k1go_Field_SetInt = _skycoin.SKY_secp256k1go_Field_SetInt

def SKY_secp256k1go_Field_Normalize(p0):
    return _skycoin.SKY_secp256k1go_Field_Normalize(p0)
SKY_secp256k1go_Field_Normalize = _skycoin.SKY_secp256k1go_Field_Normalize

def SKY_secp256k1go_Field_GetB32(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_GetB32(p0, p1)
SKY_secp256k1go_Field_GetB32 = _skycoin.SKY_secp256k1go_Field_GetB32

def SKY_secp256k1go_Field_Equals(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Equals(p0, p1)
SKY_secp256k1go_Field_Equals = _skycoin.SKY_secp256k1go_Field_Equals

def SKY_secp256k1go_Field_SetAdd(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_SetAdd(p0, p1)
SKY_secp256k1go_Field_SetAdd = _skycoin.SKY_secp256k1go_Field_SetAdd

def SKY_secp256k1go_Field_MulInt(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_MulInt(p0, p1)
SKY_secp256k1go_Field_MulInt = _skycoin.SKY_secp256k1go_Field_MulInt

def SKY_secp256k1go_Field_Negate(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_Field_Negate(p0, p1, p2)
SKY_secp256k1go_Field_Negate = _skycoin.SKY_secp256k1go_Field_Negate

def SKY_secp256k1go_Field_Inv(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Inv(p0, p1)
SKY_secp256k1go_Field_Inv = _skycoin.SKY_secp256k1go_Field_Inv

def SKY_secp256k1go_Field_Sqrt(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Sqrt(p0, p1)
SKY_secp256k1go_Field_Sqrt = _skycoin.SKY_secp256k1go_Field_Sqrt

def SKY_secp256k1go_Field_InvVar(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_InvVar(p0, p1)
SKY_secp256k1go_Field_InvVar = _skycoin.SKY_secp256k1go_Field_InvVar

def SKY_secp256k1go_Field_Mul(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_Field_Mul(p0, p1, p2)
SKY_secp256k1go_Field_Mul = _skycoin.SKY_secp256k1go_Field_Mul

def SKY_secp256k1go_Field_Sqr(p0, p1):
    return _skycoin.SKY_secp256k1go_Field_Sqr(p0, p1)
SKY_secp256k1go_Field_Sqr = _skycoin.SKY_secp256k1go_Field_Sqr

def SKY_api_NewWalletResponse(p0):
    return _skycoin.SKY_api_NewWalletResponse(p0)
SKY_api_NewWalletResponse = _skycoin.SKY_api_NewWalletResponse

def SKY_cipher_PubKeySlice_Len(*args):
    return _skycoin.SKY_cipher_PubKeySlice_Len(*args)
SKY_cipher_PubKeySlice_Len = _skycoin.SKY_cipher_PubKeySlice_Len

def SKY_cipher_PubKeySlice_Less(*args):
    return _skycoin.SKY_cipher_PubKeySlice_Less(*args)
SKY_cipher_PubKeySlice_Less = _skycoin.SKY_cipher_PubKeySlice_Less

def SKY_cipher_PubKeySlice_Swap(*args):
    return _skycoin.SKY_cipher_PubKeySlice_Swap(*args)
SKY_cipher_PubKeySlice_Swap = _skycoin.SKY_cipher_PubKeySlice_Swap

def SKY_cipher_RandByte(p0):
    return _skycoin.SKY_cipher_RandByte(p0)
SKY_cipher_RandByte = _skycoin.SKY_cipher_RandByte

def SKY_cipher_NewPubKey(p0, p1):
    return _skycoin.SKY_cipher_NewPubKey(p0, p1)
SKY_cipher_NewPubKey = _skycoin.SKY_cipher_NewPubKey

def SKY_cipher_MustPubKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_MustPubKeyFromHex(p0, p1)
SKY_cipher_MustPubKeyFromHex = _skycoin.SKY_cipher_MustPubKeyFromHex

def SKY_cipher_PubKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_PubKeyFromHex(p0, p1)
SKY_cipher_PubKeyFromHex = _skycoin.SKY_cipher_PubKeyFromHex

def SKY_cipher_PubKeyFromSecKey(p0, p1):
    return _skycoin.SKY_cipher_PubKeyFromSecKey(p0, p1)
SKY_cipher_PubKeyFromSecKey = _skycoin.SKY_cipher_PubKeyFromSecKey

def SKY_cipher_PubKeyFromSig(p0, p1, p2):
    return _skycoin.SKY_cipher_PubKeyFromSig(p0, p1, p2)
SKY_cipher_PubKeyFromSig = _skycoin.SKY_cipher_PubKeyFromSig

def SKY_cipher_PubKey_Verify(p0):
    return _skycoin.SKY_cipher_PubKey_Verify(p0)
SKY_cipher_PubKey_Verify = _skycoin.SKY_cipher_PubKey_Verify

def SKY_cipher_PubKey_Hex(p0):
    return _skycoin.SKY_cipher_PubKey_Hex(p0)
SKY_cipher_PubKey_Hex = _skycoin.SKY_cipher_PubKey_Hex

def SKY_cipher_PubKey_ToAddressHash(p0, p1):
    return _skycoin.SKY_cipher_PubKey_ToAddressHash(p0, p1)
SKY_cipher_PubKey_ToAddressHash = _skycoin.SKY_cipher_PubKey_ToAddressHash

def SKY_cipher_NewSecKey(p0, p1):
    return _skycoin.SKY_cipher_NewSecKey(p0, p1)
SKY_cipher_NewSecKey = _skycoin.SKY_cipher_NewSecKey

def SKY_cipher_MustSecKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_MustSecKeyFromHex(p0, p1)
SKY_cipher_MustSecKeyFromHex = _skycoin.SKY_cipher_MustSecKeyFromHex

def SKY_cipher_SecKeyFromHex(p0, p1):
    return _skycoin.SKY_cipher_SecKeyFromHex(p0, p1)
SKY_cipher_SecKeyFromHex = _skycoin.SKY_cipher_SecKeyFromHex

def SKY_cipher_SecKey_Verify(p0):
    return _skycoin.SKY_cipher_SecKey_Verify(p0)
SKY_cipher_SecKey_Verify = _skycoin.SKY_cipher_SecKey_Verify

def SKY_cipher_SecKey_Hex(p0):
    return _skycoin.SKY_cipher_SecKey_Hex(p0)
SKY_cipher_SecKey_Hex = _skycoin.SKY_cipher_SecKey_Hex

def SKY_cipher_ECDH(p0, p1):
    return _skycoin.SKY_cipher_ECDH(p0, p1)
SKY_cipher_ECDH = _skycoin.SKY_cipher_ECDH

def SKY_cipher_NewSig(p0, p1):
    return _skycoin.SKY_cipher_NewSig(p0, p1)
SKY_cipher_NewSig = _skycoin.SKY_cipher_NewSig

def SKY_cipher_MustSigFromHex(p0, p1):
    return _skycoin.SKY_cipher_MustSigFromHex(p0, p1)
SKY_cipher_MustSigFromHex = _skycoin.SKY_cipher_MustSigFromHex

def SKY_cipher_SigFromHex(p0, p1):
    return _skycoin.SKY_cipher_SigFromHex(p0, p1)
SKY_cipher_SigFromHex = _skycoin.SKY_cipher_SigFromHex

def SKY_cipher_Sig_Hex(p0):
    return _skycoin.SKY_cipher_Sig_Hex(p0)
SKY_cipher_Sig_Hex = _skycoin.SKY_cipher_Sig_Hex

def SKY_cipher_SignHash(p0, p1, p2):
    return _skycoin.SKY_cipher_SignHash(p0, p1, p2)
SKY_cipher_SignHash = _skycoin.SKY_cipher_SignHash

def SKY_cipher_ChkSig(p0, p1, p2):
    return _skycoin.SKY_cipher_ChkSig(p0, p1, p2)
SKY_cipher_ChkSig = _skycoin.SKY_cipher_ChkSig

def SKY_cipher_VerifySignedHash(p0, p1):
    return _skycoin.SKY_cipher_VerifySignedHash(p0, p1)
SKY_cipher_VerifySignedHash = _skycoin.SKY_cipher_VerifySignedHash

def SKY_cipher_VerifySignature(p0, p1, p2):
    return _skycoin.SKY_cipher_VerifySignature(p0, p1, p2)
SKY_cipher_VerifySignature = _skycoin.SKY_cipher_VerifySignature

def SKY_cipher_GenerateKeyPair(p0, p1):
    return _skycoin.SKY_cipher_GenerateKeyPair(p0, p1)
SKY_cipher_GenerateKeyPair = _skycoin.SKY_cipher_GenerateKeyPair

def SKY_cipher_GenerateDeterministicKeyPair(p0, p1, p2):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPair(p0, p1, p2)
SKY_cipher_GenerateDeterministicKeyPair = _skycoin.SKY_cipher_GenerateDeterministicKeyPair

def SKY_cipher_DeterministicKeyPairIterator(p0, p2, p3):
    return _skycoin.SKY_cipher_DeterministicKeyPairIterator(p0, p2, p3)
SKY_cipher_DeterministicKeyPairIterator = _skycoin.SKY_cipher_DeterministicKeyPairIterator

def SKY_cipher_GenerateDeterministicKeyPairs(*args):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPairs(*args)
SKY_cipher_GenerateDeterministicKeyPairs = _skycoin.SKY_cipher_GenerateDeterministicKeyPairs

def SKY_cipher_GenerateDeterministicKeyPairsSeed(p0, p1):
    return _skycoin.SKY_cipher_GenerateDeterministicKeyPairsSeed(p0, p1)
SKY_cipher_GenerateDeterministicKeyPairsSeed = _skycoin.SKY_cipher_GenerateDeterministicKeyPairsSeed

def SKY_cipher_TestSecKey(p0):
    return _skycoin.SKY_cipher_TestSecKey(p0)
SKY_cipher_TestSecKey = _skycoin.SKY_cipher_TestSecKey

def SKY_cipher_TestSecKeyHash(p0, p1):
    return _skycoin.SKY_cipher_TestSecKeyHash(p0, p1)
SKY_cipher_TestSecKeyHash = _skycoin.SKY_cipher_TestSecKeyHash

def SKY_secp256k1go_DecompressPoint(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_DecompressPoint(p0, p1, p2)
SKY_secp256k1go_DecompressPoint = _skycoin.SKY_secp256k1go_DecompressPoint

def SKY_secp256k1go_RecoverPublicKey(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_RecoverPublicKey(p0, p1, p2)
SKY_secp256k1go_RecoverPublicKey = _skycoin.SKY_secp256k1go_RecoverPublicKey

def SKY_secp256k1go_Multiply(p0, p1):
    return _skycoin.SKY_secp256k1go_Multiply(p0, p1)
SKY_secp256k1go_Multiply = _skycoin.SKY_secp256k1go_Multiply

def SKY_secp256k1go_BaseMultiply(p0):
    return _skycoin.SKY_secp256k1go_BaseMultiply(p0)
SKY_secp256k1go_BaseMultiply = _skycoin.SKY_secp256k1go_BaseMultiply

def SKY_secp256k1go_BaseMultiplyAdd(p0, p1):
    return _skycoin.SKY_secp256k1go_BaseMultiplyAdd(p0, p1)
SKY_secp256k1go_BaseMultiplyAdd = _skycoin.SKY_secp256k1go_BaseMultiplyAdd

def SKY_secp256k1go_GeneratePublicKey(p0):
    return _skycoin.SKY_secp256k1go_GeneratePublicKey(p0)
SKY_secp256k1go_GeneratePublicKey = _skycoin.SKY_secp256k1go_GeneratePublicKey

def SKY_secp256k1go_SeckeyIsValid(p0):
    return _skycoin.SKY_secp256k1go_SeckeyIsValid(p0)
SKY_secp256k1go_SeckeyIsValid = _skycoin.SKY_secp256k1go_SeckeyIsValid

def SKY_secp256k1go_PubkeyIsValid(p0):
    return _skycoin.SKY_secp256k1go_PubkeyIsValid(p0)
SKY_secp256k1go_PubkeyIsValid = _skycoin.SKY_secp256k1go_PubkeyIsValid

def SKY_file_InitDataDir(p0):
    return _skycoin.SKY_file_InitDataDir(p0)
SKY_file_InitDataDir = _skycoin.SKY_file_InitDataDir

def SKY_file_UserHome():
    return _skycoin.SKY_file_UserHome()
SKY_file_UserHome = _skycoin.SKY_file_UserHome

def SKY_file_ResolveResourceDirectory(p0):
    return _skycoin.SKY_file_ResolveResourceDirectory(p0)
SKY_file_ResolveResourceDirectory = _skycoin.SKY_file_ResolveResourceDirectory

def SKY_file_DetermineResourcePath(p0, p1, p2):
    return _skycoin.SKY_file_DetermineResourcePath(p0, p1, p2)
SKY_file_DetermineResourcePath = _skycoin.SKY_file_DetermineResourcePath

def SKY_secp256k1_SumSHA256(p0):
    return _skycoin.SKY_secp256k1_SumSHA256(p0)
SKY_secp256k1_SumSHA256 = _skycoin.SKY_secp256k1_SumSHA256

def SKY_secp256k1_RandByte(p0):
    return _skycoin.SKY_secp256k1_RandByte(p0)
SKY_secp256k1_RandByte = _skycoin.SKY_secp256k1_RandByte

def SKY_api_NewCreateTransactionResponse(p0, p1):
    return _skycoin.SKY_api_NewCreateTransactionResponse(p0, p1)
SKY_api_NewCreateTransactionResponse = _skycoin.SKY_api_NewCreateTransactionResponse

def SKY_api_NewCreatedTransaction(p0, p1):
    return _skycoin.SKY_api_NewCreatedTransaction(p0, p1)
SKY_api_NewCreatedTransaction = _skycoin.SKY_api_NewCreatedTransaction

def SKY_api_CreatedTransaction_ToTransaction(p0):
    return _skycoin.SKY_api_CreatedTransaction_ToTransaction(p0)
SKY_api_CreatedTransaction_ToTransaction = _skycoin.SKY_api_CreatedTransaction_ToTransaction

def SKY_api_NewCreatedTransactionOutput(p0, p1):
    return _skycoin.SKY_api_NewCreatedTransactionOutput(p0, p1)
SKY_api_NewCreatedTransactionOutput = _skycoin.SKY_api_NewCreatedTransactionOutput

def SKY_api_NewCreatedTransactionInput(p0):
    return _skycoin.SKY_api_NewCreatedTransactionInput(p0)
SKY_api_NewCreatedTransactionInput = _skycoin.SKY_api_NewCreatedTransactionInput

def SKY_browser_Open(p0):
    return _skycoin.SKY_browser_Open(p0)
SKY_browser_Open = _skycoin.SKY_browser_Open

def SKY_cipher_DecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_DecodeBase58Address(p0, p1)
SKY_cipher_DecodeBase58Address = _skycoin.SKY_cipher_DecodeBase58Address

def SKY_cipher_MustDecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_MustDecodeBase58Address(p0, p1)
SKY_cipher_MustDecodeBase58Address = _skycoin.SKY_cipher_MustDecodeBase58Address

def SKY_cipher_BitcoinMustDecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_BitcoinMustDecodeBase58Address(p0, p1)
SKY_cipher_BitcoinMustDecodeBase58Address = _skycoin.SKY_cipher_BitcoinMustDecodeBase58Address

def SKY_cipher_AddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_AddressFromBytes(p0, p1)
SKY_cipher_AddressFromBytes = _skycoin.SKY_cipher_AddressFromBytes

def SKY_cipher_AddressFromPubKey(p0, p1):
    return _skycoin.SKY_cipher_AddressFromPubKey(p0, p1)
SKY_cipher_AddressFromPubKey = _skycoin.SKY_cipher_AddressFromPubKey

def SKY_cipher_AddressFromSecKey(p0, p1):
    return _skycoin.SKY_cipher_AddressFromSecKey(p0, p1)
SKY_cipher_AddressFromSecKey = _skycoin.SKY_cipher_AddressFromSecKey

def SKY_cipher_BitcoinDecodeBase58Address(p0, p1):
    return _skycoin.SKY_cipher_BitcoinDecodeBase58Address(p0, p1)
SKY_cipher_BitcoinDecodeBase58Address = _skycoin.SKY_cipher_BitcoinDecodeBase58Address

def SKY_cipher_MustAddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_MustAddressFromBytes(p0, p1)
SKY_cipher_MustAddressFromBytes = _skycoin.SKY_cipher_MustAddressFromBytes

def SKY_cipher_Address_Bytes(p0):
    return _skycoin.SKY_cipher_Address_Bytes(p0)
SKY_cipher_Address_Bytes = _skycoin.SKY_cipher_Address_Bytes

def SKY_cipher_Address_Null(p0):
    return _skycoin.SKY_cipher_Address_Null(p0)
SKY_cipher_Address_Null = _skycoin.SKY_cipher_Address_Null

def SKY_cipher_Address_BitcoinBytes(p0):
    return _skycoin.SKY_cipher_Address_BitcoinBytes(p0)
SKY_cipher_Address_BitcoinBytes = _skycoin.SKY_cipher_Address_BitcoinBytes

def SKY_cipher_Address_Verify(p0, p1):
    return _skycoin.SKY_cipher_Address_Verify(p0, p1)
SKY_cipher_Address_Verify = _skycoin.SKY_cipher_Address_Verify

def SKY_cipher_Address_String(p0):
    return _skycoin.SKY_cipher_Address_String(p0)
SKY_cipher_Address_String = _skycoin.SKY_cipher_Address_String

def SKY_cipher_Address_BitcoinString(p0):
    return _skycoin.SKY_cipher_Address_BitcoinString(p0)
SKY_cipher_Address_BitcoinString = _skycoin.SKY_cipher_Address_BitcoinString

def SKY_cipher_Address_Checksum(p0, p1):
    return _skycoin.SKY_cipher_Address_Checksum(p0, p1)
SKY_cipher_Address_Checksum = _skycoin.SKY_cipher_Address_Checksum

def SKY_cipher_Address_BitcoinChecksum(p0, p1):
    return _skycoin.SKY_cipher_Address_BitcoinChecksum(p0, p1)
SKY_cipher_Address_BitcoinChecksum = _skycoin.SKY_cipher_Address_BitcoinChecksum

def SKY_cipher_BitcoinAddressFromPubkey(p0):
    return _skycoin.SKY_cipher_BitcoinAddressFromPubkey(p0)
SKY_cipher_BitcoinAddressFromPubkey = _skycoin.SKY_cipher_BitcoinAddressFromPubkey

def SKY_cipher_BitcoinWalletImportFormatFromSeckey(p0):
    return _skycoin.SKY_cipher_BitcoinWalletImportFormatFromSeckey(p0)
SKY_cipher_BitcoinWalletImportFormatFromSeckey = _skycoin.SKY_cipher_BitcoinWalletImportFormatFromSeckey

def SKY_cipher_BitcoinAddressFromBytes(p0, p1):
    return _skycoin.SKY_cipher_BitcoinAddressFromBytes(p0, p1)
SKY_cipher_BitcoinAddressFromBytes = _skycoin.SKY_cipher_BitcoinAddressFromBytes

def SKY_cipher_SecKeyFromWalletImportFormat(p0, p1):
    return _skycoin.SKY_cipher_SecKeyFromWalletImportFormat(p0, p1)
SKY_cipher_SecKeyFromWalletImportFormat = _skycoin.SKY_cipher_SecKeyFromWalletImportFormat

def SKY_cipher_MustSecKeyFromWalletImportFormat(p0, p1):
    return _skycoin.SKY_cipher_MustSecKeyFromWalletImportFormat(p0, p1)
SKY_cipher_MustSecKeyFromWalletImportFormat = _skycoin.SKY_cipher_MustSecKeyFromWalletImportFormat

def SKY_testutil_MakeAddress(p0):
    return _skycoin.SKY_testutil_MakeAddress(p0)
SKY_testutil_MakeAddress = _skycoin.SKY_testutil_MakeAddress

def SKY_cli_CreateRawTxFromWallet(p0, p1, p2, p3, p4):
    return _skycoin.SKY_cli_CreateRawTxFromWallet(p0, p1, p2, p3, p4)
SKY_cli_CreateRawTxFromWallet = _skycoin.SKY_cli_CreateRawTxFromWallet

def SKY_cli_CreateRawTxFromAddress(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_cli_CreateRawTxFromAddress(p0, p1, p2, p3, p4, p5)
SKY_cli_CreateRawTxFromAddress = _skycoin.SKY_cli_CreateRawTxFromAddress

def SKY_cli_CreateRawTx(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_cli_CreateRawTx(p0, p1, p2, p3, p4, p5)
SKY_cli_CreateRawTx = _skycoin.SKY_cli_CreateRawTx

def SKY_cli_NewTransaction(p0, p1, p2):
    return _skycoin.SKY_cli_NewTransaction(p0, p1, p2)
SKY_cli_NewTransaction = _skycoin.SKY_cli_NewTransaction

def SKY_apputil_CatchInterruptPanic():
    return _skycoin.SKY_apputil_CatchInterruptPanic()
SKY_apputil_CatchInterruptPanic = _skycoin.SKY_apputil_CatchInterruptPanic

def SKY_apputil_CatchDebug():
    return _skycoin.SKY_apputil_CatchDebug()
SKY_apputil_CatchDebug = _skycoin.SKY_apputil_CatchDebug

def SKY_apputil_PrintProgramStatus():
    return _skycoin.SKY_apputil_PrintProgramStatus()
SKY_apputil_PrintProgramStatus = _skycoin.SKY_apputil_PrintProgramStatus

def SKY_utc_UnixNow():
    return _skycoin.SKY_utc_UnixNow()
SKY_utc_UnixNow = _skycoin.SKY_utc_UnixNow

def SKY_httphelper_Address_UnmarshalJSON(p0, p1):
    return _skycoin.SKY_httphelper_Address_UnmarshalJSON(p0, p1)
SKY_httphelper_Address_UnmarshalJSON = _skycoin.SKY_httphelper_Address_UnmarshalJSON

def SKY_httphelper_Address_MarshalJSON(p0):
    return _skycoin.SKY_httphelper_Address_MarshalJSON(p0)
SKY_httphelper_Address_MarshalJSON = _skycoin.SKY_httphelper_Address_MarshalJSON

def SKY_httphelper_Coins_UnmarshalJSON(p1):
    return _skycoin.SKY_httphelper_Coins_UnmarshalJSON(p1)
SKY_httphelper_Coins_UnmarshalJSON = _skycoin.SKY_httphelper_Coins_UnmarshalJSON

def SKY_httphelper_Coins_MarshalJSON():
    return _skycoin.SKY_httphelper_Coins_MarshalJSON()
SKY_httphelper_Coins_MarshalJSON = _skycoin.SKY_httphelper_Coins_MarshalJSON

def SKY_httphelper_Coins_Value():
    return _skycoin.SKY_httphelper_Coins_Value()
SKY_httphelper_Coins_Value = _skycoin.SKY_httphelper_Coins_Value

def SKY_httphelper_Hours_UnmarshalJSON(p1):
    return _skycoin.SKY_httphelper_Hours_UnmarshalJSON(p1)
SKY_httphelper_Hours_UnmarshalJSON = _skycoin.SKY_httphelper_Hours_UnmarshalJSON

def SKY_httphelper_Hours_MarshalJSON():
    return _skycoin.SKY_httphelper_Hours_MarshalJSON()
SKY_httphelper_Hours_MarshalJSON = _skycoin.SKY_httphelper_Hours_MarshalJSON

def SKY_httphelper_Hours_Value():
    return _skycoin.SKY_httphelper_Hours_Value()
SKY_httphelper_Hours_Value = _skycoin.SKY_httphelper_Hours_Value

def SKY_cli_CheckWalletBalance(p0, p1, p2):
    return _skycoin.SKY_cli_CheckWalletBalance(p0, p1, p2)
SKY_cli_CheckWalletBalance = _skycoin.SKY_cli_CheckWalletBalance

def SKY_cli_GetBalanceOfAddresses(p0, p1, p2):
    return _skycoin.SKY_cli_GetBalanceOfAddresses(p0, p1, p2)
SKY_cli_GetBalanceOfAddresses = _skycoin.SKY_cli_GetBalanceOfAddresses

def SKY_poly1305_Verify(p1):
    return _skycoin.SKY_poly1305_Verify(p1)
SKY_poly1305_Verify = _skycoin.SKY_poly1305_Verify

def SKY_api_NewClient(p0):
    return _skycoin.SKY_api_NewClient(p0)
SKY_api_NewClient = _skycoin.SKY_api_NewClient

def SKY_api_Client_CSRF(p0):
    return _skycoin.SKY_api_Client_CSRF(p0)
SKY_api_Client_CSRF = _skycoin.SKY_api_Client_CSRF

def SKY_api_Client_Version(p0):
    return _skycoin.SKY_api_Client_Version(p0)
SKY_api_Client_Version = _skycoin.SKY_api_Client_Version

def SKY_api_Client_Outputs(p0):
    return _skycoin.SKY_api_Client_Outputs(p0)
SKY_api_Client_Outputs = _skycoin.SKY_api_Client_Outputs

def SKY_api_Client_OutputsForAddresses(p0, p1):
    return _skycoin.SKY_api_Client_OutputsForAddresses(p0, p1)
SKY_api_Client_OutputsForAddresses = _skycoin.SKY_api_Client_OutputsForAddresses

def SKY_api_Client_OutputsForHashes(p0, p1):
    return _skycoin.SKY_api_Client_OutputsForHashes(p0, p1)
SKY_api_Client_OutputsForHashes = _skycoin.SKY_api_Client_OutputsForHashes

def SKY_api_Client_CoinSupply(p0):
    return _skycoin.SKY_api_Client_CoinSupply(p0)
SKY_api_Client_CoinSupply = _skycoin.SKY_api_Client_CoinSupply

def SKY_api_Client_BlockByHash(p0, p1):
    return _skycoin.SKY_api_Client_BlockByHash(p0, p1)
SKY_api_Client_BlockByHash = _skycoin.SKY_api_Client_BlockByHash

def SKY_api_Client_BlockBySeq(p0, p1):
    return _skycoin.SKY_api_Client_BlockBySeq(p0, p1)
SKY_api_Client_BlockBySeq = _skycoin.SKY_api_Client_BlockBySeq

def SKY_api_Client_Blocks(p0, p1, p2):
    return _skycoin.SKY_api_Client_Blocks(p0, p1, p2)
SKY_api_Client_Blocks = _skycoin.SKY_api_Client_Blocks

def SKY_api_Client_LastBlocks(p0, p1):
    return _skycoin.SKY_api_Client_LastBlocks(p0, p1)
SKY_api_Client_LastBlocks = _skycoin.SKY_api_Client_LastBlocks

def SKY_api_Client_BlockchainMetadata(p0):
    return _skycoin.SKY_api_Client_BlockchainMetadata(p0)
SKY_api_Client_BlockchainMetadata = _skycoin.SKY_api_Client_BlockchainMetadata

def SKY_api_Client_BlockchainProgress(p0):
    return _skycoin.SKY_api_Client_BlockchainProgress(p0)
SKY_api_Client_BlockchainProgress = _skycoin.SKY_api_Client_BlockchainProgress

def SKY_api_Client_Balance(p0, p1, p2):
    return _skycoin.SKY_api_Client_Balance(p0, p1, p2)
SKY_api_Client_Balance = _skycoin.SKY_api_Client_Balance

def SKY_api_Client_UxOut(p0, p1):
    return _skycoin.SKY_api_Client_UxOut(p0, p1)
SKY_api_Client_UxOut = _skycoin.SKY_api_Client_UxOut

def SKY_api_Client_AddressUxOuts(p0, p1):
    return _skycoin.SKY_api_Client_AddressUxOuts(p0, p1)
SKY_api_Client_AddressUxOuts = _skycoin.SKY_api_Client_AddressUxOuts

def SKY_api_Client_Wallet(p0, p1):
    return _skycoin.SKY_api_Client_Wallet(p0, p1)
SKY_api_Client_Wallet = _skycoin.SKY_api_Client_Wallet

def SKY_api_Client_Wallets(p0):
    return _skycoin.SKY_api_Client_Wallets(p0)
SKY_api_Client_Wallets = _skycoin.SKY_api_Client_Wallets

def SKY_api_Client_CreateUnencryptedWallet(p0, p1, p2, p3):
    return _skycoin.SKY_api_Client_CreateUnencryptedWallet(p0, p1, p2, p3)
SKY_api_Client_CreateUnencryptedWallet = _skycoin.SKY_api_Client_CreateUnencryptedWallet

def SKY_api_Client_CreateEncryptedWallet(p0, p1, p2, p3, p4):
    return _skycoin.SKY_api_Client_CreateEncryptedWallet(p0, p1, p2, p3, p4)
SKY_api_Client_CreateEncryptedWallet = _skycoin.SKY_api_Client_CreateEncryptedWallet

def SKY_api_Client_NewWalletAddress(p0, p1, p2, p3):
    return _skycoin.SKY_api_Client_NewWalletAddress(p0, p1, p2, p3)
SKY_api_Client_NewWalletAddress = _skycoin.SKY_api_Client_NewWalletAddress

def SKY_api_Client_WalletBalance(p0, p1, p2):
    return _skycoin.SKY_api_Client_WalletBalance(p0, p1, p2)
SKY_api_Client_WalletBalance = _skycoin.SKY_api_Client_WalletBalance

def SKY_api_Client_Spend(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_api_Client_Spend(p0, p1, p2, p3, p4, p5)
SKY_api_Client_Spend = _skycoin.SKY_api_Client_Spend

def SKY_api_Client_CreateTransaction(p0):
    return _skycoin.SKY_api_Client_CreateTransaction(p0)
SKY_api_Client_CreateTransaction = _skycoin.SKY_api_Client_CreateTransaction

def SKY_api_Client_WalletTransactions(p0, p1):
    return _skycoin.SKY_api_Client_WalletTransactions(p0, p1)
SKY_api_Client_WalletTransactions = _skycoin.SKY_api_Client_WalletTransactions

def SKY_api_Client_UpdateWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_UpdateWallet(p0, p1, p2)
SKY_api_Client_UpdateWallet = _skycoin.SKY_api_Client_UpdateWallet

def SKY_api_Client_WalletFolderName(p0):
    return _skycoin.SKY_api_Client_WalletFolderName(p0)
SKY_api_Client_WalletFolderName = _skycoin.SKY_api_Client_WalletFolderName

def SKY_api_Client_NewSeed(p0, p1):
    return _skycoin.SKY_api_Client_NewSeed(p0, p1)
SKY_api_Client_NewSeed = _skycoin.SKY_api_Client_NewSeed

def SKY_api_Client_GetWalletSeed(p0, p1, p2):
    return _skycoin.SKY_api_Client_GetWalletSeed(p0, p1, p2)
SKY_api_Client_GetWalletSeed = _skycoin.SKY_api_Client_GetWalletSeed

def SKY_api_Client_NetworkConnection(p0, p1):
    return _skycoin.SKY_api_Client_NetworkConnection(p0, p1)
SKY_api_Client_NetworkConnection = _skycoin.SKY_api_Client_NetworkConnection

def SKY_api_Client_NetworkConnections(p0):
    return _skycoin.SKY_api_Client_NetworkConnections(p0)
SKY_api_Client_NetworkConnections = _skycoin.SKY_api_Client_NetworkConnections

def SKY_api_Client_NetworkDefaultConnections(p0):
    return _skycoin.SKY_api_Client_NetworkDefaultConnections(p0)
SKY_api_Client_NetworkDefaultConnections = _skycoin.SKY_api_Client_NetworkDefaultConnections

def SKY_api_Client_NetworkTrustedConnections(p0):
    return _skycoin.SKY_api_Client_NetworkTrustedConnections(p0)
SKY_api_Client_NetworkTrustedConnections = _skycoin.SKY_api_Client_NetworkTrustedConnections

def SKY_api_Client_NetworkExchangeableConnections(p0):
    return _skycoin.SKY_api_Client_NetworkExchangeableConnections(p0)
SKY_api_Client_NetworkExchangeableConnections = _skycoin.SKY_api_Client_NetworkExchangeableConnections

def SKY_api_Client_PendingTransactions(p0):
    return _skycoin.SKY_api_Client_PendingTransactions(p0)
SKY_api_Client_PendingTransactions = _skycoin.SKY_api_Client_PendingTransactions

def SKY_api_Client_Transaction(p0, p1):
    return _skycoin.SKY_api_Client_Transaction(p0, p1)
SKY_api_Client_Transaction = _skycoin.SKY_api_Client_Transaction

def SKY_api_Client_Transactions(p0, p1):
    return _skycoin.SKY_api_Client_Transactions(p0, p1)
SKY_api_Client_Transactions = _skycoin.SKY_api_Client_Transactions

def SKY_api_Client_ConfirmedTransactions(p0, p1):
    return _skycoin.SKY_api_Client_ConfirmedTransactions(p0, p1)
SKY_api_Client_ConfirmedTransactions = _skycoin.SKY_api_Client_ConfirmedTransactions

def SKY_api_Client_UnconfirmedTransactions(p0, p1):
    return _skycoin.SKY_api_Client_UnconfirmedTransactions(p0, p1)
SKY_api_Client_UnconfirmedTransactions = _skycoin.SKY_api_Client_UnconfirmedTransactions

def SKY_api_Client_InjectTransaction(p0, p1):
    return _skycoin.SKY_api_Client_InjectTransaction(p0, p1)
SKY_api_Client_InjectTransaction = _skycoin.SKY_api_Client_InjectTransaction

def SKY_api_Client_ResendUnconfirmedTransactions(p0):
    return _skycoin.SKY_api_Client_ResendUnconfirmedTransactions(p0)
SKY_api_Client_ResendUnconfirmedTransactions = _skycoin.SKY_api_Client_ResendUnconfirmedTransactions

def SKY_api_Client_RawTransaction(p0, p1):
    return _skycoin.SKY_api_Client_RawTransaction(p0, p1)
SKY_api_Client_RawTransaction = _skycoin.SKY_api_Client_RawTransaction

def SKY_api_Client_AddressTransactions(p0, p1):
    return _skycoin.SKY_api_Client_AddressTransactions(p0, p1)
SKY_api_Client_AddressTransactions = _skycoin.SKY_api_Client_AddressTransactions

def SKY_api_Client_Richlist(p0, p1):
    return _skycoin.SKY_api_Client_Richlist(p0, p1)
SKY_api_Client_Richlist = _skycoin.SKY_api_Client_Richlist

def SKY_api_Client_AddressCount(p0):
    return _skycoin.SKY_api_Client_AddressCount(p0)
SKY_api_Client_AddressCount = _skycoin.SKY_api_Client_AddressCount

def SKY_api_Client_UnloadWallet(p0, p1):
    return _skycoin.SKY_api_Client_UnloadWallet(p0, p1)
SKY_api_Client_UnloadWallet = _skycoin.SKY_api_Client_UnloadWallet

def SKY_api_Client_Health(p0):
    return _skycoin.SKY_api_Client_Health(p0)
SKY_api_Client_Health = _skycoin.SKY_api_Client_Health

def SKY_api_Client_EncryptWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_EncryptWallet(p0, p1, p2)
SKY_api_Client_EncryptWallet = _skycoin.SKY_api_Client_EncryptWallet

def SKY_api_Client_DecryptWallet(p0, p1, p2):
    return _skycoin.SKY_api_Client_DecryptWallet(p0, p1, p2)
SKY_api_Client_DecryptWallet = _skycoin.SKY_api_Client_DecryptWallet

def SKY_JsonEncode_Handle(p0):
    return _skycoin.SKY_JsonEncode_Handle(p0)
SKY_JsonEncode_Handle = _skycoin.SKY_JsonEncode_Handle

def SKY_Handle_Progress_GetCurrent(p0):
    return _skycoin.SKY_Handle_Progress_GetCurrent(p0)
SKY_Handle_Progress_GetCurrent = _skycoin.SKY_Handle_Progress_GetCurrent

def SKY_Handle_Block_GetHeadSeq(p0):
    return _skycoin.SKY_Handle_Block_GetHeadSeq(p0)
SKY_Handle_Block_GetHeadSeq = _skycoin.SKY_Handle_Block_GetHeadSeq

def SKY_Handle_Block_GetHeadHash(p0):
    return _skycoin.SKY_Handle_Block_GetHeadHash(p0)
SKY_Handle_Block_GetHeadHash = _skycoin.SKY_Handle_Block_GetHeadHash

def SKY_Handle_Block_GetPreviousBlockHash(p0):
    return _skycoin.SKY_Handle_Block_GetPreviousBlockHash(p0)
SKY_Handle_Block_GetPreviousBlockHash = _skycoin.SKY_Handle_Block_GetPreviousBlockHash

def SKY_Handle_Blocks_GetAt(p0, p1):
    return _skycoin.SKY_Handle_Blocks_GetAt(p0, p1)
SKY_Handle_Blocks_GetAt = _skycoin.SKY_Handle_Blocks_GetAt

def SKY_Handle_Blocks_GetCount(p0):
    return _skycoin.SKY_Handle_Blocks_GetCount(p0)
SKY_Handle_Blocks_GetCount = _skycoin.SKY_Handle_Blocks_GetCount

def SKY_Handle_Connections_GetCount(p0):
    return _skycoin.SKY_Handle_Connections_GetCount(p0)
SKY_Handle_Connections_GetCount = _skycoin.SKY_Handle_Connections_GetCount

def SKY_Handle_Strings_GetCount(p0):
    return _skycoin.SKY_Handle_Strings_GetCount(p0)
SKY_Handle_Strings_GetCount = _skycoin.SKY_Handle_Strings_GetCount

def SKY_Handle_Strings_Sort(p0):
    return _skycoin.SKY_Handle_Strings_Sort(p0)
SKY_Handle_Strings_Sort = _skycoin.SKY_Handle_Strings_Sort

def SKY_Handle_Strings_GetAt(p0, p1):
    return _skycoin.SKY_Handle_Strings_GetAt(p0, p1)
SKY_Handle_Strings_GetAt = _skycoin.SKY_Handle_Strings_GetAt

def SKY_api_Handle_Client_GetWalletDir(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletDir(p0)
SKY_api_Handle_Client_GetWalletDir = _skycoin.SKY_api_Handle_Client_GetWalletDir

def SKY_api_Handle_Client_GetWalletFileName(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletFileName(p0)
SKY_api_Handle_Client_GetWalletFileName = _skycoin.SKY_api_Handle_Client_GetWalletFileName

def SKY_api_Handle_Client_GetWalletLabel(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletLabel(p0)
SKY_api_Handle_Client_GetWalletLabel = _skycoin.SKY_api_Handle_Client_GetWalletLabel

def SKY_api_Handle_Client_GetWalletFullPath(p0, p1):
    return _skycoin.SKY_api_Handle_Client_GetWalletFullPath(p0, p1)
SKY_api_Handle_Client_GetWalletFullPath = _skycoin.SKY_api_Handle_Client_GetWalletFullPath

def SKY_api_Handle_GetWalletMeta(p0):
    return _skycoin.SKY_api_Handle_GetWalletMeta(p0)
SKY_api_Handle_GetWalletMeta = _skycoin.SKY_api_Handle_GetWalletMeta

def SKY_api_Handle_GetWalletEntriesCount(p0):
    return _skycoin.SKY_api_Handle_GetWalletEntriesCount(p0)
SKY_api_Handle_GetWalletEntriesCount = _skycoin.SKY_api_Handle_GetWalletEntriesCount

def SKY_api_Handle_Client_GetWalletResponseEntriesCount(p0):
    return _skycoin.SKY_api_Handle_Client_GetWalletResponseEntriesCount(p0)
SKY_api_Handle_Client_GetWalletResponseEntriesCount = _skycoin.SKY_api_Handle_Client_GetWalletResponseEntriesCount

def SKY_api_Handle_WalletGetEntry(p0, p1, p2, p3):
    return _skycoin.SKY_api_Handle_WalletGetEntry(p0, p1, p2, p3)
SKY_api_Handle_WalletGetEntry = _skycoin.SKY_api_Handle_WalletGetEntry

def SKY_api_Handle_WalletResponseGetEntry(p0, p1):
    return _skycoin.SKY_api_Handle_WalletResponseGetEntry(p0, p1)
SKY_api_Handle_WalletResponseGetEntry = _skycoin.SKY_api_Handle_WalletResponseGetEntry

def SKY_api_Handle_WalletResponseIsEncrypted(p0):
    return _skycoin.SKY_api_Handle_WalletResponseIsEncrypted(p0)
SKY_api_Handle_WalletResponseIsEncrypted = _skycoin.SKY_api_Handle_WalletResponseIsEncrypted

def SKY_api_Handle_WalletResponseGetCryptoType(p0):
    return _skycoin.SKY_api_Handle_WalletResponseGetCryptoType(p0)
SKY_api_Handle_WalletResponseGetCryptoType = _skycoin.SKY_api_Handle_WalletResponseGetCryptoType

def SKY_api_Handle_WalletsResponseGetCount(p0):
    return _skycoin.SKY_api_Handle_WalletsResponseGetCount(p0)
SKY_api_Handle_WalletsResponseGetCount = _skycoin.SKY_api_Handle_WalletsResponseGetCount

def SKY_api_Handle_WalletsResponseGetAt(p0, p1):
    return _skycoin.SKY_api_Handle_WalletsResponseGetAt(p0, p1)
SKY_api_Handle_WalletsResponseGetAt = _skycoin.SKY_api_Handle_WalletsResponseGetAt

def SKY_api_Handle_GetWalletFolderAddress(p0):
    return _skycoin.SKY_api_Handle_GetWalletFolderAddress(p0)
SKY_api_Handle_GetWalletFolderAddress = _skycoin.SKY_api_Handle_GetWalletFolderAddress

def SKY_api_Handle_GetWalletSeed(p0):
    return _skycoin.SKY_api_Handle_GetWalletSeed(p0)
SKY_api_Handle_GetWalletSeed = _skycoin.SKY_api_Handle_GetWalletSeed

def SKY_api_Handle_GetWalletLastSeed(p0):
    return _skycoin.SKY_api_Handle_GetWalletLastSeed(p0)
SKY_api_Handle_GetWalletLastSeed = _skycoin.SKY_api_Handle_GetWalletLastSeed

def SKY_api_Handle_GetBuildInfoData(p0):
    return _skycoin.SKY_api_Handle_GetBuildInfoData(p0)
SKY_api_Handle_GetBuildInfoData = _skycoin.SKY_api_Handle_GetBuildInfoData

def SKY_secp256k1_GenerateKeyPair():
    return _skycoin.SKY_secp256k1_GenerateKeyPair()
SKY_secp256k1_GenerateKeyPair = _skycoin.SKY_secp256k1_GenerateKeyPair

def SKY_secp256k1_PubkeyFromSeckey(p0):
    return _skycoin.SKY_secp256k1_PubkeyFromSeckey(p0)
SKY_secp256k1_PubkeyFromSeckey = _skycoin.SKY_secp256k1_PubkeyFromSeckey

def SKY_secp256k1_UncompressPubkey(p0):
    return _skycoin.SKY_secp256k1_UncompressPubkey(p0)
SKY_secp256k1_UncompressPubkey = _skycoin.SKY_secp256k1_UncompressPubkey

def SKY_secp256k1_UncompressedPubkeyFromSeckey(p0):
    return _skycoin.SKY_secp256k1_UncompressedPubkeyFromSeckey(p0)
SKY_secp256k1_UncompressedPubkeyFromSeckey = _skycoin.SKY_secp256k1_UncompressedPubkeyFromSeckey

def SKY_secp256k1_Secp256k1Hash(p0):
    return _skycoin.SKY_secp256k1_Secp256k1Hash(p0)
SKY_secp256k1_Secp256k1Hash = _skycoin.SKY_secp256k1_Secp256k1Hash

def SKY_secp256k1_GenerateDeterministicKeyPair(p0):
    return _skycoin.SKY_secp256k1_GenerateDeterministicKeyPair(p0)
SKY_secp256k1_GenerateDeterministicKeyPair = _skycoin.SKY_secp256k1_GenerateDeterministicKeyPair

def SKY_secp256k1_DeterministicKeyPairIterator(p0):
    return _skycoin.SKY_secp256k1_DeterministicKeyPairIterator(p0)
SKY_secp256k1_DeterministicKeyPairIterator = _skycoin.SKY_secp256k1_DeterministicKeyPairIterator

def SKY_secp256k1_Sign(p0, p1):
    return _skycoin.SKY_secp256k1_Sign(p0, p1)
SKY_secp256k1_Sign = _skycoin.SKY_secp256k1_Sign

def SKY_secp256k1_SignDeterministic(p0, p1, p2):
    return _skycoin.SKY_secp256k1_SignDeterministic(p0, p1, p2)
SKY_secp256k1_SignDeterministic = _skycoin.SKY_secp256k1_SignDeterministic

def SKY_secp256k1_VerifySeckey(p0):
    return _skycoin.SKY_secp256k1_VerifySeckey(p0)
SKY_secp256k1_VerifySeckey = _skycoin.SKY_secp256k1_VerifySeckey

def SKY_secp256k1_VerifyPubkey(p0):
    return _skycoin.SKY_secp256k1_VerifyPubkey(p0)
SKY_secp256k1_VerifyPubkey = _skycoin.SKY_secp256k1_VerifyPubkey

def SKY_secp256k1_VerifySignatureValidity(p0):
    return _skycoin.SKY_secp256k1_VerifySignatureValidity(p0)
SKY_secp256k1_VerifySignatureValidity = _skycoin.SKY_secp256k1_VerifySignatureValidity

def SKY_secp256k1_VerifySignature(p0, p1, p2):
    return _skycoin.SKY_secp256k1_VerifySignature(p0, p1, p2)
SKY_secp256k1_VerifySignature = _skycoin.SKY_secp256k1_VerifySignature

def SKY_secp256k1_SignatureErrorString(p0, p1, p2):
    return _skycoin.SKY_secp256k1_SignatureErrorString(p0, p1, p2)
SKY_secp256k1_SignatureErrorString = _skycoin.SKY_secp256k1_SignatureErrorString

def SKY_secp256k1_RecoverPubkey(p0, p1):
    return _skycoin.SKY_secp256k1_RecoverPubkey(p0, p1)
SKY_secp256k1_RecoverPubkey = _skycoin.SKY_secp256k1_RecoverPubkey

def SKY_secp256k1_ECDH(p0, p1):
    return _skycoin.SKY_secp256k1_ECDH(p0, p1)
SKY_secp256k1_ECDH = _skycoin.SKY_secp256k1_ECDH

def SKY_cert_CreateCertIfNotExists(p0, p1, p2, p3):
    return _skycoin.SKY_cert_CreateCertIfNotExists(p0, p1, p2, p3)
SKY_cert_CreateCertIfNotExists = _skycoin.SKY_cert_CreateCertIfNotExists

def SKY_fee_VerifyTransactionFee(p0, p1):
    return _skycoin.SKY_fee_VerifyTransactionFee(p0, p1)
SKY_fee_VerifyTransactionFee = _skycoin.SKY_fee_VerifyTransactionFee

def SKY_fee_VerifyTransactionFeeForHours(p0, p1):
    return _skycoin.SKY_fee_VerifyTransactionFeeForHours(p0, p1)
SKY_fee_VerifyTransactionFeeForHours = _skycoin.SKY_fee_VerifyTransactionFeeForHours

def SKY_fee_RequiredFee(p0):
    return _skycoin.SKY_fee_RequiredFee(p0)
SKY_fee_RequiredFee = _skycoin.SKY_fee_RequiredFee

def SKY_fee_RemainingHours(p0):
    return _skycoin.SKY_fee_RemainingHours(p0)
SKY_fee_RemainingHours = _skycoin.SKY_fee_RemainingHours

def SKY_fee_TransactionFee(p0, p1):
    return _skycoin.SKY_fee_TransactionFee(p0, p1)
SKY_fee_TransactionFee = _skycoin.SKY_fee_TransactionFee

def SKY_iputil_LocalhostIP():
    return _skycoin.SKY_iputil_LocalhostIP()
SKY_iputil_LocalhostIP = _skycoin.SKY_iputil_LocalhostIP

def SKY_iputil_IsLocalhost(p0):
    return _skycoin.SKY_iputil_IsLocalhost(p0)
SKY_iputil_IsLocalhost = _skycoin.SKY_iputil_IsLocalhost

def SKY_iputil_SplitAddr(p0):
    return _skycoin.SKY_iputil_SplitAddr(p0)
SKY_iputil_SplitAddr = _skycoin.SKY_iputil_SplitAddr

def SKY_cipher_Ripemd160_Set(p0, p1):
    return _skycoin.SKY_cipher_Ripemd160_Set(p0, p1)
SKY_cipher_Ripemd160_Set = _skycoin.SKY_cipher_Ripemd160_Set

def SKY_cipher_HashRipemd160(p0, p1):
    return _skycoin.SKY_cipher_HashRipemd160(p0, p1)
SKY_cipher_HashRipemd160 = _skycoin.SKY_cipher_HashRipemd160

def SKY_cipher_SHA256_Set(p0, p1):
    return _skycoin.SKY_cipher_SHA256_Set(p0, p1)
SKY_cipher_SHA256_Set = _skycoin.SKY_cipher_SHA256_Set

def SKY_cipher_SHA256_Hex(p0):
    return _skycoin.SKY_cipher_SHA256_Hex(p0)
SKY_cipher_SHA256_Hex = _skycoin.SKY_cipher_SHA256_Hex

def SKY_cipher_SHA256_Xor(p0, p1, p2):
    return _skycoin.SKY_cipher_SHA256_Xor(p0, p1, p2)
SKY_cipher_SHA256_Xor = _skycoin.SKY_cipher_SHA256_Xor

def SKY_cipher_SumSHA256(p0, p1):
    return _skycoin.SKY_cipher_SumSHA256(p0, p1)
SKY_cipher_SumSHA256 = _skycoin.SKY_cipher_SumSHA256

def SKY_cipher_SHA256FromHex(p0, p1):
    return _skycoin.SKY_cipher_SHA256FromHex(p0, p1)
SKY_cipher_SHA256FromHex = _skycoin.SKY_cipher_SHA256FromHex

def SKY_cipher_DoubleSHA256(p0, p1):
    return _skycoin.SKY_cipher_DoubleSHA256(p0, p1)
SKY_cipher_DoubleSHA256 = _skycoin.SKY_cipher_DoubleSHA256

def SKY_cipher_AddSHA256(p0, p1, p2):
    return _skycoin.SKY_cipher_AddSHA256(p0, p1, p2)
SKY_cipher_AddSHA256 = _skycoin.SKY_cipher_AddSHA256

def SKY_cipher_Merkle(p0, p1):
    return _skycoin.SKY_cipher_Merkle(p0, p1)
SKY_cipher_Merkle = _skycoin.SKY_cipher_Merkle

def SKY_cipher_MustSumSHA256(p0, p1, p2):
    return _skycoin.SKY_cipher_MustSumSHA256(p0, p1, p2)
SKY_cipher_MustSumSHA256 = _skycoin.SKY_cipher_MustSumSHA256

def SKY_cipher_SHA256_Null(p0):
    return _skycoin.SKY_cipher_SHA256_Null(p0)
SKY_cipher_SHA256_Null = _skycoin.SKY_cipher_SHA256_Null

def SKY_coin_Create_Transaction():
    return _skycoin.SKY_coin_Create_Transaction()
SKY_coin_Create_Transaction = _skycoin.SKY_coin_Create_Transaction

def SKY_coin_Transaction_Copy(p0):
    return _skycoin.SKY_coin_Transaction_Copy(p0)
SKY_coin_Transaction_Copy = _skycoin.SKY_coin_Transaction_Copy

def SKY_coin_GetTransactionObject(p0):
    return _skycoin.SKY_coin_GetTransactionObject(p0)
SKY_coin_GetTransactionObject = _skycoin.SKY_coin_GetTransactionObject

def SKY_coin_Transaction_ResetInputs(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetInputs(p0, p1)
SKY_coin_Transaction_ResetInputs = _skycoin.SKY_coin_Transaction_ResetInputs

def SKY_coin_Transaction_GetInputsCount(p0):
    return _skycoin.SKY_coin_Transaction_GetInputsCount(p0)
SKY_coin_Transaction_GetInputsCount = _skycoin.SKY_coin_Transaction_GetInputsCount

def SKY_coin_Transaction_GetInputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_GetInputAt(p0, p1, p2)
SKY_coin_Transaction_GetInputAt = _skycoin.SKY_coin_Transaction_GetInputAt

def SKY_coin_Transaction_SetInputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_SetInputAt(p0, p1, p2)
SKY_coin_Transaction_SetInputAt = _skycoin.SKY_coin_Transaction_SetInputAt

def SKY_coin_Transaction_GetOutputsCount(p0):
    return _skycoin.SKY_coin_Transaction_GetOutputsCount(p0)
SKY_coin_Transaction_GetOutputsCount = _skycoin.SKY_coin_Transaction_GetOutputsCount

def SKY_coin_Transaction_GetOutputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_GetOutputAt(p0, p1, p2)
SKY_coin_Transaction_GetOutputAt = _skycoin.SKY_coin_Transaction_GetOutputAt

def SKY_coin_Transaction_SetOutputAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_SetOutputAt(p0, p1, p2)
SKY_coin_Transaction_SetOutputAt = _skycoin.SKY_coin_Transaction_SetOutputAt

def SKY_coin_Transaction_GetSignaturesCount(p0):
    return _skycoin.SKY_coin_Transaction_GetSignaturesCount(p0)
SKY_coin_Transaction_GetSignaturesCount = _skycoin.SKY_coin_Transaction_GetSignaturesCount

def SKY_coin_Transaction_GetSignatureAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_GetSignatureAt(p0, p1, p2)
SKY_coin_Transaction_GetSignatureAt = _skycoin.SKY_coin_Transaction_GetSignatureAt

def SKY_coin_Transaction_SetSignatureAt(p0, p1, p2):
    return _skycoin.SKY_coin_Transaction_SetSignatureAt(p0, p1, p2)
SKY_coin_Transaction_SetSignatureAt = _skycoin.SKY_coin_Transaction_SetSignatureAt

def SKY_coin_Transaction_PushSignature(p0, p1):
    return _skycoin.SKY_coin_Transaction_PushSignature(p0, p1)
SKY_coin_Transaction_PushSignature = _skycoin.SKY_coin_Transaction_PushSignature

def SKY_coin_Transaction_ResetOutputs(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetOutputs(p0, p1)
SKY_coin_Transaction_ResetOutputs = _skycoin.SKY_coin_Transaction_ResetOutputs

def SKY_coin_Transaction_ResetSignatures(p0, p1):
    return _skycoin.SKY_coin_Transaction_ResetSignatures(p0, p1)
SKY_coin_Transaction_ResetSignatures = _skycoin.SKY_coin_Transaction_ResetSignatures

def SKY_coin_Transaction_Verify(p0):
    return _skycoin.SKY_coin_Transaction_Verify(p0)
SKY_coin_Transaction_Verify = _skycoin.SKY_coin_Transaction_Verify

def SKY_coin_Transaction_VerifyInput(*args):
    return _skycoin.SKY_coin_Transaction_VerifyInput(*args)
SKY_coin_Transaction_VerifyInput = _skycoin.SKY_coin_Transaction_VerifyInput

def SKY_coin_Transaction_PushInput(p0, p1):
    return _skycoin.SKY_coin_Transaction_PushInput(p0, p1)
SKY_coin_Transaction_PushInput = _skycoin.SKY_coin_Transaction_PushInput

def SKY_coin_TransactionOutput_UxID(p0, p1, p2):
    return _skycoin.SKY_coin_TransactionOutput_UxID(p0, p1, p2)
SKY_coin_TransactionOutput_UxID = _skycoin.SKY_coin_TransactionOutput_UxID

def SKY_coin_Transaction_PushOutput(p0, p1, p2, p3):
    return _skycoin.SKY_coin_Transaction_PushOutput(p0, p1, p2, p3)
SKY_coin_Transaction_PushOutput = _skycoin.SKY_coin_Transaction_PushOutput

def SKY_coin_Transaction_SignInputs(*args):
    return _skycoin.SKY_coin_Transaction_SignInputs(*args)
SKY_coin_Transaction_SignInputs = _skycoin.SKY_coin_Transaction_SignInputs

def SKY_coin_Transaction_Size(p0):
    return _skycoin.SKY_coin_Transaction_Size(p0)
SKY_coin_Transaction_Size = _skycoin.SKY_coin_Transaction_Size

def SKY_coin_Transaction_Hash(p0, p1):
    return _skycoin.SKY_coin_Transaction_Hash(p0, p1)
SKY_coin_Transaction_Hash = _skycoin.SKY_coin_Transaction_Hash

def SKY_coin_Transaction_SizeHash(p0, p2):
    return _skycoin.SKY_coin_Transaction_SizeHash(p0, p2)
SKY_coin_Transaction_SizeHash = _skycoin.SKY_coin_Transaction_SizeHash

def SKY_coin_Transaction_TxID(p0):
    return _skycoin.SKY_coin_Transaction_TxID(p0)
SKY_coin_Transaction_TxID = _skycoin.SKY_coin_Transaction_TxID

def SKY_coin_Transaction_TxIDHex(p0):
    return _skycoin.SKY_coin_Transaction_TxIDHex(p0)
SKY_coin_Transaction_TxIDHex = _skycoin.SKY_coin_Transaction_TxIDHex

def SKY_coin_Transaction_UpdateHeader(p0):
    return _skycoin.SKY_coin_Transaction_UpdateHeader(p0)
SKY_coin_Transaction_UpdateHeader = _skycoin.SKY_coin_Transaction_UpdateHeader

def SKY_coin_Transaction_HashInner(p0, p1):
    return _skycoin.SKY_coin_Transaction_HashInner(p0, p1)
SKY_coin_Transaction_HashInner = _skycoin.SKY_coin_Transaction_HashInner

def SKY_coin_Transaction_Serialize(p0):
    return _skycoin.SKY_coin_Transaction_Serialize(p0)
SKY_coin_Transaction_Serialize = _skycoin.SKY_coin_Transaction_Serialize

def SKY_coin_MustTransactionDeserialize(p0):
    return _skycoin.SKY_coin_MustTransactionDeserialize(p0)
SKY_coin_MustTransactionDeserialize = _skycoin.SKY_coin_MustTransactionDeserialize

def SKY_coin_TransactionDeserialize(p0):
    return _skycoin.SKY_coin_TransactionDeserialize(p0)
SKY_coin_TransactionDeserialize = _skycoin.SKY_coin_TransactionDeserialize

def SKY_coin_Transaction_OutputHours(p0):
    return _skycoin.SKY_coin_Transaction_OutputHours(p0)
SKY_coin_Transaction_OutputHours = _skycoin.SKY_coin_Transaction_OutputHours

def SKY_coin_Create_Transactions():
    return _skycoin.SKY_coin_Create_Transactions()
SKY_coin_Create_Transactions = _skycoin.SKY_coin_Create_Transactions

def SKY_coin_GetTransactionsObject(p0, p1):
    return _skycoin.SKY_coin_GetTransactionsObject(p0, p1)
SKY_coin_GetTransactionsObject = _skycoin.SKY_coin_GetTransactionsObject

def SKY_coin_Transactions_Length(p0):
    return _skycoin.SKY_coin_Transactions_Length(p0)
SKY_coin_Transactions_Length = _skycoin.SKY_coin_Transactions_Length

def SKY_coin_Transactions_Add(p0, p1):
    return _skycoin.SKY_coin_Transactions_Add(p0, p1)
SKY_coin_Transactions_Add = _skycoin.SKY_coin_Transactions_Add

def SKY_coin_Transactions_Fees(p0, p1):
    return _skycoin.SKY_coin_Transactions_Fees(p0, p1)
SKY_coin_Transactions_Fees = _skycoin.SKY_coin_Transactions_Fees

def SKY_coin_Transactions_GetAt(p0, p1):
    return _skycoin.SKY_coin_Transactions_GetAt(p0, p1)
SKY_coin_Transactions_GetAt = _skycoin.SKY_coin_Transactions_GetAt

def SKY_coin_Transactions_Hashes(*args):
    return _skycoin.SKY_coin_Transactions_Hashes(*args)
SKY_coin_Transactions_Hashes = _skycoin.SKY_coin_Transactions_Hashes

def SKY_coin_Transactions_Size(p0):
    return _skycoin.SKY_coin_Transactions_Size(p0)
SKY_coin_Transactions_Size = _skycoin.SKY_coin_Transactions_Size

def SKY_coin_Transactions_TruncateBytesTo(p0, p1):
    return _skycoin.SKY_coin_Transactions_TruncateBytesTo(p0, p1)
SKY_coin_Transactions_TruncateBytesTo = _skycoin.SKY_coin_Transactions_TruncateBytesTo

def SKY_coin_SortTransactions(p0, p1):
    return _skycoin.SKY_coin_SortTransactions(p0, p1)
SKY_coin_SortTransactions = _skycoin.SKY_coin_SortTransactions

def SKY_coin_NewSortableTransactions(p0, p1, p2):
    return _skycoin.SKY_coin_NewSortableTransactions(p0, p1, p2)
SKY_coin_NewSortableTransactions = _skycoin.SKY_coin_NewSortableTransactions

def SKY_coin_SortableTransactions_Sort(p0):
    return _skycoin.SKY_coin_SortableTransactions_Sort(p0)
SKY_coin_SortableTransactions_Sort = _skycoin.SKY_coin_SortableTransactions_Sort

def SKY_coin_SortableTransactions_Len(p0):
    return _skycoin.SKY_coin_SortableTransactions_Len(p0)
SKY_coin_SortableTransactions_Len = _skycoin.SKY_coin_SortableTransactions_Len

def SKY_coin_SortableTransactions_Less(p0, p1, p2):
    return _skycoin.SKY_coin_SortableTransactions_Less(p0, p1, p2)
SKY_coin_SortableTransactions_Less = _skycoin.SKY_coin_SortableTransactions_Less

def SKY_coin_SortableTransactions_Swap(p0, p1, p2):
    return _skycoin.SKY_coin_SortableTransactions_Swap(p0, p1, p2)
SKY_coin_SortableTransactions_Swap = _skycoin.SKY_coin_SortableTransactions_Swap

def SKY_coin_VerifyTransactionCoinsSpending(*args):
    return _skycoin.SKY_coin_VerifyTransactionCoinsSpending(*args)
SKY_coin_VerifyTransactionCoinsSpending = _skycoin.SKY_coin_VerifyTransactionCoinsSpending

def SKY_coin_VerifyTransactionHoursSpending(*args):
    return _skycoin.SKY_coin_VerifyTransactionHoursSpending(*args)
SKY_coin_VerifyTransactionHoursSpending = _skycoin.SKY_coin_VerifyTransactionHoursSpending

def SKY_encrypt_Sha256Xor_Encrypt(p0, p1):
    return _skycoin.SKY_encrypt_Sha256Xor_Encrypt(p0, p1)
SKY_encrypt_Sha256Xor_Encrypt = _skycoin.SKY_encrypt_Sha256Xor_Encrypt

def SKY_encrypt_Sha256Xor_Decrypt(p0, p1):
    return _skycoin.SKY_encrypt_Sha256Xor_Decrypt(p0, p1)
SKY_encrypt_Sha256Xor_Decrypt = _skycoin.SKY_encrypt_Sha256Xor_Decrypt

def SKY_cli_GenerateAddressesInFile(p0, p1, p2):
    return _skycoin.SKY_cli_GenerateAddressesInFile(p0, p1, p2)
SKY_cli_GenerateAddressesInFile = _skycoin.SKY_cli_GenerateAddressesInFile

def SKY_cli_FormatAddressesAsJSON(p0):
    return _skycoin.SKY_cli_FormatAddressesAsJSON(p0)
SKY_cli_FormatAddressesAsJSON = _skycoin.SKY_cli_FormatAddressesAsJSON

def SKY_cli_FormatAddressesAsJoinedArray(p0):
    return _skycoin.SKY_cli_FormatAddressesAsJoinedArray(p0)
SKY_cli_FormatAddressesAsJoinedArray = _skycoin.SKY_cli_FormatAddressesAsJoinedArray

def SKY_cli_AddressesToStrings(p0):
    return _skycoin.SKY_cli_AddressesToStrings(p0)
SKY_cli_AddressesToStrings = _skycoin.SKY_cli_AddressesToStrings

def SKY_cli_LoadConfig():
    return _skycoin.SKY_cli_LoadConfig()
SKY_cli_LoadConfig = _skycoin.SKY_cli_LoadConfig

def SKY_cli_Config_FullWalletPath(p0):
    return _skycoin.SKY_cli_Config_FullWalletPath(p0)
SKY_cli_Config_FullWalletPath = _skycoin.SKY_cli_Config_FullWalletPath

def SKY_cli_Config_FullDBPath(p0):
    return _skycoin.SKY_cli_Config_FullDBPath(p0)
SKY_cli_Config_FullDBPath = _skycoin.SKY_cli_Config_FullDBPath

def SKY_cli_NewApp(p0):
    return _skycoin.SKY_cli_NewApp(p0)
SKY_cli_NewApp = _skycoin.SKY_cli_NewApp

def SKY_cli_RPCClientFromContext(p0):
    return _skycoin.SKY_cli_RPCClientFromContext(p0)
SKY_cli_RPCClientFromContext = _skycoin.SKY_cli_RPCClientFromContext

def SKY_cli_ConfigFromContext(p0):
    return _skycoin.SKY_cli_ConfigFromContext(p0)
SKY_cli_ConfigFromContext = _skycoin.SKY_cli_ConfigFromContext

def SKY_cli_PasswordFromBytes_Password():
    return _skycoin.SKY_cli_PasswordFromBytes_Password()
SKY_cli_PasswordFromBytes_Password = _skycoin.SKY_cli_PasswordFromBytes_Password

def SKY_cli_PasswordFromTerm_Password():
    return _skycoin.SKY_cli_PasswordFromTerm_Password()
SKY_cli_PasswordFromTerm_Password = _skycoin.SKY_cli_PasswordFromTerm_Password

def SKY_handle_close(p0):
    return _skycoin.SKY_handle_close(p0)
SKY_handle_close = _skycoin.SKY_handle_close

def SKY_handle_copy(p0):
    return _skycoin.SKY_handle_copy(p0)
SKY_handle_copy = _skycoin.SKY_handle_copy

def SKY_encoder_StructField_String(p0):
    return _skycoin.SKY_encoder_StructField_String(p0)
SKY_encoder_StructField_String = _skycoin.SKY_encoder_StructField_String

def SKY_encoder_ParseFields(p0, p1):
    return _skycoin.SKY_encoder_ParseFields(p0, p1)
SKY_encoder_ParseFields = _skycoin.SKY_encoder_ParseFields

def SKY_coin_UxOut_Hash(p0, p1):
    return _skycoin.SKY_coin_UxOut_Hash(p0, p1)
SKY_coin_UxOut_Hash = _skycoin.SKY_coin_UxOut_Hash

def SKY_coin_UxOut_SnapshotHash(p0, p1):
    return _skycoin.SKY_coin_UxOut_SnapshotHash(p0, p1)
SKY_coin_UxOut_SnapshotHash = _skycoin.SKY_coin_UxOut_SnapshotHash

def SKY_coin_UxBody_Hash(p0, p1):
    return _skycoin.SKY_coin_UxBody_Hash(p0, p1)
SKY_coin_UxBody_Hash = _skycoin.SKY_coin_UxBody_Hash

def SKY_coin_UxOut_CoinHours(p0, p1):
    return _skycoin.SKY_coin_UxOut_CoinHours(p0, p1)
SKY_coin_UxOut_CoinHours = _skycoin.SKY_coin_UxOut_CoinHours

def SKY_coin_UxArray_Hashes(*args):
    return _skycoin.SKY_coin_UxArray_Hashes(*args)
SKY_coin_UxArray_Hashes = _skycoin.SKY_coin_UxArray_Hashes

def SKY_coin_UxArray_HasDupes(*args):
    return _skycoin.SKY_coin_UxArray_HasDupes(*args)
SKY_coin_UxArray_HasDupes = _skycoin.SKY_coin_UxArray_HasDupes

def SKY_coin_UxArray_Sort():
    return _skycoin.SKY_coin_UxArray_Sort()
SKY_coin_UxArray_Sort = _skycoin.SKY_coin_UxArray_Sort

def SKY_coin_UxArray_Len():
    return _skycoin.SKY_coin_UxArray_Len()
SKY_coin_UxArray_Len = _skycoin.SKY_coin_UxArray_Len

def SKY_coin_UxArray_Less(*args):
    return _skycoin.SKY_coin_UxArray_Less(*args)
SKY_coin_UxArray_Less = _skycoin.SKY_coin_UxArray_Less

def SKY_coin_UxArray_Swap(*args):
    return _skycoin.SKY_coin_UxArray_Swap(*args)
SKY_coin_UxArray_Swap = _skycoin.SKY_coin_UxArray_Swap

def SKY_coin_UxArray_Coins(*args):
    return _skycoin.SKY_coin_UxArray_Coins(*args)
SKY_coin_UxArray_Coins = _skycoin.SKY_coin_UxArray_Coins

def SKY_coin_UxArray_CoinHours(*args):
    return _skycoin.SKY_coin_UxArray_CoinHours(*args)
SKY_coin_UxArray_CoinHours = _skycoin.SKY_coin_UxArray_CoinHours

def SKY_coin_UxArray_Sub(*args):
    return _skycoin.SKY_coin_UxArray_Sub(*args)
SKY_coin_UxArray_Sub = _skycoin.SKY_coin_UxArray_Sub

def SKY_coin_UxArray_Add(*args):
    return _skycoin.SKY_coin_UxArray_Add(*args)
SKY_coin_UxArray_Add = _skycoin.SKY_coin_UxArray_Add

def SKY_coin_NewAddressUxOuts(*args):
    return _skycoin.SKY_coin_NewAddressUxOuts(*args)
SKY_coin_NewAddressUxOuts = _skycoin.SKY_coin_NewAddressUxOuts

def SKY_coin_AddressUxOuts_Keys(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Keys(*args)
SKY_coin_AddressUxOuts_Keys = _skycoin.SKY_coin_AddressUxOuts_Keys

def SKY_coin_AddressUxOuts_Flatten(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Flatten(*args)
SKY_coin_AddressUxOuts_Flatten = _skycoin.SKY_coin_AddressUxOuts_Flatten

def SKY_coin_AddressUxOuts_Sub(p0, p1, p2):
    return _skycoin.SKY_coin_AddressUxOuts_Sub(p0, p1, p2)
SKY_coin_AddressUxOuts_Sub = _skycoin.SKY_coin_AddressUxOuts_Sub

def SKY_coin_AddressUxOuts_Add(p0, p1, p2):
    return _skycoin.SKY_coin_AddressUxOuts_Add(p0, p1, p2)
SKY_coin_AddressUxOuts_Add = _skycoin.SKY_coin_AddressUxOuts_Add

def SKY_coin_AddressUxOuts_Get(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Get(*args)
SKY_coin_AddressUxOuts_Get = _skycoin.SKY_coin_AddressUxOuts_Get

def SKY_coin_AddressUxOuts_HasKey(p0, p1):
    return _skycoin.SKY_coin_AddressUxOuts_HasKey(p0, p1)
SKY_coin_AddressUxOuts_HasKey = _skycoin.SKY_coin_AddressUxOuts_HasKey

def SKY_coin_AddressUxOuts_GetOutputLength(p0, p1):
    return _skycoin.SKY_coin_AddressUxOuts_GetOutputLength(p0, p1)
SKY_coin_AddressUxOuts_GetOutputLength = _skycoin.SKY_coin_AddressUxOuts_GetOutputLength

def SKY_coin_AddressUxOuts_Length(p0):
    return _skycoin.SKY_coin_AddressUxOuts_Length(p0)
SKY_coin_AddressUxOuts_Length = _skycoin.SKY_coin_AddressUxOuts_Length

def SKY_coin_AddressUxOuts_Set(*args):
    return _skycoin.SKY_coin_AddressUxOuts_Set(*args)
SKY_coin_AddressUxOuts_Set = _skycoin.SKY_coin_AddressUxOuts_Set

def SKY_scrypt_Key(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_scrypt_Key(p0, p1, p2, p3, p4, p5)
SKY_scrypt_Key = _skycoin.SKY_scrypt_Key

def SKY_wallet_NewError(p0):
    return _skycoin.SKY_wallet_NewError(p0)
SKY_wallet_NewError = _skycoin.SKY_wallet_NewError

def SKY_wallet_NewWallet(p0, p1):
    return _skycoin.SKY_wallet_NewWallet(p0, p1)
SKY_wallet_NewWallet = _skycoin.SKY_wallet_NewWallet

def SKY_wallet_Wallet_Lock(p0, p1, p2):
    return _skycoin.SKY_wallet_Wallet_Lock(p0, p1, p2)
SKY_wallet_Wallet_Lock = _skycoin.SKY_wallet_Wallet_Lock

def SKY_wallet_Wallet_Unlock(p0, p1):
    return _skycoin.SKY_wallet_Wallet_Unlock(p0, p1)
SKY_wallet_Wallet_Unlock = _skycoin.SKY_wallet_Wallet_Unlock

def SKY_wallet_Load(p0):
    return _skycoin.SKY_wallet_Load(p0)
SKY_wallet_Load = _skycoin.SKY_wallet_Load

def SKY_wallet_Wallet_Save(p0, p1):
    return _skycoin.SKY_wallet_Wallet_Save(p0, p1)
SKY_wallet_Wallet_Save = _skycoin.SKY_wallet_Wallet_Save

def SKY_wallet_Wallet_Validate(p0):
    return _skycoin.SKY_wallet_Wallet_Validate(p0)
SKY_wallet_Wallet_Validate = _skycoin.SKY_wallet_Wallet_Validate

def SKY_wallet_Wallet_Type(p0):
    return _skycoin.SKY_wallet_Wallet_Type(p0)
SKY_wallet_Wallet_Type = _skycoin.SKY_wallet_Wallet_Type

def SKY_wallet_Wallet_Version(p0):
    return _skycoin.SKY_wallet_Wallet_Version(p0)
SKY_wallet_Wallet_Version = _skycoin.SKY_wallet_Wallet_Version

def SKY_wallet_Wallet_Filename(p0):
    return _skycoin.SKY_wallet_Wallet_Filename(p0)
SKY_wallet_Wallet_Filename = _skycoin.SKY_wallet_Wallet_Filename

def SKY_wallet_Wallet_Label(p0):
    return _skycoin.SKY_wallet_Wallet_Label(p0)
SKY_wallet_Wallet_Label = _skycoin.SKY_wallet_Wallet_Label

def SKY_wallet_Wallet_IsEncrypted(p0):
    return _skycoin.SKY_wallet_Wallet_IsEncrypted(p0)
SKY_wallet_Wallet_IsEncrypted = _skycoin.SKY_wallet_Wallet_IsEncrypted

def SKY_wallet_Wallet_GenerateAddresses(p0, p1):
    return _skycoin.SKY_wallet_Wallet_GenerateAddresses(p0, p1)
SKY_wallet_Wallet_GenerateAddresses = _skycoin.SKY_wallet_Wallet_GenerateAddresses

def SKY_wallet_Wallet_GetAddresses(p0):
    return _skycoin.SKY_wallet_Wallet_GetAddresses(p0)
SKY_wallet_Wallet_GetAddresses = _skycoin.SKY_wallet_Wallet_GetAddresses

def SKY_wallet_Wallet_GetEntry(p0, p1, p2):
    return _skycoin.SKY_wallet_Wallet_GetEntry(p0, p1, p2)
SKY_wallet_Wallet_GetEntry = _skycoin.SKY_wallet_Wallet_GetEntry

def SKY_wallet_Wallet_AddEntry(p0, p1):
    return _skycoin.SKY_wallet_Wallet_AddEntry(p0, p1)
SKY_wallet_Wallet_AddEntry = _skycoin.SKY_wallet_Wallet_AddEntry

def SKY_wallet_DistributeSpendHours(p0, p1, p2):
    return _skycoin.SKY_wallet_DistributeSpendHours(p0, p1, p2)
SKY_wallet_DistributeSpendHours = _skycoin.SKY_wallet_DistributeSpendHours

def SKY_wallet_DistributeCoinHoursProportional(p0, p1):
    return _skycoin.SKY_wallet_DistributeCoinHoursProportional(p0, p1)
SKY_wallet_DistributeCoinHoursProportional = _skycoin.SKY_wallet_DistributeCoinHoursProportional

def SKY_wallet_NewUxBalances(p0):
    return _skycoin.SKY_wallet_NewUxBalances(p0)
SKY_wallet_NewUxBalances = _skycoin.SKY_wallet_NewUxBalances

def SKY_wallet_NewUxBalance(p0, p1, p2):
    return _skycoin.SKY_wallet_NewUxBalance(p0, p1, p2)
SKY_wallet_NewUxBalance = _skycoin.SKY_wallet_NewUxBalance

def SKY_wallet_ChooseSpendsMinimizeUxOuts(p0, p1, p2):
    return _skycoin.SKY_wallet_ChooseSpendsMinimizeUxOuts(p0, p1, p2)
SKY_wallet_ChooseSpendsMinimizeUxOuts = _skycoin.SKY_wallet_ChooseSpendsMinimizeUxOuts

def SKY_wallet_ChooseSpendsMaximizeUxOuts(p0, p1, p2):
    return _skycoin.SKY_wallet_ChooseSpendsMaximizeUxOuts(p0, p1, p2)
SKY_wallet_ChooseSpendsMaximizeUxOuts = _skycoin.SKY_wallet_ChooseSpendsMaximizeUxOuts

def SKY_cli_AddPrivateKey(p0, p1):
    return _skycoin.SKY_cli_AddPrivateKey(p0, p1)
SKY_cli_AddPrivateKey = _skycoin.SKY_cli_AddPrivateKey

def SKY_cli_AddPrivateKeyToFile(p0, p1, p2):
    return _skycoin.SKY_cli_AddPrivateKeyToFile(p0, p1, p2)
SKY_cli_AddPrivateKeyToFile = _skycoin.SKY_cli_AddPrivateKeyToFile

def SKY_cli_App_Run(p0, p1):
    return _skycoin.SKY_cli_App_Run(p0, p1)
SKY_cli_App_Run = _skycoin.SKY_cli_App_Run

def SKY_cli_Config_GetCoin(p0):
    return _skycoin.SKY_cli_Config_GetCoin(p0)
SKY_cli_Config_GetCoin = _skycoin.SKY_cli_Config_GetCoin

def SKY_cli_Config_GetRPCAddress(p0):
    return _skycoin.SKY_cli_Config_GetRPCAddress(p0)
SKY_cli_Config_GetRPCAddress = _skycoin.SKY_cli_Config_GetRPCAddress

def SKY_cli_RPCClientFromApp(p0):
    return _skycoin.SKY_cli_RPCClientFromApp(p0)
SKY_cli_RPCClientFromApp = _skycoin.SKY_cli_RPCClientFromApp

def SKY_cli_Getenv(p0):
    return _skycoin.SKY_cli_Getenv(p0)
SKY_cli_Getenv = _skycoin.SKY_cli_Getenv

def SKY_cli_Setenv(p0, p1):
    return _skycoin.SKY_cli_Setenv(p0, p1)
SKY_cli_Setenv = _skycoin.SKY_cli_Setenv

def SKY_webrpc_NewClient(p0):
    return _skycoin.SKY_webrpc_NewClient(p0)
SKY_webrpc_NewClient = _skycoin.SKY_webrpc_NewClient

def SKY_webrpc_Client_CSRF(p0):
    return _skycoin.SKY_webrpc_Client_CSRF(p0)
SKY_webrpc_Client_CSRF = _skycoin.SKY_webrpc_Client_CSRF

def SKY_webrpc_Client_GetUnspentOutputs(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetUnspentOutputs(p0, p1, p2)
SKY_webrpc_Client_GetUnspentOutputs = _skycoin.SKY_webrpc_Client_GetUnspentOutputs

def SKY_webrpc_Client_InjectTransactionString(p0, p1):
    return _skycoin.SKY_webrpc_Client_InjectTransactionString(p0, p1)
SKY_webrpc_Client_InjectTransactionString = _skycoin.SKY_webrpc_Client_InjectTransactionString

def SKY_webrpc_Client_InjectTransaction(p0, p1):
    return _skycoin.SKY_webrpc_Client_InjectTransaction(p0, p1)
SKY_webrpc_Client_InjectTransaction = _skycoin.SKY_webrpc_Client_InjectTransaction

def SKY_webrpc_Client_GetStatus(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetStatus(p0, p1)
SKY_webrpc_Client_GetStatus = _skycoin.SKY_webrpc_Client_GetStatus

def SKY_webrpc_Client_GetTransactionByID(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetTransactionByID(p0, p1, p2)
SKY_webrpc_Client_GetTransactionByID = _skycoin.SKY_webrpc_Client_GetTransactionByID

def SKY_webrpc_Client_GetAddressUxOuts(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetAddressUxOuts(p0, p1)
SKY_webrpc_Client_GetAddressUxOuts = _skycoin.SKY_webrpc_Client_GetAddressUxOuts

def SKY_webrpc_Client_GetBlocks(p0, p1, p2):
    return _skycoin.SKY_webrpc_Client_GetBlocks(p0, p1, p2)
SKY_webrpc_Client_GetBlocks = _skycoin.SKY_webrpc_Client_GetBlocks

def SKY_webrpc_Client_GetBlocksBySeq(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetBlocksBySeq(p0, p1)
SKY_webrpc_Client_GetBlocksBySeq = _skycoin.SKY_webrpc_Client_GetBlocksBySeq

def SKY_webrpc_Client_GetLastBlocks(p0, p1):
    return _skycoin.SKY_webrpc_Client_GetLastBlocks(p0, p1)
SKY_webrpc_Client_GetLastBlocks = _skycoin.SKY_webrpc_Client_GetLastBlocks

def SKY_droplet_FromString(p0):
    return _skycoin.SKY_droplet_FromString(p0)
SKY_droplet_FromString = _skycoin.SKY_droplet_FromString

def SKY_droplet_ToString(p0):
    return _skycoin.SKY_droplet_ToString(p0)
SKY_droplet_ToString = _skycoin.SKY_droplet_ToString

def SKY_bip39_NewDefaultMnemomic():
    return _skycoin.SKY_bip39_NewDefaultMnemomic()
SKY_bip39_NewDefaultMnemomic = _skycoin.SKY_bip39_NewDefaultMnemomic

def SKY_bip39_NewEntropy(p0):
    return _skycoin.SKY_bip39_NewEntropy(p0)
SKY_bip39_NewEntropy = _skycoin.SKY_bip39_NewEntropy

def SKY_bip39_NewMnemonic(p0):
    return _skycoin.SKY_bip39_NewMnemonic(p0)
SKY_bip39_NewMnemonic = _skycoin.SKY_bip39_NewMnemonic

def SKY_bip39_MnemonicToByteArray(p0):
    return _skycoin.SKY_bip39_MnemonicToByteArray(p0)
SKY_bip39_MnemonicToByteArray = _skycoin.SKY_bip39_MnemonicToByteArray

def SKY_bip39_IsMnemonicValid(p0):
    return _skycoin.SKY_bip39_IsMnemonicValid(p0)
SKY_bip39_IsMnemonicValid = _skycoin.SKY_bip39_IsMnemonicValid

def SKY_secp256k1go_XYZ_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Print(p0, p1)
SKY_secp256k1go_XYZ_Print = _skycoin.SKY_secp256k1go_XYZ_Print

def SKY_secp256k1go_XYZ_SetXY(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_SetXY(p0, p1)
SKY_secp256k1go_XYZ_SetXY = _skycoin.SKY_secp256k1go_XYZ_SetXY

def SKY_secp256k1go_XYZ_IsInfinity(p0):
    return _skycoin.SKY_secp256k1go_XYZ_IsInfinity(p0)
SKY_secp256k1go_XYZ_IsInfinity = _skycoin.SKY_secp256k1go_XYZ_IsInfinity

def SKY_secp256k1go_XYZ_IsValid(p0):
    return _skycoin.SKY_secp256k1go_XYZ_IsValid(p0)
SKY_secp256k1go_XYZ_IsValid = _skycoin.SKY_secp256k1go_XYZ_IsValid

def SKY_secp256k1go_XYZ_Normalize(p0):
    return _skycoin.SKY_secp256k1go_XYZ_Normalize(p0)
SKY_secp256k1go_XYZ_Normalize = _skycoin.SKY_secp256k1go_XYZ_Normalize

def SKY_secp256k1go_XYZ_Equals(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Equals(p0, p1)
SKY_secp256k1go_XYZ_Equals = _skycoin.SKY_secp256k1go_XYZ_Equals

def SKY_secp256k1go_XYZ_ECmult(p0, p1, p2, p3):
    return _skycoin.SKY_secp256k1go_XYZ_ECmult(p0, p1, p2, p3)
SKY_secp256k1go_XYZ_ECmult = _skycoin.SKY_secp256k1go_XYZ_ECmult

def SKY_secp256k1go_XYZ_Neg(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Neg(p0, p1)
SKY_secp256k1go_XYZ_Neg = _skycoin.SKY_secp256k1go_XYZ_Neg

def SKY_secp256k1go_XYZ_Double(p0, p1):
    return _skycoin.SKY_secp256k1go_XYZ_Double(p0, p1)
SKY_secp256k1go_XYZ_Double = _skycoin.SKY_secp256k1go_XYZ_Double

def SKY_secp256k1go_XYZ_AddXY(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XYZ_AddXY(p0, p1, p2)
SKY_secp256k1go_XYZ_AddXY = _skycoin.SKY_secp256k1go_XYZ_AddXY

def SKY_secp256k1go_XYZ_Add(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XYZ_Add(p0, p1, p2)
SKY_secp256k1go_XYZ_Add = _skycoin.SKY_secp256k1go_XYZ_Add

def SKY_secp256k1go_ECmultGen(p0, p1):
    return _skycoin.SKY_secp256k1go_ECmultGen(p0, p1)
SKY_secp256k1go_ECmultGen = _skycoin.SKY_secp256k1go_ECmultGen

def SKY_wallet_NewNotesFilename():
    return _skycoin.SKY_wallet_NewNotesFilename()
SKY_wallet_NewNotesFilename = _skycoin.SKY_wallet_NewNotesFilename

def SKY_wallet_LoadNotes(p0, p1):
    return _skycoin.SKY_wallet_LoadNotes(p0, p1)
SKY_wallet_LoadNotes = _skycoin.SKY_wallet_LoadNotes

def SKY_wallet_LoadReadableNotes(p0, p1):
    return _skycoin.SKY_wallet_LoadReadableNotes(p0, p1)
SKY_wallet_LoadReadableNotes = _skycoin.SKY_wallet_LoadReadableNotes

def SKY_wallet_ReadableNotes_Load(p0, p1):
    return _skycoin.SKY_wallet_ReadableNotes_Load(p0, p1)
SKY_wallet_ReadableNotes_Load = _skycoin.SKY_wallet_ReadableNotes_Load

def SKY_wallet_ReadableNotes_ToNotes(p0, p1):
    return _skycoin.SKY_wallet_ReadableNotes_ToNotes(p0, p1)
SKY_wallet_ReadableNotes_ToNotes = _skycoin.SKY_wallet_ReadableNotes_ToNotes

def SKY_wallet_ReadableNotes_Save(p0, p1):
    return _skycoin.SKY_wallet_ReadableNotes_Save(p0, p1)
SKY_wallet_ReadableNotes_Save = _skycoin.SKY_wallet_ReadableNotes_Save

def SKY_wallet_NewReadableNote(p0, p1):
    return _skycoin.SKY_wallet_NewReadableNote(p0, p1)
SKY_wallet_NewReadableNote = _skycoin.SKY_wallet_NewReadableNote

def SKY_wallet_NewReadableNotesFromNotes(p0, p1):
    return _skycoin.SKY_wallet_NewReadableNotesFromNotes(p0, p1)
SKY_wallet_NewReadableNotesFromNotes = _skycoin.SKY_wallet_NewReadableNotesFromNotes

def SKY_wallet_Notes_Save(p0, p1, p2):
    return _skycoin.SKY_wallet_Notes_Save(p0, p1, p2)
SKY_wallet_Notes_Save = _skycoin.SKY_wallet_Notes_Save

def SKY_wallet_Notes_SaveNote(p0, p1, p2):
    return _skycoin.SKY_wallet_Notes_SaveNote(p0, p1, p2)
SKY_wallet_Notes_SaveNote = _skycoin.SKY_wallet_Notes_SaveNote

def SKY_wallet_Notes_ToReadable(p0, p1):
    return _skycoin.SKY_wallet_Notes_ToReadable(p0, p1)
SKY_wallet_Notes_ToReadable = _skycoin.SKY_wallet_Notes_ToReadable

def SKY_wallet_NotesFileExist(p0):
    return _skycoin.SKY_wallet_NotesFileExist(p0)
SKY_wallet_NotesFileExist = _skycoin.SKY_wallet_NotesFileExist

def SKY_wallet_CreateNoteFileIfNotExist(p0):
    return _skycoin.SKY_wallet_CreateNoteFileIfNotExist(p0)
SKY_wallet_CreateNoteFileIfNotExist = _skycoin.SKY_wallet_CreateNoteFileIfNotExist

def SKY_encrypt_ScryptChacha20poly1305_Encrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_ScryptChacha20poly1305_Encrypt(p0, p1, p2)
SKY_encrypt_ScryptChacha20poly1305_Encrypt = _skycoin.SKY_encrypt_ScryptChacha20poly1305_Encrypt

def SKY_encrypt_ScryptChacha20poly1305_Decrypt(p0, p1, p2):
    return _skycoin.SKY_encrypt_ScryptChacha20poly1305_Decrypt(p0, p1, p2)
SKY_encrypt_ScryptChacha20poly1305_Decrypt = _skycoin.SKY_encrypt_ScryptChacha20poly1305_Decrypt

def SKY_coin_AddUint64(p0, p1):
    return _skycoin.SKY_coin_AddUint64(p0, p1)
SKY_coin_AddUint64 = _skycoin.SKY_coin_AddUint64

def SKY_coin_Uint64ToInt64(p0):
    return _skycoin.SKY_coin_Uint64ToInt64(p0)
SKY_coin_Uint64ToInt64 = _skycoin.SKY_coin_Uint64ToInt64

def SKY_coin_Int64ToUint64(p0):
    return _skycoin.SKY_coin_Int64ToUint64(p0)
SKY_coin_Int64ToUint64 = _skycoin.SKY_coin_Int64ToUint64

def SKY_wallet_NewBalance(p0, p1, p2):
    return _skycoin.SKY_wallet_NewBalance(p0, p1, p2)
SKY_wallet_NewBalance = _skycoin.SKY_wallet_NewBalance

def SKY_wallet_NewBalanceFromUxOut(p0, p1, p2):
    return _skycoin.SKY_wallet_NewBalanceFromUxOut(p0, p1, p2)
SKY_wallet_NewBalanceFromUxOut = _skycoin.SKY_wallet_NewBalanceFromUxOut

def SKY_wallet_Balance_Add(p0, p1, p2):
    return _skycoin.SKY_wallet_Balance_Add(p0, p1, p2)
SKY_wallet_Balance_Add = _skycoin.SKY_wallet_Balance_Add

def SKY_wallet_Balance_Sub(p0, p1, p2):
    return _skycoin.SKY_wallet_Balance_Sub(p0, p1, p2)
SKY_wallet_Balance_Sub = _skycoin.SKY_wallet_Balance_Sub

def SKY_wallet_Balance_Equals(p0, p1):
    return _skycoin.SKY_wallet_Balance_Equals(p0, p1)
SKY_wallet_Balance_Equals = _skycoin.SKY_wallet_Balance_Equals

def SKY_wallet_Balance_IsZero(p0):
    return _skycoin.SKY_wallet_Balance_IsZero(p0)
SKY_wallet_Balance_IsZero = _skycoin.SKY_wallet_Balance_IsZero

def SKY_ripemd160_New(p0):
    return _skycoin.SKY_ripemd160_New(p0)
SKY_ripemd160_New = _skycoin.SKY_ripemd160_New

def SKY_ripemd160_Write(p0, p1):
    return _skycoin.SKY_ripemd160_Write(p0, p1)
SKY_ripemd160_Write = _skycoin.SKY_ripemd160_Write

def SKY_ripemd160_Sum(p0, p1):
    return _skycoin.SKY_ripemd160_Sum(p0, p1)
SKY_ripemd160_Sum = _skycoin.SKY_ripemd160_Sum

def SKY_coin_NewBlock(p0, p1, p2, p3, p4):
    return _skycoin.SKY_coin_NewBlock(p0, p1, p2, p3, p4)
SKY_coin_NewBlock = _skycoin.SKY_coin_NewBlock

def SKY_coin_SignedBlock_VerifySignature(p0, p1):
    return _skycoin.SKY_coin_SignedBlock_VerifySignature(p0, p1)
SKY_coin_SignedBlock_VerifySignature = _skycoin.SKY_coin_SignedBlock_VerifySignature

def SKY_coin_NewGenesisBlock(p0, p1, p2):
    return _skycoin.SKY_coin_NewGenesisBlock(p0, p1, p2)
SKY_coin_NewGenesisBlock = _skycoin.SKY_coin_NewGenesisBlock

def SKY_coin_Block_HashHeader(p0, p1):
    return _skycoin.SKY_coin_Block_HashHeader(p0, p1)
SKY_coin_Block_HashHeader = _skycoin.SKY_coin_Block_HashHeader

def SKY_coin_Block_PreHashHeader(p0, p1):
    return _skycoin.SKY_coin_Block_PreHashHeader(p0, p1)
SKY_coin_Block_PreHashHeader = _skycoin.SKY_coin_Block_PreHashHeader

def SKY_coin_Block_Time(p0):
    return _skycoin.SKY_coin_Block_Time(p0)
SKY_coin_Block_Time = _skycoin.SKY_coin_Block_Time

def SKY_coin_Block_Seq(p0):
    return _skycoin.SKY_coin_Block_Seq(p0)
SKY_coin_Block_Seq = _skycoin.SKY_coin_Block_Seq

def SKY_coin_Block_HashBody(p0, p1):
    return _skycoin.SKY_coin_Block_HashBody(p0, p1)
SKY_coin_Block_HashBody = _skycoin.SKY_coin_Block_HashBody

def SKY_coin_Block_Size(p0):
    return _skycoin.SKY_coin_Block_Size(p0)
SKY_coin_Block_Size = _skycoin.SKY_coin_Block_Size

def SKY_coin_Block_String(p0):
    return _skycoin.SKY_coin_Block_String(p0)
SKY_coin_Block_String = _skycoin.SKY_coin_Block_String

def SKY_coin_Block_GetTransaction(p0, p1):
    return _skycoin.SKY_coin_Block_GetTransaction(p0, p1)
SKY_coin_Block_GetTransaction = _skycoin.SKY_coin_Block_GetTransaction

def SKY_coin_NewBlockHeader(p0, p1, p2, p3, p4, p5):
    return _skycoin.SKY_coin_NewBlockHeader(p0, p1, p2, p3, p4, p5)
SKY_coin_NewBlockHeader = _skycoin.SKY_coin_NewBlockHeader

def SKY_coin_BlockHeader_Hash(p0, p1):
    return _skycoin.SKY_coin_BlockHeader_Hash(p0, p1)
SKY_coin_BlockHeader_Hash = _skycoin.SKY_coin_BlockHeader_Hash

def SKY_coin_BlockHeader_Bytes(p0):
    return _skycoin.SKY_coin_BlockHeader_Bytes(p0)
SKY_coin_BlockHeader_Bytes = _skycoin.SKY_coin_BlockHeader_Bytes

def SKY_coin_BlockHeader_String(p0):
    return _skycoin.SKY_coin_BlockHeader_String(p0)
SKY_coin_BlockHeader_String = _skycoin.SKY_coin_BlockHeader_String

def SKY_coin_BlockBody_Hash(p0, p1):
    return _skycoin.SKY_coin_BlockBody_Hash(p0, p1)
SKY_coin_BlockBody_Hash = _skycoin.SKY_coin_BlockBody_Hash

def SKY_coin_BlockBody_Size():
    return _skycoin.SKY_coin_BlockBody_Size()
SKY_coin_BlockBody_Size = _skycoin.SKY_coin_BlockBody_Size

def SKY_coin_BlockBody_Bytes(p0):
    return _skycoin.SKY_coin_BlockBody_Bytes(p0)
SKY_coin_BlockBody_Bytes = _skycoin.SKY_coin_BlockBody_Bytes

def SKY_coin_CreateUnspents(*args):
    return _skycoin.SKY_coin_CreateUnspents(*args)
SKY_coin_CreateUnspents = _skycoin.SKY_coin_CreateUnspents

def SKY_coin_CreateUnspent(p0, p1, p2, p3):
    return _skycoin.SKY_coin_CreateUnspent(p0, p1, p2, p3)
SKY_coin_CreateUnspent = _skycoin.SKY_coin_CreateUnspent

def SKY_coin_GetBlockObject(p0):
    return _skycoin.SKY_coin_GetBlockObject(p0)
SKY_coin_GetBlockObject = _skycoin.SKY_coin_GetBlockObject

def SKY_coin_GetBlockBody(p0):
    return _skycoin.SKY_coin_GetBlockBody(p0)
SKY_coin_GetBlockBody = _skycoin.SKY_coin_GetBlockBody

def SKY_coin_NewEmptyBlock(p0):
    return _skycoin.SKY_coin_NewEmptyBlock(p0)
SKY_coin_NewEmptyBlock = _skycoin.SKY_coin_NewEmptyBlock

def SKY_wallet_CreateAddresses(p0, p1, p2, p3):
    return _skycoin.SKY_wallet_CreateAddresses(p0, p1, p2, p3)
SKY_wallet_CreateAddresses = _skycoin.SKY_wallet_CreateAddresses

def SKY_wallet_GetSkycoinWalletEntry(p0, p1):
    return _skycoin.SKY_wallet_GetSkycoinWalletEntry(p0, p1)
SKY_wallet_GetSkycoinWalletEntry = _skycoin.SKY_wallet_GetSkycoinWalletEntry

def SKY_wallet_GetBitcoinWalletEntry(p0, p1):
    return _skycoin.SKY_wallet_GetBitcoinWalletEntry(p0, p1)
SKY_wallet_GetBitcoinWalletEntry = _skycoin.SKY_wallet_GetBitcoinWalletEntry

def SKY_map_Get(p1):
    return _skycoin.SKY_map_Get(p1)
SKY_map_Get = _skycoin.SKY_map_Get

def SKY_map_HasKey(p1):
    return _skycoin.SKY_map_HasKey(p1)
SKY_map_HasKey = _skycoin.SKY_map_HasKey

def SKY_map_Close():
    return _skycoin.SKY_map_Close()
SKY_map_Close = _skycoin.SKY_map_Close

def SKY_logging_EnableColors():
    return _skycoin.SKY_logging_EnableColors()
SKY_logging_EnableColors = _skycoin.SKY_logging_EnableColors

def SKY_logging_DisableColors():
    return _skycoin.SKY_logging_DisableColors()
SKY_logging_DisableColors = _skycoin.SKY_logging_DisableColors

def SKY_logging_Disable():
    return _skycoin.SKY_logging_Disable()
SKY_logging_Disable = _skycoin.SKY_logging_Disable

def SKY_cli_GenerateWallet(p0, p2):
    return _skycoin.SKY_cli_GenerateWallet(p0, p2)
SKY_cli_GenerateWallet = _skycoin.SKY_cli_GenerateWallet

def SKY_cli_MakeAlphanumericSeed():
    return _skycoin.SKY_cli_MakeAlphanumericSeed()
SKY_cli_MakeAlphanumericSeed = _skycoin.SKY_cli_MakeAlphanumericSeed

def SKY_secp256k1go_Signature_Create():
    return _skycoin.SKY_secp256k1go_Signature_Create()
SKY_secp256k1go_Signature_Create = _skycoin.SKY_secp256k1go_Signature_Create

def SKY_secp256k1go_Signature_GetR(p0):
    return _skycoin.SKY_secp256k1go_Signature_GetR(p0)
SKY_secp256k1go_Signature_GetR = _skycoin.SKY_secp256k1go_Signature_GetR

def SKY_secp256k1go_Signature_GetS(p0):
    return _skycoin.SKY_secp256k1go_Signature_GetS(p0)
SKY_secp256k1go_Signature_GetS = _skycoin.SKY_secp256k1go_Signature_GetS

def SKY_secp256k1go_Signature_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_Signature_Print(p0, p1)
SKY_secp256k1go_Signature_Print = _skycoin.SKY_secp256k1go_Signature_Print

def SKY_secp256k1go_Signature_Verify(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_Signature_Verify(p0, p1, p2)
SKY_secp256k1go_Signature_Verify = _skycoin.SKY_secp256k1go_Signature_Verify

def SKY_secp256k1go_Signature_Recover(p0, p1, p2, p3):
    return _skycoin.SKY_secp256k1go_Signature_Recover(p0, p1, p2, p3)
SKY_secp256k1go_Signature_Recover = _skycoin.SKY_secp256k1go_Signature_Recover

def SKY_secp256k1go_Signature_Sign(p0, p1, p2, p3):
    return _skycoin.SKY_secp256k1go_Signature_Sign(p0, p1, p2, p3)
SKY_secp256k1go_Signature_Sign = _skycoin.SKY_secp256k1go_Signature_Sign

def SKY_secp256k1go_Signature_ParseBytes(p0, p1):
    return _skycoin.SKY_secp256k1go_Signature_ParseBytes(p0, p1)
SKY_secp256k1go_Signature_ParseBytes = _skycoin.SKY_secp256k1go_Signature_ParseBytes

def SKY_secp256k1go_Signature_Bytes(p0):
    return _skycoin.SKY_secp256k1go_Signature_Bytes(p0)
SKY_secp256k1go_Signature_Bytes = _skycoin.SKY_secp256k1go_Signature_Bytes

def SKY_secp256k1go_Number_Create():
    return _skycoin.SKY_secp256k1go_Number_Create()
SKY_secp256k1go_Number_Create = _skycoin.SKY_secp256k1go_Number_Create

def SKY_secp256k1go_Number_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_Number_Print(p0, p1)
SKY_secp256k1go_Number_Print = _skycoin.SKY_secp256k1go_Number_Print

def SKY_secp256k1go_Number_SetHex(p0, p1):
    return _skycoin.SKY_secp256k1go_Number_SetHex(p0, p1)
SKY_secp256k1go_Number_SetHex = _skycoin.SKY_secp256k1go_Number_SetHex

def SKY_secp256k1go_Number_IsOdd(p0):
    return _skycoin.SKY_secp256k1go_Number_IsOdd(p0)
SKY_secp256k1go_Number_IsOdd = _skycoin.SKY_secp256k1go_Number_IsOdd

def SKY_secp256k1go_Number_IsEqual(p0, p1):
    return _skycoin.SKY_secp256k1go_Number_IsEqual(p0, p1)
SKY_secp256k1go_Number_IsEqual = _skycoin.SKY_secp256k1go_Number_IsEqual

def SKY_wallet_CreateOptionsHandle(p0, p1, p2, p3, p4, p5, p6):
    return _skycoin.SKY_wallet_CreateOptionsHandle(p0, p1, p2, p3, p4, p5, p6)
SKY_wallet_CreateOptionsHandle = _skycoin.SKY_wallet_CreateOptionsHandle

def SKY_secp256k1go_XY_Print(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_Print(p0, p1)
SKY_secp256k1go_XY_Print = _skycoin.SKY_secp256k1go_XY_Print

def SKY_secp256k1go_XY_ParsePubkey(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_ParsePubkey(p0, p1)
SKY_secp256k1go_XY_ParsePubkey = _skycoin.SKY_secp256k1go_XY_ParsePubkey

def SKY_secp256k1go_XY_Bytes(p0):
    return _skycoin.SKY_secp256k1go_XY_Bytes(p0)
SKY_secp256k1go_XY_Bytes = _skycoin.SKY_secp256k1go_XY_Bytes

def SKY_secp256k1go_XY_BytesUncompressed(p0):
    return _skycoin.SKY_secp256k1go_XY_BytesUncompressed(p0)
SKY_secp256k1go_XY_BytesUncompressed = _skycoin.SKY_secp256k1go_XY_BytesUncompressed

def SKY_secp256k1go_XY_SetXY(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XY_SetXY(p0, p1, p2)
SKY_secp256k1go_XY_SetXY = _skycoin.SKY_secp256k1go_XY_SetXY

def SKY_secp256k1go_XY_IsValid(p0):
    return _skycoin.SKY_secp256k1go_XY_IsValid(p0)
SKY_secp256k1go_XY_IsValid = _skycoin.SKY_secp256k1go_XY_IsValid

def SKY_secp256k1go_XY_SetXYZ(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_SetXYZ(p0, p1)
SKY_secp256k1go_XY_SetXYZ = _skycoin.SKY_secp256k1go_XY_SetXYZ

def SKY_secp256k1go_XY_Neg(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_Neg(p0, p1)
SKY_secp256k1go_XY_Neg = _skycoin.SKY_secp256k1go_XY_Neg

def SKY_secp256k1go_XY_SetXO(p0, p1, p2):
    return _skycoin.SKY_secp256k1go_XY_SetXO(p0, p1, p2)
SKY_secp256k1go_XY_SetXO = _skycoin.SKY_secp256k1go_XY_SetXO

def SKY_secp256k1go_XY_AddXY(p0, p1):
    return _skycoin.SKY_secp256k1go_XY_AddXY(p0, p1)
SKY_secp256k1go_XY_AddXY = _skycoin.SKY_secp256k1go_XY_AddXY

def SKY_secp256k1go_XY_GetPublicKey(p0):
    return _skycoin.SKY_secp256k1go_XY_GetPublicKey(p0)
SKY_secp256k1go_XY_GetPublicKey = _skycoin.SKY_secp256k1go_XY_GetPublicKey

def SKY_wallet_Entry_Verify(p0):
    return _skycoin.SKY_wallet_Entry_Verify(p0)
SKY_wallet_Entry_Verify = _skycoin.SKY_wallet_Entry_Verify

def SKY_wallet_Entry_VerifyPublic(p0):
    return _skycoin.SKY_wallet_Entry_VerifyPublic(p0)
SKY_wallet_Entry_VerifyPublic = _skycoin.SKY_wallet_Entry_VerifyPublic

def SKY_wallet_CryptoTypeFromString(p0):
    return _skycoin.SKY_wallet_CryptoTypeFromString(p0)
SKY_wallet_CryptoTypeFromString = _skycoin.SKY_wallet_CryptoTypeFromString
class cipher__Address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cipher__Address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cipher__Address, name)
    __repr__ = _swig_repr

    def __eq__(self, a):
        return _skycoin.cipher__Address___eq__(self, a)

    def toStr(self):
        return _skycoin.cipher__Address_toStr(self)
    __swig_setmethods__["Version"] = _skycoin.cipher__Address_Version_set
    __swig_getmethods__["Version"] = _skycoin.cipher__Address_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.cipher__Address_Version_get, _skycoin.cipher__Address_Version_set)
    __swig_setmethods__["Key"] = _skycoin.cipher__Address_Key_set
    __swig_getmethods__["Key"] = _skycoin.cipher__Address_Key_get
    if _newclass:
        Key = _swig_property(_skycoin.cipher__Address_Key_get, _skycoin.cipher__Address_Key_set)

    def __init__(self):
        this = _skycoin.new_cipher__Address()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cipher__Address
    __del__ = lambda self: None
cipher__Address_swigregister = _skycoin.cipher__Address_swigregister
cipher__Address_swigregister(cipher__Address)

class encoder__StructField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encoder__StructField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encoder__StructField, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Name"] = _skycoin.encoder__StructField_Name_set
    __swig_getmethods__["Name"] = _skycoin.encoder__StructField_Name_get
    if _newclass:
        Name = _swig_property(_skycoin.encoder__StructField_Name_get, _skycoin.encoder__StructField_Name_set)
    __swig_setmethods__["Kind"] = _skycoin.encoder__StructField_Kind_set
    __swig_getmethods__["Kind"] = _skycoin.encoder__StructField_Kind_get
    if _newclass:
        Kind = _swig_property(_skycoin.encoder__StructField_Kind_get, _skycoin.encoder__StructField_Kind_set)
    __swig_setmethods__["Type"] = _skycoin.encoder__StructField_Type_set
    __swig_getmethods__["Type"] = _skycoin.encoder__StructField_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.encoder__StructField_Type_get, _skycoin.encoder__StructField_Type_set)
    __swig_setmethods__["Tag"] = _skycoin.encoder__StructField_Tag_set
    __swig_getmethods__["Tag"] = _skycoin.encoder__StructField_Tag_get
    if _newclass:
        Tag = _swig_property(_skycoin.encoder__StructField_Tag_get, _skycoin.encoder__StructField_Tag_set)

    def __init__(self):
        this = _skycoin.new_encoder__StructField()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_encoder__StructField
    __del__ = lambda self: None
encoder__StructField_swigregister = _skycoin.encoder__StructField_swigregister
encoder__StructField_swigregister(encoder__StructField)

class encrypt__ScryptChacha20poly1305(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encrypt__ScryptChacha20poly1305, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encrypt__ScryptChacha20poly1305, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _skycoin.encrypt__ScryptChacha20poly1305_N_set
    __swig_getmethods__["N"] = _skycoin.encrypt__ScryptChacha20poly1305_N_get
    if _newclass:
        N = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_N_get, _skycoin.encrypt__ScryptChacha20poly1305_N_set)
    __swig_setmethods__["R"] = _skycoin.encrypt__ScryptChacha20poly1305_R_set
    __swig_getmethods__["R"] = _skycoin.encrypt__ScryptChacha20poly1305_R_get
    if _newclass:
        R = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_R_get, _skycoin.encrypt__ScryptChacha20poly1305_R_set)
    __swig_setmethods__["P"] = _skycoin.encrypt__ScryptChacha20poly1305_P_set
    __swig_getmethods__["P"] = _skycoin.encrypt__ScryptChacha20poly1305_P_get
    if _newclass:
        P = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_P_get, _skycoin.encrypt__ScryptChacha20poly1305_P_set)
    __swig_setmethods__["KeyLen"] = _skycoin.encrypt__ScryptChacha20poly1305_KeyLen_set
    __swig_getmethods__["KeyLen"] = _skycoin.encrypt__ScryptChacha20poly1305_KeyLen_get
    if _newclass:
        KeyLen = _swig_property(_skycoin.encrypt__ScryptChacha20poly1305_KeyLen_get, _skycoin.encrypt__ScryptChacha20poly1305_KeyLen_set)

    def __init__(self):
        this = _skycoin.new_encrypt__ScryptChacha20poly1305()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_encrypt__ScryptChacha20poly1305
    __del__ = lambda self: None
encrypt__ScryptChacha20poly1305_swigregister = _skycoin.encrypt__ScryptChacha20poly1305_swigregister
encrypt__ScryptChacha20poly1305_swigregister(encrypt__ScryptChacha20poly1305)

class secp256k1go__Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, secp256k1go__Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, secp256k1go__Field, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _skycoin.secp256k1go__Field_n_set
    __swig_getmethods__["n"] = _skycoin.secp256k1go__Field_n_get
    if _newclass:
        n = _swig_property(_skycoin.secp256k1go__Field_n_get, _skycoin.secp256k1go__Field_n_set)

    def __init__(self):
        this = _skycoin.new_secp256k1go__Field()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_secp256k1go__Field
    __del__ = lambda self: None
secp256k1go__Field_swigregister = _skycoin.secp256k1go__Field_swigregister
secp256k1go__Field_swigregister(secp256k1go__Field)

class secp256k1go__XY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, secp256k1go__XY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, secp256k1go__XY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _skycoin.secp256k1go__XY_X_set
    __swig_getmethods__["X"] = _skycoin.secp256k1go__XY_X_get
    if _newclass:
        X = _swig_property(_skycoin.secp256k1go__XY_X_get, _skycoin.secp256k1go__XY_X_set)
    __swig_setmethods__["Y"] = _skycoin.secp256k1go__XY_Y_set
    __swig_getmethods__["Y"] = _skycoin.secp256k1go__XY_Y_get
    if _newclass:
        Y = _swig_property(_skycoin.secp256k1go__XY_Y_get, _skycoin.secp256k1go__XY_Y_set)
    __swig_setmethods__["Infinity"] = _skycoin.secp256k1go__XY_Infinity_set
    __swig_getmethods__["Infinity"] = _skycoin.secp256k1go__XY_Infinity_get
    if _newclass:
        Infinity = _swig_property(_skycoin.secp256k1go__XY_Infinity_get, _skycoin.secp256k1go__XY_Infinity_set)

    def __init__(self):
        this = _skycoin.new_secp256k1go__XY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_secp256k1go__XY
    __del__ = lambda self: None
secp256k1go__XY_swigregister = _skycoin.secp256k1go__XY_swigregister
secp256k1go__XY_swigregister(secp256k1go__XY)

class secp256k1go__XYZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, secp256k1go__XYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, secp256k1go__XYZ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _skycoin.secp256k1go__XYZ_X_set
    __swig_getmethods__["X"] = _skycoin.secp256k1go__XYZ_X_get
    if _newclass:
        X = _swig_property(_skycoin.secp256k1go__XYZ_X_get, _skycoin.secp256k1go__XYZ_X_set)
    __swig_setmethods__["Y"] = _skycoin.secp256k1go__XYZ_Y_set
    __swig_getmethods__["Y"] = _skycoin.secp256k1go__XYZ_Y_get
    if _newclass:
        Y = _swig_property(_skycoin.secp256k1go__XYZ_Y_get, _skycoin.secp256k1go__XYZ_Y_set)
    __swig_setmethods__["Z"] = _skycoin.secp256k1go__XYZ_Z_set
    __swig_getmethods__["Z"] = _skycoin.secp256k1go__XYZ_Z_get
    if _newclass:
        Z = _swig_property(_skycoin.secp256k1go__XYZ_Z_get, _skycoin.secp256k1go__XYZ_Z_set)
    __swig_setmethods__["Infinity"] = _skycoin.secp256k1go__XYZ_Infinity_set
    __swig_getmethods__["Infinity"] = _skycoin.secp256k1go__XYZ_Infinity_get
    if _newclass:
        Infinity = _swig_property(_skycoin.secp256k1go__XYZ_Infinity_get, _skycoin.secp256k1go__XYZ_Infinity_set)

    def __init__(self):
        this = _skycoin.new_secp256k1go__XYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_secp256k1go__XYZ
    __del__ = lambda self: None
secp256k1go__XYZ_swigregister = _skycoin.secp256k1go__XYZ_swigregister
secp256k1go__XYZ_swigregister(secp256k1go__XYZ)

class coin__SortableTransactions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__SortableTransactions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__SortableTransactions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Txns"] = _skycoin.coin__SortableTransactions_Txns_set
    __swig_getmethods__["Txns"] = _skycoin.coin__SortableTransactions_Txns_get
    if _newclass:
        Txns = _swig_property(_skycoin.coin__SortableTransactions_Txns_get, _skycoin.coin__SortableTransactions_Txns_set)
    __swig_setmethods__["Fees"] = _skycoin.coin__SortableTransactions_Fees_set
    __swig_getmethods__["Fees"] = _skycoin.coin__SortableTransactions_Fees_get
    if _newclass:
        Fees = _swig_property(_skycoin.coin__SortableTransactions_Fees_get, _skycoin.coin__SortableTransactions_Fees_set)
    __swig_setmethods__["Hashes"] = _skycoin.coin__SortableTransactions_Hashes_set
    __swig_getmethods__["Hashes"] = _skycoin.coin__SortableTransactions_Hashes_get
    if _newclass:
        Hashes = _swig_property(_skycoin.coin__SortableTransactions_Hashes_get, _skycoin.coin__SortableTransactions_Hashes_set)

    def __init__(self):
        this = _skycoin.new_coin__SortableTransactions()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__SortableTransactions
    __del__ = lambda self: None
coin__SortableTransactions_swigregister = _skycoin.coin__SortableTransactions_swigregister
coin__SortableTransactions_swigregister(coin__SortableTransactions)

class coin__Transaction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__Transaction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__Transaction, name)
    __repr__ = _swig_repr

    def __eq__(self, t):
        return _skycoin.coin__Transaction___eq__(self, t)
    __swig_setmethods__["Length"] = _skycoin.coin__Transaction_Length_set
    __swig_getmethods__["Length"] = _skycoin.coin__Transaction_Length_get
    if _newclass:
        Length = _swig_property(_skycoin.coin__Transaction_Length_get, _skycoin.coin__Transaction_Length_set)
    __swig_setmethods__["Type"] = _skycoin.coin__Transaction_Type_set
    __swig_getmethods__["Type"] = _skycoin.coin__Transaction_Type_get
    if _newclass:
        Type = _swig_property(_skycoin.coin__Transaction_Type_get, _skycoin.coin__Transaction_Type_set)
    __swig_setmethods__["InnerHash"] = _skycoin.coin__Transaction_InnerHash_set
    __swig_getmethods__["InnerHash"] = _skycoin.coin__Transaction_InnerHash_get
    if _newclass:
        InnerHash = _swig_property(_skycoin.coin__Transaction_InnerHash_get, _skycoin.coin__Transaction_InnerHash_set)
    __swig_setmethods__["Sigs"] = _skycoin.coin__Transaction_Sigs_set
    __swig_getmethods__["Sigs"] = _skycoin.coin__Transaction_Sigs_get
    if _newclass:
        Sigs = _swig_property(_skycoin.coin__Transaction_Sigs_get, _skycoin.coin__Transaction_Sigs_set)
    __swig_setmethods__["In"] = _skycoin.coin__Transaction_In_set
    __swig_getmethods__["In"] = _skycoin.coin__Transaction_In_get
    if _newclass:
        In = _swig_property(_skycoin.coin__Transaction_In_get, _skycoin.coin__Transaction_In_set)
    __swig_setmethods__["Out"] = _skycoin.coin__Transaction_Out_set
    __swig_getmethods__["Out"] = _skycoin.coin__Transaction_Out_get
    if _newclass:
        Out = _swig_property(_skycoin.coin__Transaction_Out_get, _skycoin.coin__Transaction_Out_set)

    def __init__(self):
        this = _skycoin.new_coin__Transaction()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__Transaction
    __del__ = lambda self: None
coin__Transaction_swigregister = _skycoin.coin__Transaction_swigregister
coin__Transaction_swigregister(coin__Transaction)

class coin__TransactionOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__TransactionOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__TransactionOutput, name)
    __repr__ = _swig_repr

    def __eq__(self, t):
        return _skycoin.coin__TransactionOutput___eq__(self, t)
    __swig_setmethods__["Address"] = _skycoin.coin__TransactionOutput_Address_set
    __swig_getmethods__["Address"] = _skycoin.coin__TransactionOutput_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.coin__TransactionOutput_Address_get, _skycoin.coin__TransactionOutput_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.coin__TransactionOutput_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.coin__TransactionOutput_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.coin__TransactionOutput_Coins_get, _skycoin.coin__TransactionOutput_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.coin__TransactionOutput_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.coin__TransactionOutput_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.coin__TransactionOutput_Hours_get, _skycoin.coin__TransactionOutput_Hours_set)

    def __init__(self):
        this = _skycoin.new_coin__TransactionOutput()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__TransactionOutput
    __del__ = lambda self: None
coin__TransactionOutput_swigregister = _skycoin.coin__TransactionOutput_swigregister
coin__TransactionOutput_swigregister(coin__TransactionOutput)

class coin__BlockHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__BlockHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__BlockHeader, name)
    __repr__ = _swig_repr

    def __eq__(self, bh):
        return _skycoin.coin__BlockHeader___eq__(self, bh)
    __swig_setmethods__["Version"] = _skycoin.coin__BlockHeader_Version_set
    __swig_getmethods__["Version"] = _skycoin.coin__BlockHeader_Version_get
    if _newclass:
        Version = _swig_property(_skycoin.coin__BlockHeader_Version_get, _skycoin.coin__BlockHeader_Version_set)
    __swig_setmethods__["Time"] = _skycoin.coin__BlockHeader_Time_set
    __swig_getmethods__["Time"] = _skycoin.coin__BlockHeader_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.coin__BlockHeader_Time_get, _skycoin.coin__BlockHeader_Time_set)
    __swig_setmethods__["BkSeq"] = _skycoin.coin__BlockHeader_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.coin__BlockHeader_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.coin__BlockHeader_BkSeq_get, _skycoin.coin__BlockHeader_BkSeq_set)
    __swig_setmethods__["Fee"] = _skycoin.coin__BlockHeader_Fee_set
    __swig_getmethods__["Fee"] = _skycoin.coin__BlockHeader_Fee_get
    if _newclass:
        Fee = _swig_property(_skycoin.coin__BlockHeader_Fee_get, _skycoin.coin__BlockHeader_Fee_set)
    __swig_setmethods__["PrevHash"] = _skycoin.coin__BlockHeader_PrevHash_set
    __swig_getmethods__["PrevHash"] = _skycoin.coin__BlockHeader_PrevHash_get
    if _newclass:
        PrevHash = _swig_property(_skycoin.coin__BlockHeader_PrevHash_get, _skycoin.coin__BlockHeader_PrevHash_set)
    __swig_setmethods__["BodyHash"] = _skycoin.coin__BlockHeader_BodyHash_set
    __swig_getmethods__["BodyHash"] = _skycoin.coin__BlockHeader_BodyHash_get
    if _newclass:
        BodyHash = _swig_property(_skycoin.coin__BlockHeader_BodyHash_get, _skycoin.coin__BlockHeader_BodyHash_set)
    __swig_setmethods__["UxHash"] = _skycoin.coin__BlockHeader_UxHash_set
    __swig_getmethods__["UxHash"] = _skycoin.coin__BlockHeader_UxHash_get
    if _newclass:
        UxHash = _swig_property(_skycoin.coin__BlockHeader_UxHash_get, _skycoin.coin__BlockHeader_UxHash_set)

    def __init__(self):
        this = _skycoin.new_coin__BlockHeader()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__BlockHeader
    __del__ = lambda self: None
coin__BlockHeader_swigregister = _skycoin.coin__BlockHeader_swigregister
coin__BlockHeader_swigregister(coin__BlockHeader)

class coin__BlockBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__BlockBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__BlockBody, name)
    __repr__ = _swig_repr

    def __eq__(self, b):
        return _skycoin.coin__BlockBody___eq__(self, b)
    __swig_setmethods__["Transactions"] = _skycoin.coin__BlockBody_Transactions_set
    __swig_getmethods__["Transactions"] = _skycoin.coin__BlockBody_Transactions_get
    if _newclass:
        Transactions = _swig_property(_skycoin.coin__BlockBody_Transactions_get, _skycoin.coin__BlockBody_Transactions_set)

    def __init__(self):
        this = _skycoin.new_coin__BlockBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__BlockBody
    __del__ = lambda self: None
coin__BlockBody_swigregister = _skycoin.coin__BlockBody_swigregister
coin__BlockBody_swigregister(coin__BlockBody)

class coin__Block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__Block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__Block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Head"] = _skycoin.coin__Block_Head_set
    __swig_getmethods__["Head"] = _skycoin.coin__Block_Head_get
    if _newclass:
        Head = _swig_property(_skycoin.coin__Block_Head_get, _skycoin.coin__Block_Head_set)
    __swig_setmethods__["Body"] = _skycoin.coin__Block_Body_set
    __swig_getmethods__["Body"] = _skycoin.coin__Block_Body_get
    if _newclass:
        Body = _swig_property(_skycoin.coin__Block_Body_get, _skycoin.coin__Block_Body_set)

    def __init__(self):
        this = _skycoin.new_coin__Block()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__Block
    __del__ = lambda self: None
coin__Block_swigregister = _skycoin.coin__Block_swigregister
coin__Block_swigregister(coin__Block)

class coin__SignedBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__SignedBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__SignedBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_unnamed"] = _skycoin.coin__SignedBlock__unnamed_set
    __swig_getmethods__["_unnamed"] = _skycoin.coin__SignedBlock__unnamed_get
    if _newclass:
        _unnamed = _swig_property(_skycoin.coin__SignedBlock__unnamed_get, _skycoin.coin__SignedBlock__unnamed_set)
    __swig_setmethods__["Sig"] = _skycoin.coin__SignedBlock_Sig_set
    __swig_getmethods__["Sig"] = _skycoin.coin__SignedBlock_Sig_get
    if _newclass:
        Sig = _swig_property(_skycoin.coin__SignedBlock_Sig_get, _skycoin.coin__SignedBlock_Sig_set)

    def __init__(self):
        this = _skycoin.new_coin__SignedBlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__SignedBlock
    __del__ = lambda self: None
coin__SignedBlock_swigregister = _skycoin.coin__SignedBlock_swigregister
coin__SignedBlock_swigregister(coin__SignedBlock)

class coin__UxHead(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__UxHead, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__UxHead, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Time"] = _skycoin.coin__UxHead_Time_set
    __swig_getmethods__["Time"] = _skycoin.coin__UxHead_Time_get
    if _newclass:
        Time = _swig_property(_skycoin.coin__UxHead_Time_get, _skycoin.coin__UxHead_Time_set)
    __swig_setmethods__["BkSeq"] = _skycoin.coin__UxHead_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.coin__UxHead_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.coin__UxHead_BkSeq_get, _skycoin.coin__UxHead_BkSeq_set)

    def __init__(self):
        this = _skycoin.new_coin__UxHead()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__UxHead
    __del__ = lambda self: None
coin__UxHead_swigregister = _skycoin.coin__UxHead_swigregister
coin__UxHead_swigregister(coin__UxHead)

class coin__UxBody(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__UxBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__UxBody, name)
    __repr__ = _swig_repr

    def GetSrcTransaction(self):
        return _skycoin.coin__UxBody_GetSrcTransaction(self)

    def SetSrcTransaction(self, o):
        return _skycoin.coin__UxBody_SetSrcTransaction(self, o)
    __swig_setmethods__["SrcTransaction"] = _skycoin.coin__UxBody_SrcTransaction_set
    __swig_getmethods__["SrcTransaction"] = _skycoin.coin__UxBody_SrcTransaction_get
    if _newclass:
        SrcTransaction = _swig_property(_skycoin.coin__UxBody_SrcTransaction_get, _skycoin.coin__UxBody_SrcTransaction_set)
    __swig_setmethods__["Address"] = _skycoin.coin__UxBody_Address_set
    __swig_getmethods__["Address"] = _skycoin.coin__UxBody_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.coin__UxBody_Address_get, _skycoin.coin__UxBody_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.coin__UxBody_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.coin__UxBody_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.coin__UxBody_Coins_get, _skycoin.coin__UxBody_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.coin__UxBody_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.coin__UxBody_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.coin__UxBody_Hours_get, _skycoin.coin__UxBody_Hours_set)

    def __init__(self):
        this = _skycoin.new_coin__UxBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__UxBody
    __del__ = lambda self: None
coin__UxBody_swigregister = _skycoin.coin__UxBody_swigregister
coin__UxBody_swigregister(coin__UxBody)

class coin__UxOut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coin__UxOut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coin__UxOut, name)
    __repr__ = _swig_repr

    def __eq__(self, u):
        return _skycoin.coin__UxOut___eq__(self, u)
    __swig_setmethods__["Head"] = _skycoin.coin__UxOut_Head_set
    __swig_getmethods__["Head"] = _skycoin.coin__UxOut_Head_get
    if _newclass:
        Head = _swig_property(_skycoin.coin__UxOut_Head_get, _skycoin.coin__UxOut_Head_set)
    __swig_setmethods__["Body"] = _skycoin.coin__UxOut_Body_set
    __swig_getmethods__["Body"] = _skycoin.coin__UxOut_Body_get
    if _newclass:
        Body = _swig_property(_skycoin.coin__UxOut_Body_get, _skycoin.coin__UxOut_Body_set)

    def __init__(self):
        this = _skycoin.new_coin__UxOut()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_coin__UxOut
    __del__ = lambda self: None
coin__UxOut_swigregister = _skycoin.coin__UxOut_swigregister
coin__UxOut_swigregister(coin__UxOut)

class wallet__Balance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Balance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Balance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Coins"] = _skycoin.wallet__Balance_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.wallet__Balance_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.wallet__Balance_Coins_get, _skycoin.wallet__Balance_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.wallet__Balance_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.wallet__Balance_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.wallet__Balance_Hours_get, _skycoin.wallet__Balance_Hours_set)

    def __init__(self):
        this = _skycoin.new_wallet__Balance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Balance
    __del__ = lambda self: None
wallet__Balance_swigregister = _skycoin.wallet__Balance_swigregister
wallet__Balance_swigregister(wallet__Balance)

class wallet__BalancePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__BalancePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__BalancePair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Confirmed"] = _skycoin.wallet__BalancePair_Confirmed_set
    __swig_getmethods__["Confirmed"] = _skycoin.wallet__BalancePair_Confirmed_get
    if _newclass:
        Confirmed = _swig_property(_skycoin.wallet__BalancePair_Confirmed_get, _skycoin.wallet__BalancePair_Confirmed_set)
    __swig_setmethods__["Predicted"] = _skycoin.wallet__BalancePair_Predicted_set
    __swig_getmethods__["Predicted"] = _skycoin.wallet__BalancePair_Predicted_get
    if _newclass:
        Predicted = _swig_property(_skycoin.wallet__BalancePair_Predicted_get, _skycoin.wallet__BalancePair_Predicted_set)

    def __init__(self):
        this = _skycoin.new_wallet__BalancePair()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__BalancePair
    __del__ = lambda self: None
wallet__BalancePair_swigregister = _skycoin.wallet__BalancePair_swigregister
wallet__BalancePair_swigregister(wallet__BalancePair)

class wallet__Entry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Entry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Address"] = _skycoin.wallet__Entry_Address_set
    __swig_getmethods__["Address"] = _skycoin.wallet__Entry_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.wallet__Entry_Address_get, _skycoin.wallet__Entry_Address_set)
    __swig_setmethods__["Public"] = _skycoin.wallet__Entry_Public_set
    __swig_getmethods__["Public"] = _skycoin.wallet__Entry_Public_get
    if _newclass:
        Public = _swig_property(_skycoin.wallet__Entry_Public_get, _skycoin.wallet__Entry_Public_set)
    __swig_setmethods__["Secret"] = _skycoin.wallet__Entry_Secret_set
    __swig_getmethods__["Secret"] = _skycoin.wallet__Entry_Secret_get
    if _newclass:
        Secret = _swig_property(_skycoin.wallet__Entry_Secret_get, _skycoin.wallet__Entry_Secret_set)

    def __init__(self):
        this = _skycoin.new_wallet__Entry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Entry
    __del__ = lambda self: None
wallet__Entry_swigregister = _skycoin.wallet__Entry_swigregister
wallet__Entry_swigregister(wallet__Entry)

class wallet__Note(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Note, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Note, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TxID"] = _skycoin.wallet__Note_TxID_set
    __swig_getmethods__["TxID"] = _skycoin.wallet__Note_TxID_get
    if _newclass:
        TxID = _swig_property(_skycoin.wallet__Note_TxID_get, _skycoin.wallet__Note_TxID_set)
    __swig_setmethods__["Value"] = _skycoin.wallet__Note_Value_set
    __swig_getmethods__["Value"] = _skycoin.wallet__Note_Value_get
    if _newclass:
        Value = _swig_property(_skycoin.wallet__Note_Value_get, _skycoin.wallet__Note_Value_set)

    def __init__(self):
        this = _skycoin.new_wallet__Note()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Note
    __del__ = lambda self: None
wallet__Note_swigregister = _skycoin.wallet__Note_swigregister
wallet__Note_swigregister(wallet__Note)

class wallet__ReadableNote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__ReadableNote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__ReadableNote, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TransactionID"] = _skycoin.wallet__ReadableNote_TransactionID_set
    __swig_getmethods__["TransactionID"] = _skycoin.wallet__ReadableNote_TransactionID_get
    if _newclass:
        TransactionID = _swig_property(_skycoin.wallet__ReadableNote_TransactionID_get, _skycoin.wallet__ReadableNote_TransactionID_set)
    __swig_setmethods__["ActualNote"] = _skycoin.wallet__ReadableNote_ActualNote_set
    __swig_getmethods__["ActualNote"] = _skycoin.wallet__ReadableNote_ActualNote_get
    if _newclass:
        ActualNote = _swig_property(_skycoin.wallet__ReadableNote_ActualNote_get, _skycoin.wallet__ReadableNote_ActualNote_set)

    def __init__(self):
        this = _skycoin.new_wallet__ReadableNote()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__ReadableNote
    __del__ = lambda self: None
wallet__ReadableNote_swigregister = _skycoin.wallet__ReadableNote_swigregister
wallet__ReadableNote_swigregister(wallet__ReadableNote)

class wallet__Wallet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__Wallet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__Wallet, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Meta"] = _skycoin.wallet__Wallet_Meta_set
    __swig_getmethods__["Meta"] = _skycoin.wallet__Wallet_Meta_get
    if _newclass:
        Meta = _swig_property(_skycoin.wallet__Wallet_Meta_get, _skycoin.wallet__Wallet_Meta_set)
    __swig_setmethods__["Entries"] = _skycoin.wallet__Wallet_Entries_set
    __swig_getmethods__["Entries"] = _skycoin.wallet__Wallet_Entries_get
    if _newclass:
        Entries = _swig_property(_skycoin.wallet__Wallet_Entries_get, _skycoin.wallet__Wallet_Entries_set)

    def __init__(self):
        this = _skycoin.new_wallet__Wallet()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__Wallet
    __del__ = lambda self: None
wallet__Wallet_swigregister = _skycoin.wallet__Wallet_swigregister
wallet__Wallet_swigregister(wallet__Wallet)

class wallet__UxBalance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wallet__UxBalance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wallet__UxBalance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Hash"] = _skycoin.wallet__UxBalance_Hash_set
    __swig_getmethods__["Hash"] = _skycoin.wallet__UxBalance_Hash_get
    if _newclass:
        Hash = _swig_property(_skycoin.wallet__UxBalance_Hash_get, _skycoin.wallet__UxBalance_Hash_set)
    __swig_setmethods__["BkSeq"] = _skycoin.wallet__UxBalance_BkSeq_set
    __swig_getmethods__["BkSeq"] = _skycoin.wallet__UxBalance_BkSeq_get
    if _newclass:
        BkSeq = _swig_property(_skycoin.wallet__UxBalance_BkSeq_get, _skycoin.wallet__UxBalance_BkSeq_set)
    __swig_setmethods__["Address"] = _skycoin.wallet__UxBalance_Address_set
    __swig_getmethods__["Address"] = _skycoin.wallet__UxBalance_Address_get
    if _newclass:
        Address = _swig_property(_skycoin.wallet__UxBalance_Address_get, _skycoin.wallet__UxBalance_Address_set)
    __swig_setmethods__["Coins"] = _skycoin.wallet__UxBalance_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.wallet__UxBalance_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.wallet__UxBalance_Coins_get, _skycoin.wallet__UxBalance_Coins_set)
    __swig_setmethods__["Hours"] = _skycoin.wallet__UxBalance_Hours_set
    __swig_getmethods__["Hours"] = _skycoin.wallet__UxBalance_Hours_get
    if _newclass:
        Hours = _swig_property(_skycoin.wallet__UxBalance_Hours_get, _skycoin.wallet__UxBalance_Hours_set)

    def __init__(self):
        this = _skycoin.new_wallet__UxBalance()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_wallet__UxBalance
    __del__ = lambda self: None
wallet__UxBalance_swigregister = _skycoin.wallet__UxBalance_swigregister
wallet__UxBalance_swigregister(wallet__UxBalance)

class api__RichlistParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, api__RichlistParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, api__RichlistParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["N"] = _skycoin.api__RichlistParams_N_set
    __swig_getmethods__["N"] = _skycoin.api__RichlistParams_N_get
    if _newclass:
        N = _swig_property(_skycoin.api__RichlistParams_N_get, _skycoin.api__RichlistParams_N_set)
    __swig_setmethods__["IncludeDistribution"] = _skycoin.api__RichlistParams_IncludeDistribution_set
    __swig_getmethods__["IncludeDistribution"] = _skycoin.api__RichlistParams_IncludeDistribution_get
    if _newclass:
        IncludeDistribution = _swig_property(_skycoin.api__RichlistParams_IncludeDistribution_get, _skycoin.api__RichlistParams_IncludeDistribution_set)

    def __init__(self):
        this = _skycoin.new_api__RichlistParams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_api__RichlistParams
    __del__ = lambda self: None
api__RichlistParams_swigregister = _skycoin.api__RichlistParams_swigregister
api__RichlistParams_swigregister(api__RichlistParams)

class cli__SendAmount(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cli__SendAmount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cli__SendAmount, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Addr"] = _skycoin.cli__SendAmount_Addr_set
    __swig_getmethods__["Addr"] = _skycoin.cli__SendAmount_Addr_get
    if _newclass:
        Addr = _swig_property(_skycoin.cli__SendAmount_Addr_get, _skycoin.cli__SendAmount_Addr_set)
    __swig_setmethods__["Coins"] = _skycoin.cli__SendAmount_Coins_set
    __swig_getmethods__["Coins"] = _skycoin.cli__SendAmount_Coins_get
    if _newclass:
        Coins = _swig_property(_skycoin.cli__SendAmount_Coins_get, _skycoin.cli__SendAmount_Coins_set)

    def __init__(self):
        this = _skycoin.new_cli__SendAmount()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_cli__SendAmount
    __del__ = lambda self: None
cli__SendAmount_swigregister = _skycoin.cli__SendAmount_swigregister
cli__SendAmount_swigregister(cli__SendAmount)

class httphelper__Address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, httphelper__Address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, httphelper__Address, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_unnamed"] = _skycoin.httphelper__Address__unnamed_set
    __swig_getmethods__["_unnamed"] = _skycoin.httphelper__Address__unnamed_get
    if _newclass:
        _unnamed = _swig_property(_skycoin.httphelper__Address__unnamed_get, _skycoin.httphelper__Address__unnamed_set)

    def __init__(self):
        this = _skycoin.new_httphelper__Address()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _skycoin.delete_httphelper__Address
    __del__ = lambda self: None
httphelper__Address_swigregister = _skycoin.httphelper__Address_swigregister
httphelper__Address_swigregister(httphelper__Address)

# This file is compatible with both classic and new-style classes.


